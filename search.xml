<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>深度神经网络识别交通标牌</title>
    <url>/2021/03/15/cnn-sign-detection/</url>
    <content><![CDATA[<p>这里我们实现一个入门级的CNN交通标牌分类网络。</p>
<p><img src="/2021/03/15/cnn-sign-detection/dataset_input_output.png"></p>
<span id="more"></span>

<p>首先导入基础依赖库。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> random</span><br></pre></td></tr></table></figure>

<h1 id="数据集-Dataset"><a href="#数据集-Dataset" class="headerlink" title="数据集(Dataset)"></a>数据集(Dataset)</h1><p>数据集(Dataset)中包含43个不同分类的、大小为32x32的RGB图像，分类如下:</p>
<ul>
<li>0 = Speed limit (20km/h)</li>
<li>1 = Speed limit (30km/h)</li>
<li>2 = Speed limit (50km/h)</li>
<li>3 = Speed limit (60km/h)</li>
<li>4 = Speed limit (70km/h)</li>
<li>5 = Speed limit (80km/h)</li>
<li>6 = End of speed limit (80km/h)</li>
<li>7 = Speed limit (100km/h)</li>
<li>8 = Speed limit (120km/h)</li>
<li>9 = No passing</li>
<li>10 = No passing for vehicles over 3.5 metric tons</li>
<li>11 = Right-of-way at the next intersection</li>
<li>12 = Priority road</li>
<li>13 = Yield</li>
<li>14 = Stop</li>
<li>15 = No vehicles</li>
<li>16 = Vehicles over 3.5 metric tons prohibited</li>
<li>17 = No entry</li>
<li>18 = General caution</li>
<li>19 = Dangerous curve to the left</li>
<li>20 = Dangerous curve to the right</li>
<li>21 = Double curve</li>
<li>22 = Bumpy road</li>
<li>23 = Slippery road</li>
<li>24 = Road narrows on the right</li>
<li>25 = Road work</li>
<li>26 = Traffic signals</li>
<li>27 = Pedestrians</li>
<li>28 = Children crossing</li>
<li>29 = Bicycles crossing</li>
<li>30 = Beware of ice/snow</li>
<li>31 = Wild animals crossing</li>
<li>32 = End of all speed and passing limits</li>
<li>33 = Turn right ahead</li>
<li>34 = Turn left ahead</li>
<li>35 = Ahead only</li>
<li>36 = Go straight or right</li>
<li>37 = Go straight or left</li>
<li>38 = Keep right</li>
<li>39 = Keep left</li>
<li>40 = Roundabout mandatory</li>
<li>41 = End of no passing</li>
<li>42 = End of no passing by vehicles over 3.5 metric tons</li>
</ul>
<h2 id="数据集加载"><a href="#数据集加载" class="headerlink" title="数据集加载"></a>数据集加载</h2><p>读取训练集、验证集和测试集:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./traffic-signs-data/train.p&quot;</span>, mode=<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> training_data:</span><br><span class="line">    train = pickle.load(training_data)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./traffic-signs-data/valid.p&quot;</span>, mode=<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> validation_data:</span><br><span class="line">    valid = pickle.load(validation_data)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./traffic-signs-data/test.p&quot;</span>, mode=<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> testing_data:</span><br><span class="line">    test = pickle.load(testing_data)</span><br></pre></td></tr></table></figure>

<p>查看训练集大小：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x_train, y_train = train[<span class="string">&quot;features&quot;</span>], train[<span class="string">&quot;labels&quot;</span>]</span><br><span class="line"></span><br><span class="line">print(x_train.shape)</span><br></pre></td></tr></table></figure>

<p>(34799, 32, 32, 3)</p>
<p>查看验证集大小：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x_validation, y_validation = valid[<span class="string">&quot;features&quot;</span>], valid[<span class="string">&quot;labels&quot;</span>]</span><br><span class="line"></span><br><span class="line">print(x_validation.shape)</span><br></pre></td></tr></table></figure>

<p>(4410, 32, 32, 3)</p>
<p>查看测试集大小：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x_test, y_test = test[<span class="string">&quot;features&quot;</span>], test[<span class="string">&quot;labels&quot;</span>]</span><br><span class="line"></span><br><span class="line">print(x_test.shape)</span><br></pre></td></tr></table></figure>

<p>(12630, 32, 32, 3)</p>
<h2 id="数据集可视化"><a href="#数据集可视化" class="headerlink" title="数据集可视化"></a>数据集可视化</h2><p>随机选取一张图片：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = np.random.randint(<span class="number">1</span>, <span class="built_in">len</span>(X_train))</span><br><span class="line"></span><br><span class="line">plt.imshow(X_train[i])</span><br><span class="line"></span><br><span class="line">y_train[i]</span><br></pre></td></tr></table></figure>

<p>图片展示效果如下：</p>
<p><img src="/2021/03/15/cnn-sign-detection/traffic_sign.png"></p>
<p>多看一些数据集的数据：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">W_grid = <span class="number">5</span></span><br><span class="line">L_grid = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">fig, axes = plt.subplots(L_grid, W_grid, figsize = (<span class="number">10</span>,<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">axes = axes.ravel() <span class="comment"># flaten the 5 x 5 matrix into 25 array</span></span><br><span class="line"></span><br><span class="line">n_training = <span class="built_in">len</span>(X_train) </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> np.arange(<span class="number">0</span>, W_grid * L_grid):</span><br><span class="line">    <span class="comment"># Select a random number</span></span><br><span class="line">    index = np.random.randint(<span class="number">0</span>, n_training)</span><br><span class="line">    <span class="comment"># read and display an image with the selected index    </span></span><br><span class="line">    axes[i].imshow(X_train[index])</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>图片展示效果如下：</p>
<p><img src="/2021/03/15/cnn-sign-detection/traffic_signs.png"></p>
<h1 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h1><p>使用之前，先对数据进行一些预处理。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.utils <span class="keyword">import</span> shuffle</span><br><span class="line">X_train, y_train = shuffle(X_train, y_train)</span><br></pre></td></tr></table></figure>

<h2 id="灰度化"><a href="#灰度化" class="headerlink" title="灰度化"></a>灰度化</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X_train_gray = np.<span class="built_in">sum</span>(X_train / <span class="number">3</span>, axis = <span class="number">3</span>, keepdims = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">X_validation_gray = np.<span class="built_in">sum</span>(X_validation / <span class="number">3</span>, axis = <span class="number">3</span>, keepdims = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">X_test_gray = np.<span class="built_in">sum</span>(X_test / <span class="number">3</span>, axis = <span class="number">3</span>, keepdims = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">print(X_train_gray.shape)</span><br></pre></td></tr></table></figure>

<p>(34799, 32, 32, 1)</p>
<h2 id="Normalization"><a href="#Normalization" class="headerlink" title="Normalization"></a>Normalization</h2><p>将所有图像数据归一化到[-1, 1]。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X_train_gray_norm = (X_train_gray - <span class="number">128</span>) / <span class="number">128</span></span><br><span class="line"></span><br><span class="line">X_validation_gray_norm = (X_validation_gray - <span class="number">128</span>) / <span class="number">128</span></span><br><span class="line"></span><br><span class="line">X_test_gray_norm = (X_test_gray - <span class="number">128</span>) / <span class="number">128</span></span><br><span class="line"></span><br><span class="line">print(X_train_gray_norm)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[[[[-0.52083333]</span><br><span class="line">   [-0.52604167]</span><br><span class="line">   [-0.51822917]</span><br><span class="line">   ...</span><br><span class="line">   [-0.48958333]</span><br><span class="line">   [-0.47916667]</span><br><span class="line">   [-0.46614583]]</span><br><span class="line"></span><br><span class="line">  [[-0.52083333]</span><br><span class="line">   [-0.52083333]</span><br><span class="line">   [-0.52864583]</span><br><span class="line">   ...</span><br><span class="line">   [-0.5       ]</span><br><span class="line">   [-0.48958333]</span><br><span class="line">   [-0.4765625 ]]</span><br><span class="line"></span><br><span class="line">  [[-0.54427083]</span><br><span class="line">   [-0.53385417]</span><br><span class="line">   [-0.53385417]</span><br><span class="line">   ...</span><br><span class="line">   [-0.50520833]</span><br><span class="line">   [-0.47916667]</span><br><span class="line">   [-0.47395833]]</span><br><span class="line"></span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>

  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = random.randint(<span class="number">1</span>, <span class="built_in">len</span>(X_train_gray))</span><br><span class="line">plt.imshow(X_train_gray[i].squeeze(), cmap = <span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">plt.figure()</span><br><span class="line">plt.imshow(X_train[i])</span><br><span class="line">plt.figure()</span><br><span class="line">plt.imshow(X_train_gray_norm[i].squeeze(), cmap = <span class="string">&#x27;gray&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>  灰度化和Normalization的效果如下，从上到下依次为：灰度图像，原图像、归一化的图像。</p>
<p>  <img src="/2021/03/15/cnn-sign-detection/train_origin.png" alt="灰度图"></p>
<p>  <img src="/2021/03/15/cnn-sign-detection/train_gray.png" alt="原图"></p>
<p>  <img src="/2021/03/15/cnn-sign-detection/train_normal.png" alt="标准化"></p>
<h1 id="神经网络模型"><a href="#神经网络模型" class="headerlink" title="神经网络模型"></a>神经网络模型</h1><p>  <img src="/2021/03/15/cnn-sign-detection/cnn.png"></p>
<p>  <img src="/2021/03/15/cnn-sign-detection/dropout.png"></p>
<h2 id="构建深度神经网络"><a href="#构建深度神经网络" class="headerlink" title="构建深度神经网络"></a>构建深度神经网络</h2><p>使用Keras构建CNN网络模型。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> datasets, layers, models</span><br><span class="line"></span><br><span class="line">CNN = models.Sequential()</span><br><span class="line"></span><br><span class="line">CNN.add(layers.Conv2D(<span class="number">6</span>, (<span class="number">5</span>, <span class="number">5</span>), activation = <span class="string">&#x27;relu&#x27;</span>, input_shape = (<span class="number">32</span>, <span class="number">32</span>, <span class="number">1</span>)))</span><br><span class="line">CNN.add(layers.AveragePooling2D())</span><br><span class="line"></span><br><span class="line">CNN.add(layers.Conv2D(<span class="number">16</span>, (<span class="number">5</span>, <span class="number">5</span>), activation = <span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line">CNN.add(layers.AveragePooling2D())</span><br><span class="line"></span><br><span class="line">CNN.add(layers.Dropout(<span class="number">0.2</span>))</span><br><span class="line">CNN.add(layers.Flatten())</span><br><span class="line"></span><br><span class="line">CNN.add(layers.Dense(<span class="number">120</span>, activation = <span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line">CNN.add(layers.Dense(<span class="number">84</span>, activation = <span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line">CNN.add(layers.Dense(<span class="number">43</span>, activation = <span class="string">&#x27;softmax&#x27;</span>))</span><br><span class="line"></span><br><span class="line">CNN.summary()</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Model: &quot;sequential_1&quot;</span><br><span class="line">_________________________________________________________________</span><br><span class="line">Layer (type)                 Output Shape              Param #   </span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">conv2d_1 (Conv2D)            (None, 28, 28, 6)         156       </span><br><span class="line">_________________________________________________________________</span><br><span class="line">average_pooling2d_1 (Average (None, 14, 14, 6)         0         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv2d_2 (Conv2D)            (None, 10, 10, 16)        2416      </span><br><span class="line">_________________________________________________________________</span><br><span class="line">average_pooling2d_2 (Average (None, 5, 5, 16)          0         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dropout (Dropout)            (None, 5, 5, 16)          0         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">flatten_1 (Flatten)          (None, 400)               0         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense_3 (Dense)              (None, 120)               48120     </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense_4 (Dense)              (None, 84)                10164     </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense_5 (Dense)              (None, 43)                3655      </span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Total params: 64,511</span><br><span class="line">Trainable params: 64,511</span><br><span class="line">Non-trainable params: 0</span><br><span class="line">_________________________________________________________________</span><br></pre></td></tr></table></figure>

<h2 id="编译和训练"><a href="#编译和训练" class="headerlink" title="编译和训练"></a>编译和训练</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CNN.<span class="built_in">compile</span>(optimizer = <span class="string">&#x27;Adam&#x27;</span>, loss = <span class="string">&#x27;sparse_categorical_crossentropy&#x27;</span>, metrics = [<span class="string">&#x27;accuracy&#x27;</span>])</span><br><span class="line">history = CNN.fit(X_train_gray_norm,</span><br><span class="line">                  y_train,</span><br><span class="line">                  batch_size = <span class="number">500</span>,</span><br><span class="line">                  epochs = <span class="number">50</span>,</span><br><span class="line">                  verbose = <span class="number">1</span>,</span><br><span class="line">                  validation_data = (X_validation_gray_norm, y_validation))</span><br></pre></td></tr></table></figure>

<p>进行50个Epoch的训练，训练集Accuracy达到98.64%，验证集的Accuracy达到91.61%。</p>
<p>训练过程如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Epoch 1&#x2F;5</span><br><span class="line">70&#x2F;70 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 9s 136ms&#x2F;step - loss: 3.1861 - accuracy: 0.1649 - val_loss: 2.5817 - val_accuracy: 0.3082</span><br><span class="line">Epoch 2&#x2F;5</span><br><span class="line">70&#x2F;70 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 9s 135ms&#x2F;step - loss: 1.6409 - accuracy: 0.5335 - val_loss: 1.2052 - val_accuracy: 0.6458</span><br><span class="line">Epoch 3&#x2F;5</span><br><span class="line">70&#x2F;70 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 10s 145ms&#x2F;step - loss: 0.9414 - accuracy: 0.7220 - val_loss: 0.8685 - val_accuracy: 0.7417</span><br><span class="line">Epoch 4&#x2F;5</span><br><span class="line">70&#x2F;70 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 10s 147ms&#x2F;step - loss: 0.7074 - accuracy: 0.7915 - val_loss: 0.7434 - val_accuracy: 0.7834</span><br><span class="line">Epoch 5&#x2F;5</span><br><span class="line">70&#x2F;70 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 10s 145ms&#x2F;step - loss: 0.5825 - accuracy: 0.8317 - val_loss: 0.6605 - val_accuracy: 0.7955</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Epoch 45&#x2F;50</span><br><span class="line">70&#x2F;70 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 8s 115ms&#x2F;step - loss: 0.0509 - accuracy: 0.9844 - val_loss: 0.3022 - val_accuracy: 0.9220</span><br><span class="line">Epoch 46&#x2F;50</span><br><span class="line">70&#x2F;70 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 8s 114ms&#x2F;step - loss: 0.0480 - accuracy: 0.9861 - val_loss: 0.2822 - val_accuracy: 0.9254</span><br><span class="line">Epoch 47&#x2F;50</span><br><span class="line">70&#x2F;70 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 8s 110ms&#x2F;step - loss: 0.0462 - accuracy: 0.9864 - val_loss: 0.2971 - val_accuracy: 0.9259</span><br><span class="line">Epoch 48&#x2F;50</span><br><span class="line">70&#x2F;70 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 8s 111ms&#x2F;step - loss: 0.0460 - accuracy: 0.9860 - val_loss: 0.2665 - val_accuracy: 0.9268</span><br><span class="line">Epoch 49&#x2F;50</span><br><span class="line">70&#x2F;70 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 8s 118ms&#x2F;step - loss: 0.0442 - accuracy: 0.9863 - val_loss: 0.3237 - val_accuracy: 0.9218</span><br><span class="line">Epoch 50&#x2F;50</span><br><span class="line">70&#x2F;70 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 8s 112ms&#x2F;step - loss: 0.0452 - accuracy: 0.9864 - val_loss: 0.3150 - val_accuracy: 0.9161</span><br></pre></td></tr></table></figure>

<h2 id="模型保存"><a href="#模型保存" class="headerlink" title="模型保存"></a>模型保存</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CNN.save(<span class="string">&#x27;traffic_sign_weights.h5&#x27;</span>)</span><br></pre></td></tr></table></figure>


<h2 id="模型效果评估"><a href="#模型效果评估" class="headerlink" title="模型效果评估"></a>模型效果评估</h2><p><img src="/2021/03/15/cnn-sign-detection/confusion_mask.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">score = CNN.evaluate(X_test_gray_norm, y_test)</span><br><span class="line">print(<span class="string">&#x27;Test Accuracy: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(score[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure>

<p>395/395 [==============================] - 1s 3ms/step - loss: 0.5980 - accuracy: 0.9123<br>Test Accuracy: 0.9122723937034607</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">history.history.keys()</span><br></pre></td></tr></table></figure>

<p>dict_keys([‘loss’, ‘accuracy’, ‘val_loss’, ‘val_accuracy’])</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">accuracy = history.history[<span class="string">&#x27;accuracy&#x27;</span>]</span><br><span class="line">val_accuracy = history.history[<span class="string">&#x27;val_accuracy&#x27;</span>]</span><br><span class="line">loss = history.history[<span class="string">&#x27;loss&#x27;</span>]</span><br><span class="line">val_loss = history.history[<span class="string">&#x27;val_loss&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>对训练过程中的Loss进行可视化。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">epochs = <span class="built_in">range</span>(<span class="built_in">len</span>(accuracy))</span><br><span class="line">plt.plot(epochs, loss, <span class="string">&#x27;ro&#x27;</span>, label = <span class="string">&#x27;Training Loss&#x27;</span>)</span><br><span class="line">plt.plot(epochs, val_loss, <span class="string">&#x27;r&#x27;</span>, label = <span class="string">&#x27;Validation Loss&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&quot;Training, And Validation Loss&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/2021/03/15/cnn-sign-detection/loss.png"></p>
<p>对训练过程中的Accuracy进行可视化。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">epochs = <span class="built_in">range</span>(<span class="built_in">len</span>(accuracy))</span><br><span class="line">plt.plot(epochs, accuracy, <span class="string">&#x27;ro&#x27;</span>, label = <span class="string">&#x27;Training Accuracy&#x27;</span>)</span><br><span class="line">plt.plot(epochs, val_accuracy, <span class="string">&#x27;r&#x27;</span>, label = <span class="string">&#x27;Validation Accuracy&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&quot;Training, And Validation Accuracy&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/2021/03/15/cnn-sign-detection/accuracy.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">predicted_classes = CNN.predict_classes(X_test_gray_norm)</span><br><span class="line">y_true = y_test</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> confusion_matrix</span><br><span class="line">cm = confusion_matrix(y_true, predicted_classes)</span><br><span class="line">plt.figure(figsize = (<span class="number">25</span>, <span class="number">25</span>))</span><br><span class="line">sns.heatmap(cm, annot = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/2021/03/15/cnn-sign-detection/matrix.png"></p>
<p>在测试集上验证网络效果。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">L = <span class="number">5</span></span><br><span class="line">W = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">fig, axes = plt.subplots(L, W, figsize = (<span class="number">12</span>, <span class="number">12</span>))</span><br><span class="line">axes = axes.ravel()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> np.arange(<span class="number">0</span>, L*W):</span><br><span class="line">    axes[i].imshow(X_test[i])</span><br><span class="line">    axes[i].set_title(<span class="string">&#x27;Prediction = &#123;&#125;\n True = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(predicted_classes[i], y_true[i]))</span><br><span class="line">    axes[i].axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.subplots_adjust(wspace = <span class="number">1</span>) </span><br></pre></td></tr></table></figure>

<p><img src="/2021/03/15/cnn-sign-detection/test_result.png"></p>
<h1 id="实际检测效果验证"><a href="#实际检测效果验证" class="headerlink" title="实际检测效果验证"></a>实际检测效果验证</h1><p>在网上找了两张图片(限速标牌和Stop标牌)试验， 图像中冗余内容越多，检测效果越差。当标牌充满图像时，检测效果还是不错的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.preprocessing.image <span class="keyword">import</span> img_to_array</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> load_model</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">image_to_array</span>(<span class="params">path</span>):</span></span><br><span class="line">    image = Image.<span class="built_in">open</span>(path)</span><br><span class="line">    image = image.resize((<span class="number">32</span>, <span class="number">32</span>))</span><br><span class="line">    image = img_to_array(image)</span><br><span class="line"></span><br><span class="line">    image = image.reshape([<span class="number">1</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> image</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prediction</span>(<span class="params">path</span>):</span></span><br><span class="line"></span><br><span class="line">    img = image_to_array(path)</span><br><span class="line"></span><br><span class="line">    plt.imshow(img.squeeze(), cmap = <span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    img_gray = np.<span class="built_in">sum</span>(img / <span class="number">3</span>, axis = <span class="number">3</span>, keepdims = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    img_norm = (img_gray - <span class="number">128</span>) / <span class="number">128</span></span><br><span class="line"></span><br><span class="line">    print(img_norm.shape)</span><br><span class="line"></span><br><span class="line">    plt.imshow(img_norm.squeeze(), cmap = <span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">    detection_model = load_model(<span class="string">&#x27;traffic_sign_weights.h5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    predicted_classes = detection_model.predict_classes(img_norm)</span><br><span class="line"></span><br><span class="line">    print(predicted_classes)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">prediction(<span class="string">&quot;./stop.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line">prediction(<span class="string">&quot;./speed_limit_60.jpg&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>输入图像如下：</p>
<p><img src="/2021/03/15/cnn-sign-detection/stop.jpg"></p>
<p>检测输出内容如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">14</span>]</span><br></pre></td></tr></table></figure>
<p>14对应Stop Sign的类型。</p>
<p><img src="/2021/03/15/cnn-sign-detection/speed_limit_60.jpg"></p>
<p>检测输出内容如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<p>3对应60KM/h的限速。</p>
<h1 id="参考材料"><a href="#参考材料" class="headerlink" title="参考材料"></a>参考材料</h1><p>Coursera - Traffic Sign Classification Using Deep Learning in Python/Keras</p>
]]></content>
      <categories>
        <category>自动驾驶</category>
      </categories>
      <tags>
        <tag>环境感知</tag>
        <tag>自动驾驶</tag>
      </tags>
  </entry>
  <entry>
    <title>Lanelets: 高效的自动驾驶地图表达方式</title>
    <url>/2020/02/07/lanelets-%E9%AB%98%E6%95%88%E7%9A%84%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%9C%B0%E5%9B%BE%E8%A1%A8%E8%BE%BE%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>LaneLets是自动驾驶领域高精度地图的一种高效表达方式，它以彼此相互连接的LaneLets来描述自动驾驶可行驶区域，不仅可以表达车道几何，也可以完整表述车道拓扑，同时可以集成交通规则和人的驾驶习惯。</p>
<p><img src="/2020/02/07/lanelets-%E9%AB%98%E6%95%88%E7%9A%84%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%9C%B0%E5%9B%BE%E8%A1%A8%E8%BE%BE%E6%96%B9%E5%BC%8F/Screenshot-from-2020-02-06-19-52-41.png" alt="LaneLets Map"></p>
<p>如上图所示，每个Lanelet由left bound和right bound组成，left/right bound有一系列点序列组成，因此可以以任意精度逼近任意车道形状。</p>
<span id="more"></span>

<h1 id="用于Routing的Lanelets-Graph"><a href="#用于Routing的Lanelets-Graph" class="headerlink" title="用于Routing的Lanelets Graph"></a>用于Routing的Lanelets Graph</h1><p>为了能够基于Lanelets进行路径规划，我们可以构建Lanelets邻接图结构。当Lanelets A的左右边界的终点与Lanelets B的左右边界的起点相同时，我们就称Lanelets A和Lanelets B是相邻接的。</p>
<p>如下图所示，图(右)是对图(左)构建的Graph，同时将每个Lanelets的长度作为Graph Edge的权重。基于该Graph，我们就可以采用Dijkstra算法，实现从任意起点到终点的路径规划。当然读者也可以给Graph Edge赋予道路边界类型、权重因子等属性，从而实现其它类型的Routing规划算法。</p>
<p><img src="/2020/02/07/lanelets-%E9%AB%98%E6%95%88%E7%9A%84%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%9C%B0%E5%9B%BE%E8%A1%A8%E8%BE%BE%E6%96%B9%E5%BC%8F/Screenshot-from-2020-02-06-20-05-59.png"></p>
<h1 id="Lanelets中的交通规则"><a href="#Lanelets中的交通规则" class="headerlink" title="Lanelets中的交通规则"></a>Lanelets中的交通规则</h1><p>开放的公共道路上存在各种各样的交通控制要素，比如红绿灯、交通标牌等。我们将这些交通规则按照一定的方式组织起来，并关联到对应的Lanelets上。行驶在Lanelets上的车辆必须遵守该Lanelets关联的交通规则。</p>
<p>交通规则通常由两部分内容组成：1、规则的名称和内容；2、遵守这一规则的静态信息或者参数。举个路口红绿灯的例子，它的规则为车辆必须在交通灯为红色的时候，必须停止在路口停止线前等待；它的参数为停止线和关联交通灯的位置。</p>
<p>这里要特别提到是没有红绿灯的十字路口，它的通行规则必须以尽可能少的阻碍其它拥有通行权的交通参与者为准则。</p>
<p><img src="/2020/02/07/lanelets-%E9%AB%98%E6%95%88%E7%9A%84%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%9C%B0%E5%9B%BE%E8%A1%A8%E8%BE%BE%E6%96%B9%E5%BC%8F/Screenshot-from-2020-02-06-20-36-38.png"></p>
<h2 id="交通规则表达"><a href="#交通规则表达" class="headerlink" title="交通规则表达"></a>交通规则表达</h2><p>在实际数据中，交通规则通过”<strong>type=regulatory element</strong>“标识，再通过名称为maneuver的tag区分不同的交通规则。</p>
<p><strong>merge and cross</strong></p>
<p>当maneuver=merge时，该规则的参数是：merge发生的第一个Lanelets。该规则期望车辆在进入merge的第一个Lanelets时，尽可能的与同向车道的车辆的运动速度趋同，并且保持安全距离。</p>
<p>当maneuver=cross时，该规则的参数是：与当前Lanelets发生cross的Lanelets，以及为了避免碰撞发生主车的停止位置。</p>
<p><strong>traffic light</strong></p>
<p>当maneuver=traffic light，该规则的参数是：路口的停止线和关联红绿灯的位置。该规则期望当红绿灯为红色时，车辆停止在停止线之前。</p>
<p><img src="/2020/02/07/lanelets-%E9%AB%98%E6%95%88%E7%9A%84%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%9C%B0%E5%9B%BE%E8%A1%A8%E8%BE%BE%E6%96%B9%E5%BC%8F/Screenshot-from-2020-02-06-22-48-26.png"></p>
<h1 id="Lanelets中高效的距离计算和测量"><a href="#Lanelets中高效的距离计算和测量" class="headerlink" title="Lanelets中高效的距离计算和测量"></a>Lanelets中高效的距离计算和测量</h1><p>在使用Lanelets的过程中，计算车辆Pose到Lanelets边界的距离非常重要。由于LaneLets的左右边界是由折线组成的，因此我们可以先看看单个Segment的距离如何计算。</p>
<p>假设单个Segment的定义如下:</p>
<p>$G = (p_b, p_t, t_b, t_t)$</p>
<p>其中，$p_b$是Segment的起点，$p_t$是Segment的终点，$t_b$是起点的切向量，$t_t$是终点的切向量。我们可以通过$lambda$对Segment进行插值。</p>
<p>$<br>\begin{aligned}<br>&amp;\mathbf{t}{\lambda}=\lambda \mathbf{t}{t}+(1-\lambda) \mathbf{t}{b}\\ &amp; \mathbf{p}{\lambda}=\lambda \mathbf{p}{t}+(1-\lambda) \mathbf{p}{b}<br>\end{aligned}<br>$</p>
<p>点X = $(x, y)^T$到Segment G的距离定义如下：</p>
<p>$d = n_{\lambda} = x - p_{\lambda}$</p>
<p>并且$n_{\lambda}$满足如下约束：</p>
<p>$n_{\lambda}^T t_{\lambda} = 0 \tag{1}$</p>
<p><img src="/2020/02/07/lanelets-%E9%AB%98%E6%95%88%E7%9A%84%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%9C%B0%E5%9B%BE%E8%A1%A8%E8%BE%BE%E6%96%B9%E5%BC%8F/Screenshot-from-2020-02-06-22-06-18.png"></p>
<p>不失一般性，我们假设$p_b = (0, 0)^T, p_t = (l, 0)^T, t_b = (1, m_b)^T, t_t = (1, m_t)^T$，将这些信息代入公式(1)，可以得到:</p>
<p>$<br>\lambda=\frac{x+y m_{b}}{l-y\left(m_{t}-m_{b}\right)}<br>$</p>
<p>也就是说，只要知道了车辆的Pose(位置和朝向)，我们就能迅速计算出车辆到边界的距离。</p>
<p>除此之外，通过计算$n_{\lambda}/n_{\lambda}$就可以得到任意一点的梯度信息。</p>
<p><img src="/2020/02/07/lanelets-%E9%AB%98%E6%95%88%E7%9A%84%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%9C%B0%E5%9B%BE%E8%A1%A8%E8%BE%BE%E6%96%B9%E5%BC%8F/Screenshot-from-2020-02-06-22-24-11.png"></p>
<h1 id="开源的Lanelets地图加载库-libLanelet"><a href="#开源的Lanelets地图加载库-libLanelet" class="headerlink" title="开源的Lanelets地图加载库-libLanelet"></a>开源的Lanelets地图加载库-libLanelet</h1><p>libLanelet使用Boost C++代码库实现，它提供了读取、加载和查询XML文件的功能；使用RTree检索查询空间要素的功能；使用诸如Dijkstra进行Routing路线规划的功能；</p>
<p>随着地图范围的不断扩张，Lanelets的数量会快速膨胀，为了提升数据检索的速度，libLanelets使用RTree对Lanelets进行检索，可以做到在O(logn)时间内实现对任意Object的查询。</p>
<p>Github代码路径：<a href="https://github.com/phbender/liblanelet">https://github.com/phbender/liblanelet</a></p>
<h1 id="Lanelets高精度地图生成"><a href="#Lanelets高精度地图生成" class="headerlink" title="Lanelets高精度地图生成"></a>Lanelets高精度地图生成</h1><h2 id="Top-View-Map生成"><a href="#Top-View-Map生成" class="headerlink" title="Top-View Map生成"></a>Top-View Map生成</h2><p>我们利用立体图像技术，将车辆周围的3D点投影到地面上，再利用轨迹将这些3D投影点聚合起来，形成全局的鸟瞰图。然后利用这些鸟瞰图，使用OSM Editor人工标注高精度地图。</p>
<p><img src="/2020/02/07/lanelets-%E9%AB%98%E6%95%88%E7%9A%84%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%9C%B0%E5%9B%BE%E8%A1%A8%E8%BE%BE%E6%96%B9%E5%BC%8F/Screenshot-from-2020-02-06-23-25-52-1024x147.png"></p>
<p>Virtual topview: Single image, reconstructed top view, superposed top view with annotated lanelets</p>
<h2 id="Lanelets存储格式及编辑工具"><a href="#Lanelets存储格式及编辑工具" class="headerlink" title="Lanelets存储格式及编辑工具"></a>Lanelets存储格式及编辑工具</h2><p>Lanelets Map采用OSM格式存储：即文件格式采用XML格式；包含三个基础结构，nodes、ways和relations；坐标系采用WGS-84坐标系。</p>
<p><img src="/2020/02/07/lanelets-%E9%AB%98%E6%95%88%E7%9A%84%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%9C%B0%E5%9B%BE%E8%A1%A8%E8%BE%BE%E6%96%B9%E5%BC%8F/Screenshot-from-2020-02-06-22-49-26-954x1024.png" alt="Java OSM editor"></p>
<h1 id="Lanelets在实际驾驶中的应用"><a href="#Lanelets在实际驾驶中的应用" class="headerlink" title="Lanelets在实际驾驶中的应用"></a>Lanelets在实际驾驶中的应用</h1><p>自动车辆利用Lanelets地图实现状态转换状态机(State Machine)不同状态之间的转换。如下图所示，当自动驾驶车辆行驶到绑定了交通规则的Lanelets时，并且距离交通规则参数的距离小于一定阈值时，事件S被触发，提醒车辆在停止线前停下来。当自动驾驶车辆距离交通规则参数的距离大于一定距离时，事件A被触发，车辆进入路口驾驶模式。当离开路口时，事件F被触发，整个系统被重置到空闲状态。</p>
<p><img src="/2020/02/07/lanelets-%E9%AB%98%E6%95%88%E7%9A%84%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%9C%B0%E5%9B%BE%E8%A1%A8%E8%BE%BE%E6%96%B9%E5%BC%8F/Screenshot-from-2020-02-07-15-07-48.png"></p>
<p>为了完成周围其它车辆的驾驶行为预测，我们首先获取社会车辆周围一定范围内的所有Lanelets，然后通过社会车辆的Pose与Lanelets中心线的距离和角度阈值过滤掉主车无法到达的Lanelets，最后在自动驾驶车辆的预测范围(比如可以预测社会车辆10s的运动范围)内，以社会车辆的运动朝向和运动速度计算所有的可能运动路径，从而调整自动驾驶汽车的运动规划，以避免可能存在的碰撞行为。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>Lanelets: Efficient Map Representation for Autonomous Driving</p>
]]></content>
      <categories>
        <category>自动驾驶</category>
      </categories>
      <tags>
        <tag>自动驾驶</tag>
      </tags>
  </entry>
  <entry>
    <title>低速自动驾驶车辆的定位与建图</title>
    <url>/2021/03/25/localization-mapping-zhixingzhe/</url>
    <content><![CDATA[<p><img src="/2021/03/25/localization-mapping-zhixingzhe/1.png"></p>
<p>本文是高翔博士关于低速自动驾驶定位建图的相关介绍。</p>
<span id="more"></span>

<p><img src="/2021/03/25/localization-mapping-zhixingzhe/2.png"><br><img src="/2021/03/25/localization-mapping-zhixingzhe/3.png"><br><img src="/2021/03/25/localization-mapping-zhixingzhe/4.png"><br><img src="/2021/03/25/localization-mapping-zhixingzhe/5.png"><br><img src="/2021/03/25/localization-mapping-zhixingzhe/6.png"><br><img src="/2021/03/25/localization-mapping-zhixingzhe/7.png"><br><img src="/2021/03/25/localization-mapping-zhixingzhe/8.png"><br><img src="/2021/03/25/localization-mapping-zhixingzhe/9.png"><br><img src="/2021/03/25/localization-mapping-zhixingzhe/10.png"><br><img src="/2021/03/25/localization-mapping-zhixingzhe/11.png"><br><img src="/2021/03/25/localization-mapping-zhixingzhe/12.png"><br><img src="/2021/03/25/localization-mapping-zhixingzhe/13.png"><br><img src="/2021/03/25/localization-mapping-zhixingzhe/14.png"><br><img src="/2021/03/25/localization-mapping-zhixingzhe/15.png"><br><img src="/2021/03/25/localization-mapping-zhixingzhe/16.png"><br><img src="/2021/03/25/localization-mapping-zhixingzhe/17.png"><br><img src="/2021/03/25/localization-mapping-zhixingzhe/18.png"><br><img src="/2021/03/25/localization-mapping-zhixingzhe/19.png"><br><img src="/2021/03/25/localization-mapping-zhixingzhe/20.png"><br><img src="/2021/03/25/localization-mapping-zhixingzhe/21.png"><br><img src="/2021/03/25/localization-mapping-zhixingzhe/22.png"><br><img src="/2021/03/25/localization-mapping-zhixingzhe/23.png"><br><img src="/2021/03/25/localization-mapping-zhixingzhe/24.png"><br><img src="/2021/03/25/localization-mapping-zhixingzhe/25.png"><br><img src="/2021/03/25/localization-mapping-zhixingzhe/26.png"><br><img src="/2021/03/25/localization-mapping-zhixingzhe/27.png"><br><img src="/2021/03/25/localization-mapping-zhixingzhe/28.png"><br><img src="/2021/03/25/localization-mapping-zhixingzhe/29.png"><br><img src="/2021/03/25/localization-mapping-zhixingzhe/30.png"><br><img src="/2021/03/25/localization-mapping-zhixingzhe/31.png"><br><img src="/2021/03/25/localization-mapping-zhixingzhe/32.png"><br><img src="/2021/03/25/localization-mapping-zhixingzhe/33.png"><br><img src="/2021/03/25/localization-mapping-zhixingzhe/34.png"><br><img src="/2021/03/25/localization-mapping-zhixingzhe/35.png"><br><img src="/2021/03/25/localization-mapping-zhixingzhe/36.png"><br><img src="/2021/03/25/localization-mapping-zhixingzhe/37.png"><br><img src="/2021/03/25/localization-mapping-zhixingzhe/38.png"><br><img src="/2021/03/25/localization-mapping-zhixingzhe/39.png"><br><img src="/2021/03/25/localization-mapping-zhixingzhe/40.png"><br><img src="/2021/03/25/localization-mapping-zhixingzhe/41.png"><br><img src="/2021/03/25/localization-mapping-zhixingzhe/42.png"></p>
]]></content>
      <categories>
        <category>自动驾驶</category>
      </categories>
      <tags>
        <tag>自动驾驶</tag>
        <tag>高精地图</tag>
        <tag>Mobileye</tag>
      </tags>
  </entry>
  <entry>
    <title>Mobileye REM地图</title>
    <url>/2021/03/14/mobileye-rem-map-md/</url>
    <content><![CDATA[<h1 id="为什么需要高精地图"><a href="#为什么需要高精地图" class="headerlink" title="为什么需要高精地图"></a>为什么需要高精地图</h1><p><img src="/2021/03/14/mobileye-rem-map-md/rem_map.png" alt="Mobileye Rem Map"></p>
<p>理论上来讲，可以在车载系统检测和获取所有道路信息(可行驶路径、车道优先级、红绿灯与车道的关联关系、车道与人行横道与红绿灯的关系等)，但是目前的AI能力无法保证实现很高的MTBF(Mean Time Between Failures, 平均无故障时间)，所以需要提前把这些信息都准备好。</p>
<span id="more"></span>

<p><img src="/2021/03/14/mobileye-rem-map-md/hdmap_motivation.png" alt="Motivation Behind HDMap"></p>
<h1 id="高精地图的挑战"><a href="#高精地图的挑战" class="headerlink" title="高精地图的挑战"></a>高精地图的挑战</h1><h2 id="规模化-Scale"><a href="#规模化-Scale" class="headerlink" title="规模化-Scale"></a>规模化-Scale</h2><p>如果自动驾驶车辆只在一个区域、一个城市、或者几个城市运营，那就不存在规模化的问题。但是2025年之后，自动驾驶会在消费者层面全面落地，用户需要驾车到任意想去的地方，在这种场景下，Scale是一个无法规避的问题。</p>
<h2 id="鲜度-Fresh"><a href="#鲜度-Fresh" class="headerlink" title="鲜度-Fresh"></a>鲜度-Fresh</h2><p>理想情况下，地图是在实时更新的。当物理环境发生变化时，需要实时反映到地图上。月级更新、甚至天级更新都是不够的，我们需要做到分钟级，甚至更短。</p>
<h2 id="精度-Accuracy"><a href="#精度-Accuracy" class="headerlink" title="精度-Accuracy"></a>精度-Accuracy</h2><p>车载系统(OnBoard System)检测的车辆和行人需要与高精地图(High Definiation Map)实现厘米级精度的匹配，因此地图的精度至关重要。</p>
<p><img src="/2021/03/14/mobileye-rem-map-md/map_challange.png" alt="高精地图挑战"></p>
<h1 id="通用高精地图制作方法的缺陷"><a href="#通用高精地图制作方法的缺陷" class="headerlink" title="通用高精地图制作方法的缺陷"></a>通用高精地图制作方法的缺陷</h1><p><img src="/2021/03/14/mobileye-rem-map-md/common_approach_map.png" alt="高精地图通用制作方法"></p>
<h2 id="全局坐标系下厘米级精度不是必需的"><a href="#全局坐标系下厘米级精度不是必需的" class="headerlink" title="全局坐标系下厘米级精度不是必需的"></a>全局坐标系下厘米级精度不是必需的</h2><p>AV车辆行驶过程中只关注周围几百米范围即可，所以只要这个范围内的足够准确即可。至于几公里之外的全局精度，Who Care…</p>
<p><img src="/2021/03/14/mobileye-rem-map-md/map_geometric.png"></p>
<h2 id="语义层数据生产难以自动化"><a href="#语义层数据生产难以自动化" class="headerlink" title="语义层数据生产难以自动化"></a>语义层数据生产难以自动化</h2><p><img src="/2021/03/14/mobileye-rem-map-md/semantic_map.png"></p>
<p>如下图所示，没有车道线的双向车道，单从图像观察，难以识别它的Drive Path。</p>
<p><img src="/2021/03/14/mobileye-rem-map-md/drivable_path.png"></p>
<p>如下图所示，转向规则千奇百怪：禁止红灯右转，完全停车后允许红灯右转，绿灯禁止左转，绿灯Yield后允许左转…</p>
<p><img src="/2021/03/14/mobileye-rem-map-md/priority_map.png"></p>
<p>如下图所示，红绿灯异常复杂，识别车道、人行横道与红绿灯的关联关系难度很大…</p>
<p><img src="/2021/03/14/mobileye-rem-map-md/map_association.png"></p>
<p>如下图所示，除非地图可以表达所有的3D要素，否则很难自动化的计算出车道的最优Stop/Yield Point。但是表达所有的3D信息对于地图来说又是不现实的…</p>
<p><img src="/2021/03/14/mobileye-rem-map-md/stop_point.png"></p>
<p>影响车辆行驶速度的因素有很多，道路几何、限速、文化等，难以量化，但它对Smooth Driving体验至关重要…</p>
<p><img src="/2021/03/14/mobileye-rem-map-md/smooth_driving.png"></p>
<h1 id="Mobileye如何解决这些问题"><a href="#Mobileye如何解决这些问题" class="headerlink" title="Mobileye如何解决这些问题"></a>Mobileye如何解决这些问题</h1><p>scalability依赖众包数据生成Millions Map Agents；Accuracy不是全局的Accuracy，而是局部的Accuracy，相对于道路上的静态元素位置。</p>
<p><img src="/2021/03/14/mobileye-rem-map-md/av_map.png"></p>
<p>REM的处理流程如下，首先从成百上千辆车获取检测信息(没有使用差分GPS，而是使用了普通的GPS)，这些数据传送到云端；每辆车Detection的角度不同，由于遮挡等原因，每辆车检测的landmark也有差异，将这些数据进行Alignment处理，生成高精度的地图数据；最后，Modeling And Semantics负责生成地图的语义数据。</p>
<p><img src="/2021/03/14/mobileye-rem-map-md/rem_process.png"></p>
<h2 id="Harvesting"><a href="#Harvesting" class="headerlink" title="Harvesting"></a>Harvesting</h2><p>下图中黄色的框是车辆检测的landmarks和lane marks，同时车辆会尝试检测driving path等语义信息，一辆车可能检测不准确，但是成百上千的过路车辆会让检测结果越来越好。</p>
<p>Mobileye Harvesting的数据量为10K/公里，这些检测的数据会被发送到云端。</p>
<p><img src="/2021/03/14/mobileye-rem-map-md/harvesting.png"></p>
<h2 id="Aligning-Drives"><a href="#Aligning-Drives" class="headerlink" title="Aligning Drives"></a>Aligning Drives</h2><p>检测每个RSD中每个元素的6D Pose，然后对齐相同位置的元素，得到厘米度精度的driving path等信息。</p>
<p><img src="/2021/03/14/mobileye-rem-map-md/map_align_drive.png"></p>
<p>由于GPS存在误差，每个车辆检测的道路元素位置都存在噪声，所以只依靠简单的位置求均值是不可行的。</p>
<p><img src="/2021/03/14/mobileye-rem-map-md/align_noise.png"></p>
<p>Align之后可以明显的看到两条Driving Path(蓝色)和两侧的道路边界(红色)。对齐的过程是靠几何运算进行。</p>
<p><img src="/2021/03/14/mobileye-rem-map-md/path_align.png"></p>
<p>仅仅靠聚类(Clustering)和Spline Fiting得到下图右上角的结果，这个结果不是特别理想。后来通过神经网络生成高精度地图，效果好了很多。</p>
<p><img src="/2021/03/14/mobileye-rem-map-md/model_process.png"></p>
<h1 id="为什么语义理解离不开众包"><a href="#为什么语义理解离不开众包" class="headerlink" title="为什么语义理解离不开众包"></a>为什么语义理解离不开众包</h1><p>如下左图所示，通过众包数据可以在没有Lane Marking的道路上获取Driving Path。</p>
<p>如下右图所示，众包数据提供了复杂场景下的所有可通行路径。</p>
<p><img src="/2021/03/14/mobileye-rem-map-md/crowd_driving_path.png"></p>
<p>如下图所示，通过众包数据可以获得红绿灯与车道的关联关系、Yield Sign的Stop Point、Crosswalk与红绿灯的关联关系等。</p>
<p><img src="/2021/03/14/mobileye-rem-map-md/crowd_assocation.png"></p>
<p>如下左图所示，通过检测哪个Drive Path的Stop Point比较多，我们可以从众包数据中获取到没有Traffic Sign情况下各个道路的路权优先级。</p>
<p>如下中图所示，我们可以从众包数据学习到在路口其它司机的停车位置。</p>
<p>如下右图所示，从众包数据可以学习到，在无保护左转的场景下车辆的Stop Point。</p>
<p><img src="/2021/03/14/mobileye-rem-map-md/crowd_more_info.png"></p>
<p>众包数据是获得各个道路Common Speed的唯一高效的方法，Common Speed提供了当道路没有车辆时候AV车的目标行驶速度。采用这种方法可以使得无论在哪个国家、地区，或者不同的道路类型，AV车都可以自然的融入车流。</p>
<p><img src="/2021/03/14/mobileye-rem-map-md/crowd_speed.png"></p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>到目前为止，Mobileye与超过6家汽车制造厂商合作，每天可以覆盖800万公里的路网更新。预计到2024年，每天覆盖的路网会达到10亿公里。</p>
<p><img src="/2021/03/14/mobileye-rem-map-md/mobileye_situation.png"></p>
<p><strong>说明</strong>： 本文所有内容都来源于Mobileye CEO Amnon Shashua教授在2021 CES的分享。</p>
<p>YouTube链接：<br><a href="https://www.youtube.com/watch?v=B7YNj66GxRA&amp;t=301s">https://www.youtube.com/watch?v=B7YNj66GxRA&amp;t=301s</a></p>
]]></content>
      <categories>
        <category>自动驾驶</category>
      </categories>
      <tags>
        <tag>自动驾驶</tag>
        <tag>高精地图</tag>
        <tag>Mobileye</tag>
      </tags>
  </entry>
  <entry>
    <title>RNN预测行人运动轨迹</title>
    <url>/2020/07/11/rnn%E9%A2%84%E6%B5%8B%E8%A1%8C%E4%BA%BA%E8%BF%90%E5%8A%A8%E8%BD%A8%E8%BF%B9/</url>
    <content><![CDATA[<blockquote>
<p>最近在研究论文-Social LSTM: Human Trajectory Prediction in Crowded Spaces, 先从最基本的RNN模型入手看看效果。</p>
<p>本文代码已经上传到Github:<br><a href="https://github.com/YoungTimes/GNN/blob/master/Social-LSTM/train.py">https://github.com/YoungTimes/GNN/blob/master/Social-LSTM/train.py</a></p>
</blockquote>
<p><img src="/2020/07/11/rnn%E9%A2%84%E6%B5%8B%E8%A1%8C%E4%BA%BA%E8%BF%90%E5%8A%A8%E8%BD%A8%E8%BF%B9/Screenshot_from_2021-03-28_22-40-11.png"></p>
<span id="more"></span>

<h1 id="行人轨迹数据集"><a href="#行人轨迹数据集" class="headerlink" title="行人轨迹数据集"></a>行人轨迹数据集</h1><p>数据集来源自[1]，每个数据目录包含一个pixel_pos.csv文件，它的文件格式如下:</p>
<p>pixel_pose.csv包含4行，它的列数是所有行人轨迹点的数量。</p>
<p>第一行是所有的Frame Number；</p>
<p>第二行是所有行人的ID；</p>
<p>第三行是所有的y坐标；</p>
<p>第四行是所有的x坐标。</p>
<p>先看下数据集的内容：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">directory = <span class="string">&quot;./data/eth/univ&quot;</span></span><br><span class="line"></span><br><span class="line">file_path = os.path.join(directory, <span class="string">&#x27;pixel_pos.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line">data = np.genfromtxt(file_path, delimiter=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get the number of pedestrians in the current dataset</span></span><br><span class="line">pedIDs = np.unique(data[<span class="number">1</span>, :])</span><br><span class="line">numPeds = np.size(pedIDs)</span><br><span class="line"></span><br><span class="line">pedIndexLookup = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ped_index, ped_id <span class="keyword">in</span> <span class="built_in">enumerate</span>(pedIDs):</span><br><span class="line">    pedIndexLookup[ped_id] = ped_index</span><br><span class="line"></span><br><span class="line">frameIDs = np.unique(data[<span class="number">0</span>, :])</span><br><span class="line">numFrames = np.size(frameIDs)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;number of pedestrians is: &#123;&#125;, number of frames is &#123;&#125;&quot;</span>.<span class="built_in">format</span>(numPeds, numFrames))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>将data/eth/univ数据场景的数据可视化如下图所示，每个不同颜色的圆点都是一个运动的行人。</p>
<p><img src="/2020/07/11/rnn%E9%A2%84%E6%B5%8B%E8%A1%8C%E4%BA%BA%E8%BF%90%E5%8A%A8%E8%BD%A8%E8%BF%B9/315ft-jpfdw.gif"></p>
<h1 id="RNN模型"><a href="#RNN模型" class="headerlink" title="RNN模型"></a>RNN模型</h1><p>RNN模型参考了[1][2][3]，大概分为三层: 输入层(Embedding)、RNN层(LSTM/GRU)、输出层。</p>
<p>Embedding层将坐标(x,y)嵌入到64维的向量空间；输出层输出每个预测点的二维高斯分布参数(包含5个参数:mux, muy, sx, sy, corr), 时刻t的预测坐标点最后通过$({x}^{t}, {y}^{t}) \sim \mathcal{N}(\mu_i^t, \sigma_i^t, \rho_i^t)$获取。</p>
<p><img src="/2020/07/11/rnn%E9%A2%84%E6%B5%8B%E8%A1%8C%E4%BA%BA%E8%BF%90%E5%8A%A8%E8%BD%A8%E8%BF%B9/v2-8f7cdefd76e7c3a3bc9260eee986f828_720w.jpg" alt="TensorFlow Tutorial-RNN文本生成"></p>
<p>模型代码如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_model</span>(<span class="params">args</span>):</span></span><br><span class="line">    output_size = <span class="number">5</span></span><br><span class="line">    model = tf.keras.Sequential([</span><br><span class="line">        tf.keras.layers.Dense(args.embedding_size, activation = tf.keras.activations.relu,</span><br><span class="line">            batch_input_shape = [args.batch_size, <span class="literal">None</span>, <span class="number">2</span>]),</span><br><span class="line">        tf.keras.layers.GRU(args.rnn_size,</span><br><span class="line">                            return_sequences=<span class="literal">True</span>,</span><br><span class="line">                            stateful=<span class="literal">True</span>,</span><br><span class="line">                            recurrent_initializer=<span class="string">&#x27;glorot_uniform&#x27;</span>),</span><br><span class="line">        tf.keras.layers.Dense(output_size)</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> model</span><br></pre></td></tr></table></figure>

<h1 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h1><h2 id="Loss函数"><a href="#Loss函数" class="headerlink" title="Loss函数"></a>Loss函数</h2><p>模型的Loss函数为所有待预测轨迹点的负对数似然估计之和，模型训练的过程就是最小化所有待预测轨迹的Loss的过程。</p>
<p>$$<br>L^{i}=-\sum_{t=T_{obs}+1}^{T_{pred}} \log \left(\mathbb{P}\left(x_{t}^{i}, y_{t}^{i} \mid \sigma_{t}^{i}, \mu_{t}^{i}, \rho_{t}^{i}\right)\right)<br>$$</p>
<p>loss代码如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_lossfunc</span>(<span class="params">z_mux, z_muy, z_sx, z_sy, z_corr, x_data, y_data</span>):</span></span><br><span class="line"></span><br><span class="line">    result0 = tf_2d_normal(x_data, y_data, z_mux, z_muy, z_sx, z_sy, z_corr)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># For numerical stability purposes</span></span><br><span class="line">    epsilon = <span class="number">1e-20</span></span><br><span class="line"></span><br><span class="line">    result1 = -tf.math.log(tf.math.maximum(result0, epsilon))  <span class="comment"># Numerical stability</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Sum up all log probabilities for each data point</span></span><br><span class="line">    <span class="keyword">return</span> tf.reduce_sum(result1)</span><br></pre></td></tr></table></figure>
<h2 id="轨迹预测效果的Metric"><a href="#轨迹预测效果的Metric" class="headerlink" title="轨迹预测效果的Metric"></a>轨迹预测效果的Metric</h2><p>轨迹预测效果的衡量指标为:<strong>Average Displacement Error</strong>和<strong>Final Displacement Error</strong>。</p>
<p>Average Displacement Error = 所有预测轨迹点与GroundTruth对应轨迹点的空间距离之和/预测轨迹点个数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_mean_error</span>(<span class="params">pred_traj, true_traj, observed_length</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The data structure to store all errors</span></span><br><span class="line">    error = np.zeros(<span class="built_in">len</span>(true_traj) - observed_length)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(observed_length, <span class="built_in">len</span>(true_traj)):</span><br><span class="line">        <span class="comment"># The predicted position</span></span><br><span class="line">        pred_pos = pred_traj[i, :]</span><br><span class="line">        <span class="comment"># The true position</span></span><br><span class="line">        true_pos = true_traj[i, :]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># The euclidean distance is the error</span></span><br><span class="line">        error[i-observed_length] = np.linalg.norm(true_pos - pred_pos)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> np.mean(error)</span><br></pre></td></tr></table></figure>

<p>Final Displacement Error = 最后一个预测轨迹点与GroundTruth对应轨迹点的空间距离；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_final_error</span>(<span class="params">pred_traj, true_traj</span>):</span></span><br><span class="line">    error = np.linalg.norm(pred_traj[-<span class="number">1</span>, :] - true_traj[-<span class="number">1</span>, :])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> error</span><br></pre></td></tr></table></figure>
<h2 id="训练过程"><a href="#训练过程" class="headerlink" title="训练过程"></a>训练过程</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span>(<span class="params">args</span>):</span></span><br><span class="line">    datasets = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">    data_loader = DataLoader(args.batch_size, args.seq_length, datasets, forcePreProcess=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    model = build_model(args)</span><br><span class="line"></span><br><span class="line">    optimizer = tf.keras.optimizers.RMSprop(args.learning_rate)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> <span class="built_in">range</span>(args.num_epochs):</span><br><span class="line">        data_loader.reset_batch_pointer()</span><br><span class="line">        model.reset_states()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> batch <span class="keyword">in</span> <span class="built_in">range</span>(data_loader.num_batches):</span><br><span class="line">            start = time.time()</span><br><span class="line"></span><br><span class="line">             x, y = data_loader.next_batch()</span><br><span class="line"></span><br><span class="line">            base_pos = np.array([[e_x[<span class="number">0</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(e_x))] <span class="keyword">for</span> e_x <span class="keyword">in</span> x])</span><br><span class="line"></span><br><span class="line">            x_offset = x - base_pos</span><br><span class="line">            y_offset = y - base_pos</span><br><span class="line"></span><br><span class="line">            <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">                tensor_x = tf.convert_to_tensor(x_offset, dtype=tf.float32)</span><br><span class="line"></span><br><span class="line">                logits = model(tensor_x)</span><br><span class="line"></span><br><span class="line">                [o_mux, o_muy, o_sx, o_sy, o_corr] = get_coef(logits)</span><br><span class="line"></span><br><span class="line">                tensor_y = tf.convert_to_tensor(y_offset, dtype=tf.float32)</span><br><span class="line"></span><br><span class="line">                [x_data, y_data] = tf.split(tensor_y, <span class="number">2</span>, -<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># Compute the loss function</span></span><br><span class="line">                loss = get_lossfunc(o_mux, o_muy, o_sx, o_sy, o_corr, x_data, y_data)</span><br><span class="line"></span><br><span class="line">                mean_error, final_error = calc_prediction_error(o_mux, o_muy, o_sx, o_sy, o_corr, tensor_y, args)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># Compute the cost</span></span><br><span class="line">                loss = tf.math.divide(loss, (args.batch_size * args.seq_length))</span><br><span class="line"></span><br><span class="line">                grads = tape.gradient(loss, model.trainable_variables)</span><br><span class="line"></span><br><span class="line">                optimizer.lr.assign(args.learning_rate * (args.decay_rate ** e))</span><br><span class="line">                optimizer.apply_gradients(<span class="built_in">zip</span>(grads, model.trainable_variables))</span><br></pre></td></tr></table></figure>

<p>training过程:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5195&#x2F;5200 (epoch 199), train\_loss &#x3D; -5.898, time&#x2F;batch &#x3D; 0.583, mean error &#x3D; 0.019682016324174278, final\_error &#x3D; 0.019766580550931393</span><br><span class="line">5196&#x2F;5200 (epoch 199), train\_loss &#x3D; -5.707, time&#x2F;batch &#x3D; 0.583, mean error &#x3D; 0.01821616107675557, final\_error &#x3D; 0.018569258209317922</span><br><span class="line">5197&#x2F;5200 (epoch 199), train\_loss &#x3D; -5.726, time&#x2F;batch &#x3D; 0.581, mean error &#x3D; 0.021631291888964673, final\_error &#x3D; 0.024468516283668577</span><br><span class="line">5198&#x2F;5200 (epoch 199), train\_loss &#x3D; -6.308, time&#x2F;batch &#x3D; 0.595, mean error &#x3D; 0.02178817719841997, final\_error &#x3D; 0.024148114868439735</span><br><span class="line">5199&#x2F;5200 (epoch 199), train\_loss &#x3D; -2.924, time&#x2F;batch &#x3D; 0.603, mean error &#x3D; 0.035233428867844245, final\_error &#x3D; 0.036289180340245364</span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/11/rnn%E9%A2%84%E6%B5%8B%E8%A1%8C%E4%BA%BA%E8%BF%90%E5%8A%A8%E8%BD%A8%E8%BF%B9/v2-79fae3377250006a5521fb82983b7e62_720w.jpg"></p>
<p>最后放一些测试效果的图吧，绿色是Ground Truth Trajectory，红色是Prediction Trajectory。</p>
<p>最终效果中，预测Trajectory与Ground Truth Trajectory的绝对偏差并不大，因为行人的运动速度通常不会太快。但最终的预测趋势与真实的运动意图个人感觉还比较大，不确定是模型的问题，还是行人运动预测难度比较大，单凭LSTM很难搞定。后面再尝试下Social LSTM，看看效果。</p>
<p><img src="/2020/07/11/rnn%E9%A2%84%E6%B5%8B%E8%A1%8C%E4%BA%BA%E8%BF%90%E5%8A%A8%E8%BD%A8%E8%BF%B9/v2-2c6eca62a722134c41825e200e8bfe51_720w.jpg"></p>
<p><img src="/2020/07/11/rnn%E9%A2%84%E6%B5%8B%E8%A1%8C%E4%BA%BA%E8%BF%90%E5%8A%A8%E8%BD%A8%E8%BF%B9/v2-7464b730afec00a99d8d4cc9738819a1_720w.jpg"></p>
<p><img src="/2020/07/11/rnn%E9%A2%84%E6%B5%8B%E8%A1%8C%E4%BA%BA%E8%BF%90%E5%8A%A8%E8%BD%A8%E8%BF%B9/v2-a0b714e1f20cc24717b90d795fc605ea_720w.jpg"></p>
<p><img src="/2020/07/11/rnn%E9%A2%84%E6%B5%8B%E8%A1%8C%E4%BA%BA%E8%BF%90%E5%8A%A8%E8%BD%A8%E8%BF%B9/v2-fd8e403ac5d3c4a411d8e2d2f497368e_720w.jpg"></p>
<h1 id="参考材料"><a href="#参考材料" class="headerlink" title="参考材料"></a>参考材料</h1><p>1.<a href="https://github.com/xuerenlv/social-lstm-tf">https://github.com/xuerenlv/social-lstm-tf</a><br>2.<a href="https://github.com/quancore/social-lstm">https://github.com/quancore/social-lstm</a><br>3.<a href="https://www.tensorflow.org/tutorials/text/text/_generation?hl=zh-cn">https://www.tensorflow.org/tutorials/text/text\_generation?hl=zh-cn</a></p>
]]></content>
      <categories>
        <category>自动驾驶</category>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>LSTM</tag>
        <tag>RNN</tag>
        <tag>行人轨迹预测</tag>
        <tag>轨迹预测</tag>
      </tags>
  </entry>
  <entry>
    <title>Waymo-自动驾驶长尾问题挑战</title>
    <url>/2020/02/08/waymo-%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%95%BF%E5%B0%BE%E9%97%AE%E9%A2%98%E6%8C%91%E6%88%98/</url>
    <content><![CDATA[<p>尽管Waymo已经在开放道路上积累超过10 Million Miles，Waymo的工程师们仍然发现有层出不穷的新自动驾驶场景待解决。</p>
<h1 id="自动驾驶长尾场景举例"><a href="#自动驾驶长尾场景举例" class="headerlink" title="自动驾驶长尾场景举例"></a>自动驾驶长尾场景举例</h1><p><strong>场景一</strong>：一个骑自行车的人手中拿着一个Stop Sign标识牌。我们不知道它何时会举起标识牌。无人车必须理解这种场景，即使他举起了Stop Sign标识牌，自动驾驶汽车也不应该停下来。</p>
<p><img src="/2020/02/08/waymo-%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%95%BF%E5%B0%BE%E9%97%AE%E9%A2%98%E6%8C%91%E6%88%98/Screenshot-from-2020-02-07-22-03-14-1024x574.png"></p>
<span id="more"></span>

<p><strong>场景二:</strong> 迎面而来的车辆上装载的塑料管子撒了一地，自动驾驶汽车必须学会应对这种突发情况，并且避开它们对无人车行驶的影响。</p>
<p><img src="/2020/02/08/waymo-%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%95%BF%E5%B0%BE%E9%97%AE%E9%A2%98%E6%8C%91%E6%88%98/Screenshot-from-2020-02-07-22-08-44-1024x370.png"></p>
<p><strong>场景三：</strong>由于道路施工等因素，路面布满锥桶。无人车必须正确识别这些场景，在布满路面锥桶的场景下实现合理驾驶。</p>
<p><img src="/2020/02/08/waymo-%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%95%BF%E5%B0%BE%E9%97%AE%E9%A2%98%E6%8C%91%E6%88%98/gifhome_774x432_10s.gif"></p>
<p><strong>场景四：</strong>路口绿灯，无人车拥有路权，虽然我们的无人车先到达路口，但必须为稍后到达的特种车辆让行。</p>
<p><img src="/2020/02/08/waymo-%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%95%BF%E5%B0%BE%E9%97%AE%E9%A2%98%E6%8C%91%E6%88%98/gifhome_774x432_8s.gif"></p>
<p><strong>场景五：</strong> 路口绿灯，无人车准备左转，遇到闯红灯高速通过的社会车辆，无人车需要识别这种场景，并及时停车避让违规车辆。</p>
<p><img src="/2020/02/08/waymo-%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%95%BF%E5%B0%BE%E9%97%AE%E9%A2%98%E6%8C%91%E6%88%98/gifhome_774x432_5s-1.gif"></p>
<h1 id="自动驾驶核心模块-Perception-Prediction和Planning"><a href="#自动驾驶核心模块-Perception-Prediction和Planning" class="headerlink" title="自动驾驶核心模块-Perception, Prediction和Planning"></a>自动驾驶核心模块-Perception, Prediction和Planning</h1><p>Perception、Prediction和Planning模块是自动驾驶的核心模块，每个模块都存在巨大的挑战。</p>
<h2 id="Perception"><a href="#Perception" class="headerlink" title="Perception"></a>Perception</h2><p>Perception输入：传感器(激光雷达)输入信息以及场景的先验信息。</p>
<p>Perception输出：道路交通对象(行人、车辆等)，对道路场景的语义分割和理解。</p>
<p><img src="/2020/02/08/waymo-%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%95%BF%E5%B0%BE%E9%97%AE%E9%A2%98%E6%8C%91%E6%88%98/Screenshot-from-2020-02-08-08-56-17.png"></p>
<p>Perception本身是一个非常复杂、高难度的问题，它必须能够识别各种形态各异、不同种类的对象。比如下左一图，一群穿着恐龙服的行人，感知必须能够正确识别它们。</p>
<p><img src="/2020/02/08/waymo-%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%95%BF%E5%B0%BE%E9%97%AE%E9%A2%98%E6%8C%91%E6%88%98/Screenshot-from-2020-02-08-09-03-50-1024x338.png"></p>
<p>相同的物体在不同的时间、不同的季节它们的外观表现也会有很大的差异，这会对Perception带来巨大挑战。</p>
<p><img src="/2020/02/08/waymo-%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%95%BF%E5%B0%BE%E9%97%AE%E9%A2%98%E6%8C%91%E6%88%98/Screenshot-from-2020-02-08-09-12-28-1024x311.png"></p>
<p>各种复杂场景的分割理解难度极高。如下图左一：一个搬着箱子的人；下图左三：骑马的人。Perception必须能够正确的分割识别这些场景，而不会因为遮挡导致出现识别的错误。</p>
<p><img src="/2020/02/08/waymo-%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%95%BF%E5%B0%BE%E9%97%AE%E9%A2%98%E6%8C%91%E6%88%98/Screenshot-from-2020-02-08-09-16-52-1024x300.png"></p>
<h2 id="Prediction"><a href="#Prediction" class="headerlink" title="Prediction"></a>Prediction</h2><p>Perception对检测到的物体进行下一步行为的预测，以辅助自动驾驶车辆进行合理的行为决策。</p>
<p><img src="/2020/02/08/waymo-%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%95%BF%E5%B0%BE%E9%97%AE%E9%A2%98%E6%8C%91%E6%88%98/Screenshot-from-2020-02-08-09-29-49-1024x259.png"></p>
<p>Perception要考虑物体的历史行为，比如车辆不会在短时间内实现90度的转弯，因此我们可以假设车辆在短时间内仍然按照当前的朝向和速度前进；要对场景有更高语义层面的理解；要能够关注到不同对象的属性差异和视觉线索，比如车辆大概率是会在车道上行驶上，行人会走斑马线，车辆的朝向能够大概率反应它的意图，如果行人做出停车的手势，大概率是要过马路；要能够解决待预测物体与其它物体的行为交互。</p>
<p>如下图所示，路边有一辆静止的车辆，骑自行车的人在靠近静止车辆时，会侵入无人车车道。Perception模块需要正确理解这些场景，并生成合理的预测曲线。</p>
<p><img src="/2020/02/08/waymo-%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%95%BF%E5%B0%BE%E9%97%AE%E9%A2%98%E6%8C%91%E6%88%98/gifhome_774x432_5s.gif"></p>
<p>如何能够准确的预测社会车辆的行为仍然是一个存在巨大挑战的开放性问题。</p>
<h2 id="Planning"><a href="#Planning" class="headerlink" title="Planning"></a>Planning</h2><p>Planning是Decision Making Machine，它基于Perception和Prediction的输出，规划车辆的行为，并输出Control模块，控制车辆的加减速、刹车等行为。</p>
<p><img src="/2020/02/08/waymo-%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%95%BF%E5%B0%BE%E9%97%AE%E9%A2%98%E6%8C%91%E6%88%98/Screenshot-from-2020-02-08-09-51-50.png"></p>
<p>Planning首要考虑的是安全(safe)，其次要考虑驾乘的舒适性(comfortable)，再次要能够与其它交通参与者正确交互，最后要保证乘客送达目的地。如何能够满足这些条件实现良好的Planning效果仍然是一个开放性的问题。</p>
<p><img src="/2020/02/08/waymo-%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%95%BF%E5%B0%BE%E9%97%AE%E9%A2%98%E6%8C%91%E6%88%98/gifhome_774x432_10s-1-2.gif"></p>
<h1 id="大规模机器学习技术-Machine-Learning-At-Scale"><a href="#大规模机器学习技术-Machine-Learning-At-Scale" class="headerlink" title="大规模机器学习技术(Machine Learning At Scale)"></a>大规模机器学习技术(Machine Learning At Scale)</h1><p>Machine Learning是解决自动驾驶长尾问题的一种有效工具。利用Machine Learning技术可以实现从数据采集、标注、训练、车端部署的闭环循环流程，从而实现Case的不断积累，模型的不断完善。</p>
<p><img src="/2020/02/08/waymo-%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%95%BF%E5%B0%BE%E9%97%AE%E9%A2%98%E6%8C%91%E6%88%98/Screenshot-from-2020-02-08-10-22-39-1024x426.png"></p>
<h2 id="Automated-Machine-Learning技术"><a href="#Automated-Machine-Learning技术" class="headerlink" title="Automated Machine Learning技术"></a>Automated Machine Learning技术</h2><p>Waymo使用了Automated Machine Learning技术生成和优化针对无人车的数据模型，极大提升了模型训练的效率。</p>
<p><img src="/2020/02/08/waymo-%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%95%BF%E5%B0%BE%E9%97%AE%E9%A2%98%E6%8C%91%E6%88%98/Screenshot-from-2020-02-08-10-37-13-1024x530.png"></p>
<p><img src="/2020/02/08/waymo-%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%95%BF%E5%B0%BE%E9%97%AE%E9%A2%98%E6%8C%91%E6%88%98/Screenshot-from-2020-02-08-10-39-29-1024x521.png"></p>
<p><img src="/2020/02/08/waymo-%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%95%BF%E5%B0%BE%E9%97%AE%E9%A2%98%E6%8C%91%E6%88%98/Screenshot-from-2020-02-08-10-40-27-1024x425.png"></p>
<p><img src="/2020/02/08/waymo-%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%95%BF%E5%B0%BE%E9%97%AE%E9%A2%98%E6%8C%91%E6%88%98/Screenshot-from-2020-02-08-10-43-04-1024x523.png"></p>
<h2 id="机器学习技术的局限-Limits-Of-Machine-Learning"><a href="#机器学习技术的局限-Limits-Of-Machine-Learning" class="headerlink" title="机器学习技术的局限(Limits Of Machine Learning)"></a>机器学习技术的局限(Limits Of Machine Learning)</h2><p>机器学习模型不能解决所有的问题，但我们需要的是一个安全的自动驾驶系统，所以必须有其它措施来补充ML的不足。</p>
<p>首先可以借助于冗余互补的传感器辅助解决这个问题。车辆同时配备了视觉、Lidar、Radar系统，各个系统彼此独立，相互补充，以最大限度保证无人车不会缺失任何信息。</p>
<p><img src="/2020/02/08/waymo-%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%95%BF%E5%B0%BE%E9%97%AE%E9%A2%98%E6%8C%91%E6%88%98/Screenshot-from-2020-02-08-10-48-43-1024x599.png"></p>
<p>其次，我们可以采用ML和Non-ML混合系统，利用专家系统来弥补ML的不足。</p>
<p><img src="/2020/02/08/waymo-%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%95%BF%E5%B0%BE%E9%97%AE%E9%A2%98%E6%8C%91%E6%88%98/Screenshot-from-2020-02-08-10-56-06.png"></p>
<h1 id="大规模的测试技术-Large-Scale-Testing"><a href="#大规模的测试技术-Large-Scale-Testing" class="headerlink" title="大规模的测试技术(Large Scale Testing)"></a>大规模的测试技术(Large Scale Testing)</h1><p>首先Waymo有庞大的自动驾驶车队，可以支撑大规模的测试。</p>
<p><img src="/2020/02/08/waymo-%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%95%BF%E5%B0%BE%E9%97%AE%E9%A2%98%E6%8C%91%E6%88%98/Screenshot-from-2020-02-08-11-16-08-1024x494.png"></p>
<p>有些场景在实际道路上出现的概率很低，为了测试验证这些低频问题，需要自己构建场景，进行结构化测试。</p>
<p><img src="/2020/02/08/waymo-%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%95%BF%E5%B0%BE%E9%97%AE%E9%A2%98%E6%8C%91%E6%88%98/Screenshot-from-2020-02-08-11-19-08-1024x471.png"></p>
<p>仿真是一种重要的验证测试手段，可以轻量级安全的构造各种各样的测试场景。</p>
<p><img src="/2020/02/08/waymo-%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%95%BF%E5%B0%BE%E9%97%AE%E9%A2%98%E6%8C%91%E6%88%98/Screenshot-from-2020-02-08-11-22-53.png"></p>
<p>自动驾驶仿真必须能够真实模拟车辆和行人的行为。这仅仅依靠简单的规则模型是不够的，我们需要更加复杂的模型，Waymo使用一种Mid-2-Mid的Drive Agent机器学习模型，它接收定位、感知等信息，输出更加拟人化的运动规划。</p>
<p><img src="/2020/02/08/waymo-%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%95%BF%E5%B0%BE%E9%97%AE%E9%A2%98%E6%8C%91%E6%88%98/Screenshot-from-2020-02-08-11-40-00-1024x269.png"></p>
<p>Waymo提出的ChauffeurNet将Map、交通规则、道路环境等信息转化为图像信息，从而可以最大限度的利用比较成熟的机器学习模型，最终输出Agent的Trajectory。</p>
<p><img src="/2020/02/08/waymo-%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%95%BF%E5%B0%BE%E9%97%AE%E9%A2%98%E6%8C%91%E6%88%98/Screenshot-from-2020-02-08-11-46-38-1024x543.png"></p>
<p>ChauffeurNet可以解决大部分简单场景下的Prediction和Planning问题。</p>
<p><img src="/2020/02/08/waymo-%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%95%BF%E5%B0%BE%E9%97%AE%E9%A2%98%E6%8C%91%E6%88%98/unnamed.gif"></p>
<p>场景中红色的拖尾是Agent的历史轨迹，绿色是未来2s的预测轨迹。</p>
<p><img src="/2020/02/08/waymo-%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%95%BF%E5%B0%BE%E9%97%AE%E9%A2%98%E6%8C%91%E6%88%98/unnamed-1.gif"></p>
<p>主车成功的通过路边静止车辆的场景</p>
<p><img src="/2020/02/08/waymo-%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%95%BF%E5%B0%BE%E9%97%AE%E9%A2%98%E6%8C%91%E6%88%98/unnamed-2.gif"></p>
<p>主车遇到缓慢前行的车辆后减速</p>
<p>当然ChauffeurNet也有其局限性，比如以下复杂场景目前还不能很好的处理。</p>
<p><img src="/2020/02/08/waymo-%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%95%BF%E5%B0%BE%E9%97%AE%E9%A2%98%E6%8C%91%E6%88%98/gifhome_406x306_10s.gif"></p>
<p>主车由于视距遮挡，直接冲出了路口</p>
<p><img src="/2020/02/08/waymo-%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%95%BF%E5%B0%BE%E9%97%AE%E9%A2%98%E6%8C%91%E6%88%98/gifhome_406x306_8s.gif"></p>
<p>车辆没有成功完成掉头操作</p>
<h1 id="机器学习难以覆盖的长尾问题挑战"><a href="#机器学习难以覆盖的长尾问题挑战" class="headerlink" title="机器学习难以覆盖的长尾问题挑战"></a>机器学习难以覆盖的长尾问题挑战</h1><p>对自动驾驶测试来讲，最大的挑战在于很难收集到所有Corner Case。如下图所示，是人类驾驶行为分布，要经过非常长时间的积累才能得到一些Corner的驾驶行为Case。</p>
<p><img src="/2020/02/08/waymo-%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%95%BF%E5%B0%BE%E9%97%AE%E9%A2%98%E6%8C%91%E6%88%98/Screenshot-from-2020-02-08-15-46-53.png"></p>
<p>在自动驾驶网络的神经网络模型中，可能有上千万的参数，如果Corner Case的样本数量太少，就难以保证网络模型能够学会这些Corner场景。</p>
<p>在神经网络模型覆盖长尾Case前，如何来解决长尾Case呢？专家系统是一个选择。专家系统融入专业的知识，通过小批量的样本就可以获得效果比较好的参数。</p>
<p>比如我们计划得到实现一个轨迹优化机器学习模型，在基于运动控制理论和一系列的约束设计好专家模型之后，通过采集历史车辆轨迹，我们就可以调整参数最小化Cost的方法，使得专家系统的轨迹输出尽可能的逼近人类驾驶轨迹。</p>
<p><img src="/2020/02/08/waymo-%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%95%BF%E5%B0%BE%E9%97%AE%E9%A2%98%E6%8C%91%E6%88%98/Screenshot-from-2020-02-08-15-53-40-1024x576.png"></p>
<p>轨迹优化专家系统的另一种模型是Inverse Reinforcement Learning技术，通过历史驾驶轨迹训练模型参数，使得它的输出尽可能的逼近预期效果。</p>
<p><img src="/2020/02/08/waymo-%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%95%BF%E5%B0%BE%E9%97%AE%E9%A2%98%E6%8C%91%E6%88%98/Screenshot-from-2020-02-08-16-02-30.png"></p>
<p>如下图所示，红色的主车，蓝色的是社会车辆。左图的社会车辆更加保守，右侧的社会车辆更加激进。用保守的轨迹训练出的模型表现就趋于保守，用激进的轨迹训练出的模型表现就趋于激进。</p>
<p><img src="/2020/02/08/waymo-%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%95%BF%E5%B0%BE%E9%97%AE%E9%A2%98%E6%8C%91%E6%88%98/gifhome_774x222_17s.gif"></p>
<h1 id="Smart-Agent对于自动驾驶规模化不可或缺"><a href="#Smart-Agent对于自动驾驶规模化不可或缺" class="headerlink" title="Smart Agent对于自动驾驶规模化不可或缺"></a>Smart Agent对于自动驾驶规模化不可或缺</h1><p>不管是专家系统，还是神经网络，它们都在努力模拟人的驾驶行为，使Agent变得聪明起来，聪明的Agent可以辅助自动驾驶技术快速规模化。</p>
<p><img src="/2020/02/08/waymo-%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%95%BF%E5%B0%BE%E9%97%AE%E9%A2%98%E6%8C%91%E6%88%98/Screenshot-from-2020-02-08-16-19-28-1024x319.png"></p>
<p><img src="/2020/02/08/waymo-%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%95%BF%E5%B0%BE%E9%97%AE%E9%A2%98%E6%8C%91%E6%88%98/Screenshot-from-2020-02-08-16-21-58-1024x433.png"></p>
]]></content>
      <categories>
        <category>自动驾驶</category>
      </categories>
      <tags>
        <tag>自动驾驶</tag>
        <tag>waymo</tag>
        <tag>自动驾驶长尾问题</tag>
      </tags>
  </entry>
  <entry>
    <title>未知环境下的Lidar概率占位栅格图(Occupancy Grid Map) Python代码实现</title>
    <url>/2020/02/15/%E6%9C%AA%E7%9F%A5%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84lidar%E6%A6%82%E7%8E%87%E5%8D%A0%E4%BD%8D%E6%A0%85%E6%A0%BC%E5%9B%BEoccupancy-grid-map-python%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>前面文章&lt;&lt;自动驾驶Mapping-占位栅格图(Occupancy Grid Map)&gt;&gt;中介绍了概率占位栅格地图(Probabilistic Occupancy Grid)的原理，并推导了如何利用贝叶斯理论(Bayes Theorem)更新生成概率占位栅格地图。下面看看如何用Python代码实现未知环境中的运动车辆上安装的激光雷达(lidar)生成概率占位栅格图。</p>
<h4 id="１、构建环境地图和车辆运动模型"><a href="#１、构建环境地图和车辆运动模型" class="headerlink" title="１、构建环境地图和车辆运动模型"></a>１、构建环境地图和车辆运动模型</h4><p>在生成栅格地图之前，首先需要构造一个用于车辆运动的环境地图(这个地图是用于仿真的真值，对于车辆来说是未知的环境)。我们用０和１值来构造Ｍ*N的环境地图，０表示可行驶区域，１表示占用区域。</p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">M = <span class="number">50</span></span><br><span class="line">N = <span class="number">60</span></span><br><span class="line">true_map = np.zeros((M, N))</span><br><span class="line">true_map[<span class="number">0</span>:<span class="number">10</span>, <span class="number">0</span>:<span class="number">10</span>] = <span class="number">1</span></span><br><span class="line">true_map[<span class="number">30</span>:<span class="number">35</span>, <span class="number">40</span>:<span class="number">45</span>] = <span class="number">1</span></span><br><span class="line">true_map[<span class="number">3</span>:<span class="number">6</span>,<span class="number">40</span>:<span class="number">60</span>] = <span class="number">1</span></span><br><span class="line">true_map[<span class="number">20</span>:<span class="number">30</span>,<span class="number">25</span>:<span class="number">29</span>] = <span class="number">1</span></span><br><span class="line">true_map[<span class="number">40</span>:<span class="number">50</span>,<span class="number">5</span>:<span class="number">25</span>] = <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>然后构建车辆的运动模型。这里实现了一个简单的运动模型：车辆遇到障碍物或者到达地图边界之前，沿一个方向一直行驶；遇到障碍物或者到达地图边界之后，调整方向继续行驶。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Initializing the robot&#x27;s location.</span></span><br><span class="line">x_0 = [<span class="number">30</span>, <span class="number">30</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># The sequence of robot motions.</span></span><br><span class="line">u = np.array([[<span class="number">3</span>, <span class="number">0</span>, -<span class="number">3</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, -<span class="number">3</span>]])</span><br><span class="line">u_i = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize the vector of states for our simulation.</span></span><br><span class="line">x = np.zeros((<span class="number">3</span>, <span class="built_in">len</span>(time_steps)))</span><br><span class="line">x[:, <span class="number">0</span>] = x_0</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span>(Some Conditon...) :</span><br><span class="line">　　<span class="comment"># Perform robot motion.</span></span><br><span class="line">    move = np.add(x[<span class="number">0</span>:<span class="number">2</span>, t-<span class="number">1</span>], u[:, u_i]) </span><br><span class="line">    <span class="comment"># If we hit the map boundaries, or a collision would occur, remain still.</span></span><br><span class="line">    <span class="keyword">if</span> (move[<span class="number">0</span>] &gt;= M - <span class="number">1</span>) <span class="keyword">or</span> (move[<span class="number">1</span>] &gt;= N - <span class="number">1</span>) <span class="keyword">or</span> (move[<span class="number">0</span>] &lt;= <span class="number">0</span>) <span class="keyword">or</span> (move[<span class="number">1</span>] &lt;= <span class="number">0</span>) <span class="keyword">or</span> true_map[<span class="built_in">int</span>(<span class="built_in">round</span>(move[<span class="number">0</span>])), <span class="built_in">int</span>(<span class="built_in">round</span>(move[<span class="number">1</span>]))] == <span class="number">1</span>:</span><br><span class="line">        x[:, t] = x[:, t-<span class="number">1</span>]</span><br><span class="line">        u_i = (u_i + <span class="number">1</span>) % <span class="number">4</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        x[<span class="number">0</span>:<span class="number">2</span>, t] = move</span><br></pre></td></tr></table></figure>

<p>车辆的运动效果如下所示：</p>
<p><img src="/2020/02/15/%E6%9C%AA%E7%9F%A5%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84lidar%E6%A6%82%E7%8E%87%E5%8D%A0%E4%BD%8D%E6%A0%85%E6%A0%BC%E5%9B%BEoccupancy-grid-map-python%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/i2bis-0v5o3.gif"></p>
<p>最后要构建激光雷达(Lidar)的旋转模型。这里假设在车辆运动过程中，激光雷达(lidar)以0.3/Step的速度持续旋转，对周围的环境进行扫描。</p>
<p>$$<br>x[2, t] = (x[2, t-1] + w[t]) % (2 * math.pi)<br>$$</p>
<h4 id="２、生成激光雷达-Lidar-测量数据"><a href="#２、生成激光雷达-Lidar-测量数据" class="headerlink" title="２、生成激光雷达(Lidar)测量数据"></a>２、生成激光雷达(Lidar)测量数据</h4><p>有了地图和车辆运动模型，我们看看如何生成运动车辆上的激光雷达(lidar)扫描数据。</p>
<p>首先，我们需要搞清楚激光雷达的外参和内参，并以此推导出激光雷达(lidar)在Map坐标系下的姿态(x, y, $\theta$)和激光雷达(lidar)的激光束的水平和垂直角度分布(激光束的水平和垂直角度分布跟激光雷达自身的硬件属性相关，一般可以从Lidar产品说明书中获取)。</p>
<p>其次，我们需要知道激光雷达(Lidar)的最大扫描范围，超出该范围的区域不能被当前位置的Lidar扫描到，因而是定义为未知区域。最大扫描范围其实也是跟激光雷达自身属性相关的参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Parameters for the sensor model.</span></span><br><span class="line">meas_phi = np.arange(-<span class="number">0.4</span>, <span class="number">0.4</span>, <span class="number">0.05</span>)</span><br><span class="line">rmax = <span class="number">30</span> <span class="comment"># Max beam range.</span></span><br><span class="line">alpha = <span class="number">1</span> <span class="comment"># Width of an obstacle (distance about measurement to fill in).</span></span><br><span class="line">beta = <span class="number">0.05</span> <span class="comment"># Angular width of a beam.</span></span><br></pre></td></tr></table></figure>

<p>基于已知环境地图、车辆位置、Lidar激光束分布和Lidar最大扫描范围获取Lidar扫描数据的详细的代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_ranges</span>(<span class="params">true_map, X, meas_phi, rmax</span>):</span></span><br><span class="line">    (M, N) = np.shape(true_map)</span><br><span class="line">    x = X[<span class="number">0</span>]</span><br><span class="line">    y = X[<span class="number">1</span>]</span><br><span class="line">    theta = X[<span class="number">2</span>]</span><br><span class="line">    meas_r = rmax * np.ones(meas_phi.shape)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Iterate for each measurement bearing.</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(meas_phi)):</span><br><span class="line">        <span class="comment"># Iterate over each unit step up to and including rmax.</span></span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, rmax+<span class="number">1</span>):</span><br><span class="line">            <span class="comment"># Determine the coordinates of the cell.</span></span><br><span class="line">            xi = <span class="built_in">int</span>(<span class="built_in">round</span>(x + r * math.cos(theta + meas_phi[i])))</span><br><span class="line">            yi = <span class="built_in">int</span>(<span class="built_in">round</span>(y + r * math.sin(theta + meas_phi[i])))</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># If not in the map, set measurement there and stop going further.</span></span><br><span class="line">            <span class="keyword">if</span> (xi &lt;= <span class="number">0</span> <span class="keyword">or</span> xi &gt;= M-<span class="number">1</span> <span class="keyword">or</span> yi &lt;= <span class="number">0</span> <span class="keyword">or</span> yi &gt;= N-<span class="number">1</span>):</span><br><span class="line">                meas_r[i] = r</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># If in the map, but hitting an obstacle, set the measurement range</span></span><br><span class="line">            <span class="comment"># and stop ray tracing.</span></span><br><span class="line">            <span class="keyword">elif</span> true_map[<span class="built_in">int</span>(<span class="built_in">round</span>(xi)), <span class="built_in">int</span>(<span class="built_in">round</span>(yi))] == <span class="number">1</span>:</span><br><span class="line">                meas_r[i] = r</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">                </span><br><span class="line">    <span class="keyword">return</span> meas_r</span><br></pre></td></tr></table></figure>

<h4 id="３、计算Inverse-Scanner-Model"><a href="#３、计算Inverse-Scanner-Model" class="headerlink" title="３、计算Inverse Scanner Model"></a>３、计算Inverse Scanner Model</h4><p>获取激光雷达(Lidar)的测量数据之后，下一步就是将其关联匹配到地图的Map Cell上。主要流程是：</p>
<p>1）将 Lidar bearing与Map Cell相对于传感器的方位进行最小误差匹配，得到影响当前Map Cell的激光束；</p>
<p><img src="/2020/02/15/%E6%9C%AA%E7%9F%A5%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84lidar%E6%A6%82%E7%8E%87%E5%8D%A0%E4%BD%8D%E6%A0%85%E6%A0%BC%E5%9B%BEoccupancy-grid-map-python%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/Screenshot-from-2020-02-01-12-38-07-1-1024x461.png"></p>
<p>匹配的代码如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = math.sqrt((i - x)**<span class="number">2</span> + (j - y)**<span class="number">2</span>)</span><br><span class="line">phi = (math.atan2(j - y, i - x) - theta + math.pi) % (<span class="number">2</span> * math.pi) - math.pi</span><br><span class="line">            </span><br><span class="line"><span class="comment"># Find the range measurement associated with the relative bearing.</span></span><br><span class="line">k = np.argmin(np.<span class="built_in">abs</span>(np.subtract(phi, meas_phi)))</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>计算每个Cell被占用的概率。计算完成之后，得到三种不同类型的区域：未探测区域、障碍物区域和非障碍物区域，并赋给它们不同的占用概率。这里将未探测区域的占用概率设为0.5，表示不确定是否占用；障碍物区域占用概率等于0.7，表示大概率被占用；可行驶区域占用概率0.3，表示小概率被占用。</li>
</ol>
<p><img src="/2020/02/15/%E6%9C%AA%E7%9F%A5%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84lidar%E6%A6%82%E7%8E%87%E5%8D%A0%E4%BD%8D%E6%A0%85%E6%A0%BC%E5%9B%BEoccupancy-grid-map-python%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/Screenshot-from-2020-02-01-14-59-27-1-1024x472.png"></p>
<p>完整的Inverse Scanner Model的实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inverse_scanner</span>(<span class="params">num_rows, num_cols, x, y, theta, meas_phi, meas_r, rmax, alpha, beta</span>):</span></span><br><span class="line">    m = np.zeros((M, N))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_rows):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(num_cols):</span><br><span class="line">            <span class="comment"># Find range and bearing relative to the input state (x, y, theta).</span></span><br><span class="line">            r = math.sqrt((i - x)**<span class="number">2</span> + (j - y)**<span class="number">2</span>)</span><br><span class="line">            phi = (math.atan2(j - y, i - x) - theta + math.pi) % (<span class="number">2</span> * math.pi) - math.pi</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># Find the range measurement associated with the relative bearing.</span></span><br><span class="line">            k = np.argmin(np.<span class="built_in">abs</span>(np.subtract(phi, meas_phi)))</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># If the range is greater than the maximum sensor range, or behind our range</span></span><br><span class="line">            <span class="comment"># measurement, or is outside of the field of view of the sensor, then no</span></span><br><span class="line">            <span class="comment"># new information is available.</span></span><br><span class="line">            <span class="keyword">if</span> (r &gt; <span class="built_in">min</span>(rmax, meas_r[k] + alpha / <span class="number">2.0</span>)) <span class="keyword">or</span> (<span class="built_in">abs</span>(phi - meas_phi[k]) &gt; beta / <span class="number">2.0</span>):</span><br><span class="line">                m[i, j] = <span class="number">0.5</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># If the range measurement lied within this cell, it is likely to be an object.</span></span><br><span class="line">            <span class="keyword">elif</span> (meas_r[k] &lt; rmax) <span class="keyword">and</span> (<span class="built_in">abs</span>(r - meas_r[k]) &lt; alpha / <span class="number">2.0</span>):</span><br><span class="line">                m[i, j] = <span class="number">0.7</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># If the cell is in front of the range measurement, it is likely to be empty.</span></span><br><span class="line">            <span class="keyword">elif</span> r &lt; meas_r[k]:</span><br><span class="line">                m[i, j] = <span class="number">0.3</span></span><br><span class="line">                </span><br><span class="line">    <span class="keyword">return</span> m</span><br></pre></td></tr></table></figure>

<p>Inverse Scanner Model的测量结果如下图所示：</p>
<p><img src="/2020/02/15/%E6%9C%AA%E7%9F%A5%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84lidar%E6%A6%82%E7%8E%87%E5%8D%A0%E4%BD%8D%E6%A0%85%E6%A0%BC%E5%9B%BEoccupancy-grid-map-python%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/cv1uj-nhp9b.gif"></p>
<h4 id="４、生成概率占位栅格地图-Probabilistic-Occupancy-Grid"><a href="#４、生成概率占位栅格地图-Probabilistic-Occupancy-Grid" class="headerlink" title="４、生成概率占位栅格地图(Probabilistic Occupancy Grid)"></a>４、生成概率占位栅格地图(Probabilistic Occupancy Grid)</h4><p>生成概率占位地图的过程就是循环对激光雷达(lidar)的测量结果应用Inverse Scanner Model，然后更新各个Map Cell的Log Odds的过程详细推导过程参见：&lt;&lt;自动驾驶Mapping-占位栅格图(Occupancy Grid Map)&gt;&gt;:</p>
<p>$l_{t, i}=\operatorname{logit}\left(p\left(m^{i} y_{t}\right)\right)+l_{t-1, i}-l_{0, i}$</p>
<p>其中: $\operatorname{logit}\left(p\left(m^{i} y_{t}\right)\right)$是Inverse Measurement Model，$l_{t-1, i}$是网格i在t-1时刻的置信度(belif)，$l_{0,i}$是Initial belief。</p>
<p>最后，将log odds还原为真实概率，得到每个网格的占位概率值。</p>
<p>$p = e^{l_{t}} / (1 + e^{1_{t}})$</p>
<p>生成概率占位地图的代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">meas_rs = []</span><br><span class="line">meas_r = get_ranges(true_map, x[:, <span class="number">0</span>], meas_phi, rmax)</span><br><span class="line">meas_rs.append(meas_r)</span><br><span class="line">invmods = []</span><br><span class="line">invmod = inverse_scanner(M, N, x[<span class="number">0</span>, <span class="number">0</span>], x[<span class="number">1</span>, <span class="number">0</span>], x[<span class="number">2</span>, <span class="number">0</span>], meas_phi, meas_r, rmax, alpha, beta)</span><br><span class="line">invmods.append(invmod)</span><br><span class="line">ms = []</span><br><span class="line">ms.append(m)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Main simulation loop.</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(time_steps)):</span><br><span class="line">    <span class="comment"># Perform robot motion.</span></span><br><span class="line">    move = np.add(x[<span class="number">0</span>:<span class="number">2</span>, t-<span class="number">1</span>], u[:, u_i]) </span><br><span class="line">    <span class="comment"># If we hit the map boundaries, or a collision would occur, remain still.</span></span><br><span class="line">    <span class="keyword">if</span> (move[<span class="number">0</span>] &gt;= M - <span class="number">1</span>) <span class="keyword">or</span> (move[<span class="number">1</span>] &gt;= N - <span class="number">1</span>) <span class="keyword">or</span> (move[<span class="number">0</span>] &lt;= <span class="number">0</span>) <span class="keyword">or</span> (move[<span class="number">1</span>] &lt;= <span class="number">0</span>) <span class="keyword">or</span> true_map[<span class="built_in">int</span>(<span class="built_in">round</span>(move[<span class="number">0</span>])), <span class="built_in">int</span>(<span class="built_in">round</span>(move[<span class="number">1</span>]))] == <span class="number">1</span>:</span><br><span class="line">        x[:, t] = x[:, t-<span class="number">1</span>]</span><br><span class="line">        u_i = (u_i + <span class="number">1</span>) % <span class="number">4</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        x[<span class="number">0</span>:<span class="number">2</span>, t] = move</span><br><span class="line">    x[<span class="number">2</span>, t] = (x[<span class="number">2</span>, t-<span class="number">1</span>] + w[t]) % (<span class="number">2</span> * math.pi)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Gather the measurement range data, which we will convert to occupancy probabilities</span></span><br><span class="line">    meas_r = get_ranges(true_map, x[:, t], meas_phi, rmax)</span><br><span class="line">    meas_rs.append(meas_r)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Given our range measurements and our robot location, apply inverse scanner model</span></span><br><span class="line">    invmod = inverse_scanner(M, N, x[<span class="number">0</span>, t], x[<span class="number">1</span>, t], x[<span class="number">2</span>, t], meas_phi, meas_r, rmax, alpha, beta)</span><br><span class="line">    invmods.append(invmod)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Calculate and update the log odds of our occupancy grid, given our measured occupancy probabilities from the inverse model.</span></span><br><span class="line">    L = np.log(np.divide(invmod, np.subtract(<span class="number">1</span>, invmod))) + L - L0</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Calculate a grid of probabilities from the log odds.</span></span><br><span class="line">    m = np.divide(np.exp(L), np.add(<span class="number">1</span>, np.exp(L)))</span><br><span class="line">    ms.append(m)</span><br></pre></td></tr></table></figure>

<p>生成概率占用地图的过程如下：</p>
<p><img src="/2020/02/15/%E6%9C%AA%E7%9F%A5%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84lidar%E6%A6%82%E7%8E%87%E5%8D%A0%E4%BD%8D%E6%A0%85%E6%A0%BC%E5%9B%BEoccupancy-grid-map-python%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/ut3rg-81b5y.gif"></p>
<p>最终生成的概率占用栅格地图如下图所示。可以看看它基本反应了真实的实际车辆运行环境。</p>
<p><img src="/2020/02/15/%E6%9C%AA%E7%9F%A5%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84lidar%E6%A6%82%E7%8E%87%E5%8D%A0%E4%BD%8D%E6%A0%85%E6%A0%BC%E5%9B%BEoccupancy-grid-map-python%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/Screenshot-from-2020-02-13-07-53-05.png"></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>Coursera自动驾驶课程：Motion Planning for Self-Driving Cars的Weekly Assignment: Occupancy Grid Generation</p>
]]></content>
      <categories>
        <category>自动驾驶</category>
      </categories>
      <tags>
        <tag>Occupancy Grid Map</tag>
        <tag>概率占位栅格地图</tag>
        <tag>自动驾驶Planning</tag>
        <tag>自动驾驶路径规划</tag>
      </tags>
  </entry>
  <entry>
    <title>机器人动态规划(Dynamic Programming)入门</title>
    <url>/2020/10/30/%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92dynamic-programming%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="什么是动态规划"><a href="#什么是动态规划" class="headerlink" title="什么是动态规划"></a>什么是动态规划</h1><p>CS专业出身的人大抵没有人不知道动态规划(Dynamic Programming)的，该算法的本质就是把复杂的大问题分解成相互重叠的简单子问题，将子问题的最优解层层组合起来，就得到了复杂大问题的最优解。</p>
<p>能用动态规划解决的问题必须满足两个条件：一是最优子结构。即问题的最优解所包含的子问题的解也是最优的；二是子问题相互重叠。即是当使用递归进行自顶向下的求解时,每次产生的子问题不总是新的问题,而是已经被重复计算过的问题。<br>最典型的经常被拿来讲解Dynamic Programming的例子就是斐波那契数列(Fibonacci sequence)，它的数学定义如下:</p>
<span id="more"></span>

<p>$$<br>\begin{aligned} <br>F(0) &amp; = 0,\\<br>F(1) &amp; = 1,\\<br>F(n) &amp; = F(n-1) + F(n-2),\\<br>\end{aligned}<br>$$</p>
<p>斐波那契数列(Fibonacci sequence)计算的Python实现如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span></span><br><span class="line">    f = [<span class="number">0</span>] * (n + <span class="number">1</span>)</span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    f[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n + <span class="number">1</span>):</span><br><span class="line">        f[i] = f[i - <span class="number">1</span>] + f[i - <span class="number">2</span>]</span><br><span class="line">    <span class="keyword">return</span> f[n]</span><br></pre></td></tr></table></figure>

<h1 id="动态规划算法在自动驾驶中的应用"><a href="#动态规划算法在自动驾驶中的应用" class="headerlink" title="动态规划算法在自动驾驶中的应用"></a>动态规划算法在自动驾驶中的应用</h1><p>在如下的自动驾驶场景中，无人车在位置A处进行右转，目标是达到位置G处。理想的驾驶路径是: </p>
<p>(位置A处右转)-&gt;(进入车道C)-&gt;(变道进入车道B)-&gt;(左转到达目标位置G)</p>
<p><img src="/2020/10/30/%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92dynamic-programming%E5%85%A5%E9%97%A8/dp_map_scence-1024x841.png"></p>
<p>自动驾驶场景。</p>
<p>但是由于环境是随机的，我们的无人车在实际上路时，可能遇到各种情况。比如当我们计划从车道C变道进入车道B时，发现左侧被一辆大卡车挡住了；如果停下来等大卡车驶过之后再变道，会被车道C上无人车后方的司机拼命用大喇叭催你，无奈之下，我们只好放弃左转，继续直行，再寻求其它路径达到目的地。</p>
<p><img src="/2020/10/30/%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92dynamic-programming%E5%85%A5%E9%97%A8/dp_stuck_scence-1024x863.png"></p>
<p>目标车道被阻塞的场景</p>
<p>所以最后的行驶路径可能就变成了:</p>
<p>(位置A处右转)-&gt;(进入车道C，直行)-&gt;(通过路口，进入车道D)-&gt;(连续右转，达到位置E)-&gt;(直行到达目标位置G)</p>
<p>这里可以看到，我们需要一种方法，使得在无人车放弃车道C到车道B的变道时继续前进时，能够快速找到下一条可通行路径。动态规划(Dynamic Programming)可以用来解决这类问题，它可以给出从任意一个位置出发到达目的地的最优路径。</p>
<h2 id="简化的问题"><a href="#简化的问题" class="headerlink" title="简化的问题"></a>简化的问题</h2><p>为了应用动态规划(Dynamic Programming)算法，我们首先看下简化版的问题。如下图所示，我们将道路区域按照空间进行网格划分，带阴影线的网格表示不可通行区域，G表示目标位置。</p>
<p><img src="/2020/10/30/%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92dynamic-programming%E5%85%A5%E9%97%A8/dp_grid.png"></p>
<p>图中的蓝色箭头表示车辆在该位置的规划策略，也是我们要求解的目标，可以认为我们的目标就是通过Policy函数，将位置(x，y)映射到车辆的运动Action上。简化起见，我们假设车辆只有四个运动Action：向上、向下、向左、向右。</p>
<p>$$Policy(x, y) = Action\{left, right, up, down\}$$</p>
<p>如何将(x,y)转化为具体的Action呢？ 为了计算Action，我们首先需要为每个网格计算Value值。Value的大小与该网格距离目标位置的最短距离成正比。有了Value值之后，Action的方向就是从Value值大的网格指向Value值小的网格。</p>
<h2 id="网格Value的计算"><a href="#网格Value的计算" class="headerlink" title="网格Value的计算"></a>网格Value的计算</h2><p>每个Cell的Value的Value Function定义如下：</p>
<p>$f(x, y) = min_{(x^{\prime}, y^{\prime})} f(x^{\prime}, y^{\prime})$ + Cost</p>
<p>$(x^{\prime}, y^{\prime})$的取值为: $(x-1, y)$,$(x, y-1)$, $(x+1, y)$, $(x, y+1)$，即它的左、上、右、下四个方向的Cell； cost为Cell之间的Cost，这里取Cost为步长1。</p>
<p>可以看到，这是一个典型的动态规划的问题。我们看下如何使用动态规划(Dynamic Programming)算法求解每个Cell的Value。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Map Represention</span></span><br><span class="line">grid = [[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]]</span><br><span class="line">goal = [<span class="built_in">len</span>(grid)-<span class="number">1</span>, <span class="built_in">len</span>(grid[<span class="number">0</span>])-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># the cost associated with moving from a cell to an adjacent one</span></span><br><span class="line">cost = <span class="number">1</span> </span><br><span class="line"></span><br><span class="line">delta = [[-<span class="number">1</span>, <span class="number">0</span>], <span class="comment"># go up</span></span><br><span class="line">         [ <span class="number">0</span>, -<span class="number">1</span>], <span class="comment"># go left</span></span><br><span class="line">         [ <span class="number">1</span>, <span class="number">0</span>], <span class="comment"># go down</span></span><br><span class="line">         [ <span class="number">0</span>, <span class="number">1</span>]] <span class="comment"># go right</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_value</span>(<span class="params">grid,goal,cost</span>):</span></span><br><span class="line">  <span class="comment"># If a cell is a wall or it is impossible to reach the goal from a cell,assign that cell a value of 99.</span></span><br><span class="line">  value = [[<span class="number">99</span> <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(grid[<span class="number">0</span>]))] <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(grid))]</span><br><span class="line">    </span><br><span class="line">  change = <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">  <span class="keyword">while</span> change:</span><br><span class="line">    change = <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(grid)):</span><br><span class="line">      <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(grid[<span class="number">0</span>])):</span><br><span class="line">        <span class="keyword">if</span> goal[<span class="number">0</span>] == x <span class="keyword">and</span> goal[<span class="number">1</span>] == y:</span><br><span class="line">          <span class="keyword">if</span> value[x][y] &gt; <span class="number">0</span>:</span><br><span class="line">            value[x][y] = <span class="number">0</span></span><br><span class="line">            change = <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">elif</span> grid[x][y] == <span class="number">0</span>:</span><br><span class="line">          <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(delta)):</span><br><span class="line">            x2 = x + delta[a][<span class="number">0</span>]</span><br><span class="line">            y2 = y + delta[a][<span class="number">1</span>]</span><br><span class="line">            print((x2, y2))</span><br><span class="line">                        </span><br><span class="line">            <span class="keyword">if</span> x2 &gt;= <span class="number">0</span> <span class="keyword">and</span> x2 &lt; <span class="built_in">len</span>(grid) <span class="keyword">and</span> y2 &gt;= <span class="number">0</span> <span class="keyword">and</span> y2 &lt; <span class="built_in">len</span>(grid[<span class="number">0</span>]) <span class="keyword">and</span> grid[x2][y2] == <span class="number">0</span>:</span><br><span class="line">              v2 = value[x2][y2] + cost</span><br><span class="line">                </span><br><span class="line">              <span class="keyword">if</span> v2 &lt; value[x][y]:</span><br><span class="line">                change = <span class="literal">True</span></span><br><span class="line">                value[x][y] = v2</span><br><span class="line">                                </span><br><span class="line">  <span class="keyword">return</span> value</span><br></pre></td></tr></table></figure>
<p>最后我们可以得到如下的Value值，通过它可以得到从任意位置到达目标位置的最短距离。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[[11, 99, 7, 6, 5,  4],</span><br><span class="line"> [10, 99, 6, 5, 4,  3],</span><br><span class="line"> [9,  99, 5, 4, 3,  2],</span><br><span class="line"> [8,  99, 4, 3, 2,  1],</span><br><span class="line"> [7,  6,  5, 4, 99, 0]]</span><br></pre></td></tr></table></figure>

<p>将Value值映射为Policy，最终输出的结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> [[&#39;v&#39;, &#39; &#39;, &#39;v&#39;, &#39;v&#39;, &#39;v&#39;, &#39;v&#39;],</span><br><span class="line">  [&#39;v&#39;, &#39; &#39;, &#39;v&#39;, &#39;v&#39;, &#39;v&#39;, &#39;v&#39;],</span><br><span class="line">  [&#39;v&#39;, &#39; &#39;, &#39;v&#39;, &#39;v&#39;, &#39;v&#39;, &#39;v&#39;],</span><br><span class="line">  [&#39;v&#39;, &#39; &#39;, &#39;&gt;&#39;, &#39;&gt;&#39;, &#39;&gt;&#39;, &#39;v&#39;],</span><br><span class="line">  [&#39;&gt;&#39;, &#39;&gt;&#39;, &#39;^&#39;, &#39;^&#39;, &#39; &#39;, &#39;*&#39;]]</span><br></pre></td></tr></table></figure>

<h2 id="应用到车辆运动中"><a href="#应用到车辆运动中" class="headerlink" title="应用到车辆运动中"></a>应用到车辆运动中</h2><p>仍然以简化的方式来展示Dynamic Programming的应用。如下图所示，红色是车辆的当前位置，蓝色是车辆的目标姿态。假设车辆的运动角度$\theta$只有四个选择{Up, Down, Left, Right}， 车辆的运动只有三个选择: 左转、直行、右转。</p>
<p><img src="/2020/10/30/%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92dynamic-programming%E5%85%A5%E9%97%A8/dp_sample_1.png"></p>
<p>我们首先构建地图信息：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 0 = navigable space</span></span><br><span class="line"><span class="comment"># 1 = unnavigable space </span></span><br><span class="line">grid = [[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]]</span><br></pre></td></tr></table></figure>

<p>给定车辆的起始位置、结束位置和车辆的运动约束：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">init = [<span class="number">4</span>, <span class="number">3</span>, <span class="number">0</span>] <span class="comment"># given in the form [row,col,direction]</span></span><br><span class="line"><span class="comment"># direction = 0: up</span></span><br><span class="line"><span class="comment">#             1: left</span></span><br><span class="line"><span class="comment">#             2: down</span></span><br><span class="line"><span class="comment">#             3: right</span></span><br><span class="line">                </span><br><span class="line">goal = [<span class="number">2</span>, <span class="number">0</span>] <span class="comment"># given in the form [row,col]</span></span><br><span class="line"></span><br><span class="line">forward = [[-<span class="number">1</span>,  <span class="number">0</span>], <span class="comment"># go up</span></span><br><span class="line">           [ <span class="number">0</span>, -<span class="number">1</span>], <span class="comment"># go left</span></span><br><span class="line">           [ <span class="number">1</span>,  <span class="number">0</span>], <span class="comment"># go down</span></span><br><span class="line">           [ <span class="number">0</span>,  <span class="number">1</span>]] <span class="comment"># go right</span></span><br><span class="line">forward_name = [<span class="string">&#x27;up&#x27;</span>, <span class="string">&#x27;left&#x27;</span>, <span class="string">&#x27;down&#x27;</span>, <span class="string">&#x27;right&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># action has 3 values: right turn, no turn, left turn</span></span><br><span class="line">action = [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">action_name = [<span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;L&#x27;</span>]</span><br><span class="line"></span><br><span class="line">cost = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>] <span class="comment"># cost has 3 values, corresponding to making a right turn, no turn, and a left turn</span></span><br></pre></td></tr></table></figure>

<p>基于Dynamic Programming计算从起点到终点的车辆运动路径。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">optimum_policy2D</span>(<span class="params">grid,init,goal,cost</span>):</span></span><br><span class="line">    value = [[[<span class="number">999</span> <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(grid[<span class="number">0</span>]))] <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(grid))],</span><br><span class="line">             [[<span class="number">999</span> <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(grid[<span class="number">0</span>]))] <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(grid))],</span><br><span class="line">             [[<span class="number">999</span> <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(grid[<span class="number">0</span>]))] <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(grid))],</span><br><span class="line">             [[<span class="number">999</span> <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(grid[<span class="number">0</span>]))] <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(grid))]]</span><br><span class="line">             </span><br><span class="line">    policy = [[[<span class="string">&#x27; &#x27;</span> <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(grid[<span class="number">0</span>]))] <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(grid))],</span><br><span class="line">             [[<span class="string">&#x27; &#x27;</span> <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(grid[<span class="number">0</span>]))] <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(grid))],</span><br><span class="line">             [[<span class="string">&#x27; &#x27;</span> <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(grid[<span class="number">0</span>]))] <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(grid))],</span><br><span class="line">             [[<span class="string">&#x27; &#x27;</span> <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(grid[<span class="number">0</span>]))] <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(grid))]]</span><br><span class="line">             </span><br><span class="line">    policy2D = [[<span class="string">&#x27; &#x27;</span> <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(grid[<span class="number">0</span>]))] <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(grid))]</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    change = <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> change:</span><br><span class="line">        change = <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(grid)):</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(grid[<span class="number">0</span>])):</span><br><span class="line">                <span class="keyword">for</span> orientation <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                    <span class="keyword">if</span> goal[<span class="number">0</span>] == x <span class="keyword">and</span> goal[<span class="number">1</span>] == y:</span><br><span class="line">                        <span class="keyword">if</span> value[orientation][x][y] &gt; <span class="number">0</span>:</span><br><span class="line">                            value[orientation][x][y] = <span class="number">0</span></span><br><span class="line">                            policy[orientation][x][y] = <span class="string">&#x27;*&#x27;</span></span><br><span class="line">                            change = <span class="literal">True</span></span><br><span class="line">                        </span><br><span class="line">                    <span class="keyword">elif</span> grid[x][y] == <span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                            o2 = (orientation + action[i]) % <span class="number">4</span></span><br><span class="line">                            x2 = x + forward[o2][<span class="number">0</span>]</span><br><span class="line">                            y2 = y + forward[o2][<span class="number">1</span>]</span><br><span class="line">                            </span><br><span class="line">                            <span class="keyword">if</span> x2 &gt;= <span class="number">0</span> <span class="keyword">and</span> x2 &lt; <span class="built_in">len</span>(grid) <span class="keyword">and</span> y2 &gt;= <span class="number">0</span> <span class="keyword">and</span> y2 &lt; <span class="built_in">len</span>(grid[<span class="number">0</span>]) <span class="keyword">and</span> grid[x2][y2] == <span class="number">0</span>:</span><br><span class="line">                                v2 = value[o2][x2][y2] + cost[i]</span><br><span class="line">                                </span><br><span class="line">                                <span class="keyword">if</span> v2 &lt; value[orientation][x][y]:</span><br><span class="line">                                    value[orientation][x][y] = v2</span><br><span class="line">                                    policy[orientation][x][y] = action_name[i]</span><br><span class="line">                                    change = <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    x = init[<span class="number">0</span>]</span><br><span class="line">    y = init[<span class="number">1</span>]</span><br><span class="line">    orientation = init[<span class="number">2</span>]</span><br><span class="line">    </span><br><span class="line">    policy2D[x][y] = policy[orientation][x][y]</span><br><span class="line">    <span class="keyword">while</span> policy[orientation][x][y] != <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> policy[orientation][x][y] == <span class="string">&#x27;#&#x27;</span>:</span><br><span class="line">            o2 = orientation</span><br><span class="line">        <span class="keyword">elif</span> policy[orientation][x][y] == <span class="string">&#x27;R&#x27;</span>:</span><br><span class="line">            o2 = (orientation - <span class="number">1</span>) % <span class="number">4</span></span><br><span class="line">        <span class="keyword">elif</span> policy[orientation][x][y] == <span class="string">&#x27;L&#x27;</span>:</span><br><span class="line">            o2 = (orientation + <span class="number">1</span>) % <span class="number">4</span></span><br><span class="line">            </span><br><span class="line">        x = x + forward[o2][<span class="number">0</span>]</span><br><span class="line">        y = y + forward[o2][<span class="number">1</span>]</span><br><span class="line">        orientation = o2</span><br><span class="line">        </span><br><span class="line">        policy2D[x][y] = policy[orientation][x][y]</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">return</span> policy2D</span><br></pre></td></tr></table></figure>

<p>最终输出的路径结果如下:</p>
<p>[[‘ ‘, ‘ ‘, ‘ ‘, ‘R’, ‘#’, ‘R’],<br> [‘ ‘, ‘ ‘, ‘ ‘, ‘#’, ‘ ‘, ‘#’],<br> [‘*’, ‘#’, ‘#’, ‘#’, ‘#’, ‘R’],<br> [‘ ‘, ‘ ‘, ‘ ‘, ‘#’, ‘ ‘, ‘ ‘],<br> [‘ ‘, ‘ ‘, ‘ ‘, ‘#’, ‘ ‘, ‘ ‘]]</p>
<p>在上面的实现中，我们将左转的Cost设置为20，比较高的左转代价使得车辆更倾向于直行和右转，所以规划路径的效果如下：</p>
<p><img src="/2020/10/30/%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92dynamic-programming%E5%85%A5%E9%97%A8/dp_sample_2.jpg"></p>
<p>我们将将左转的Cost降低到2，看看会发生什么效果？</p>
<p>[[‘ ‘, ‘ ‘, ‘ ‘, ‘ ‘, ‘ ‘, ‘ ‘],<br> [‘ ‘, ‘ ‘, ‘ ‘, ‘ ‘, ‘ ‘, ‘ ‘],<br> [‘*’, ‘#’, ‘#’, ‘L’, ‘ ‘, ‘ ‘],<br> [‘ ‘, ‘ ‘, ‘ ‘, ‘#’, ‘ ‘, ‘ ‘],<br> [‘ ‘, ‘ ‘, ‘ ‘, ‘#’, ‘ ‘, ‘ ‘]]</p>
<p>可以看到，路径规划在路口位置选择了左转，规划效果如下：</p>
<p><img src="/2020/10/30/%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92dynamic-programming%E5%85%A5%E9%97%A8/dp_sample_3.jpg"></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>本文内容源自Udacity的免费课程：Dynamic Programming - Artificial Intelligence for Robotics<br>Youtube链接: <a href="https://www.youtube.com/watch?v=r2bPY2s9wII&amp;t=12s">https://www.youtube.com/watch?v=r2bPY2s9wII&amp;t=12s</a></p>
]]></content>
      <categories>
        <category>自动驾驶</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>动态规划</tag>
        <tag>机器人</tag>
        <tag>自动驾驶运动规划</tag>
        <tag>运动规划</tag>
      </tags>
  </entry>
  <entry>
    <title>自动驾驶Mapping-占位栅格图(Occupancy Grid Map)</title>
    <url>/2020/02/01/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6mapping-%E5%8D%A0%E4%BD%8D%E6%A0%85%E6%A0%BC%E5%9B%BEoccupancy-grid-map/</url>
    <content><![CDATA[<p>前面文章《自动驾驶运动规划(Motion Planning)》中提到可以使用占位图(Occupancy Grid Map)表示自动驾驶行驶区域的哪些区域被障碍物(如静止的车辆、路中间的石墩子、树木、路肩等)占用，Motion Planning模块会通过查询占位地图避开这些道路障碍物，避免与它们碰撞，从而达到安全驾驶的目的。</p>
<h1 id="占位栅格地图-Occupancy-Grid-Map"><a href="#占位栅格地图-Occupancy-Grid-Map" class="headerlink" title="占位栅格地图(Occupancy Grid Map)"></a>占位栅格地图(Occupancy Grid Map)</h1><p><img src="/2020/02/01/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6mapping-%E5%8D%A0%E4%BD%8D%E6%A0%85%E6%A0%BC%E5%9B%BEoccupancy-grid-map/Screenshot-from-2020-01-31-10-43-36-1024x604.png"></p>
<span id="more"></span>

<p>如上图所示，将车辆行驶道路环境用网格(Cell)切分，并且每个网格(Cell)用二值数值0和1填充，0表示该网格(Cell)被占用，1表示该网格(Cell)没有被占用。</p>
<p>$m^{i} \in \{0, 1\}$</p>
<p>由此，可以得到如下所示的一张栅格占位地图。</p>
<p><img src="/2020/02/01/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6mapping-%E5%8D%A0%E4%BD%8D%E6%A0%85%E6%A0%BC%E5%9B%BEoccupancy-grid-map/Screenshot-from-2020-01-31-10-54-24-1024x607.png"></p>
<p>要制作理想的占位栅格地图必须满足的以下几个假设条件：</p>
<p>1）占位栅格地图是对道路行驶区域中的静态环境(Static Environment)的描述。也就意味着，我们在制图前必须将地面、动态物体(车辆、行人等)从传感器数据中移除掉；</p>
<p>2）每个网格(Cell)与其它的所有网格的状态是相互独立的，即它的状态不受周围其它网格状态的影响；</p>
<p>3）在每个时刻，车辆的位置是精确的、已知的。</p>
<h1 id="概率占位栅格地图-Probabilistic-Occupancy-Grid-Map"><a href="#概率占位栅格地图-Probabilistic-Occupancy-Grid-Map" class="headerlink" title="概率占位栅格地图(Probabilistic Occupancy Grid Map)"></a>概率占位栅格地图(Probabilistic Occupancy Grid Map)</h1><p>在实际的应用中，车辆传感器的数据测量是存在误差的，车辆的定位结果也是存在误差的，动态障碍物的识别也是存在误差的，因此用概率表示一个网格(Cell)被占用的可能性是一个更加可行的方案。每个网格存储一个[0, 1]之间的概率值，这个值越大，表示网格被占用的可能性越大；这个值越小，表示网格被占用的可能性越小。</p>
<p><img src="/2020/02/01/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6mapping-%E5%8D%A0%E4%BD%8D%E6%A0%85%E6%A0%BC%E5%9B%BEoccupancy-grid-map/Screenshot-from-2020-01-31-11-32-38.png"></p>
<h1 id="概率占位栅格图-Probabilistic-Occupancy-Grid-Map-制图"><a href="#概率占位栅格图-Probabilistic-Occupancy-Grid-Map-制图" class="headerlink" title="概率占位栅格图(Probabilistic Occupancy Grid Map)制图"></a>概率占位栅格图(Probabilistic Occupancy Grid Map)制图</h1><p>栅格地图的每个Cell的概率值计算公式如下：</p>
<p>$bel_t(m^i) = p(m^i (y, x)_{1:t})$</p>
<p>其中$(y, x)_{1:t}$是1到t时刻的车辆位置和传感器测量结果，通过历史信息的累计，可以提升制作的地图的准确性。</p>
<p>如何将1到t时刻的所有传感器测量结果融合起来呢？贝叶斯理论(Bayes Theorem)是一个不错的选择。</p>
<p>$bel_t(m^i) = \eta p(y_t m^i) bel_{t-1}(m^i)$</p>
<p>其中$\eta$是归一化参数, $p(y_t m^i)$是传感器的测量模型。通过贝叶斯理论(Bayes Theorem)将多次传感器测量结果融合到同一个Cell中，从而获得高可信度的网格占用概率。</p>
<h2 id="贝叶斯理论-Bayes-Theorem-更新存在的问题"><a href="#贝叶斯理论-Bayes-Theorem-更新存在的问题" class="headerlink" title="贝叶斯理论(Bayes Theorem)更新存在的问题"></a>贝叶斯理论(Bayes Theorem)更新存在的问题</h2><p><img src="/2020/02/01/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6mapping-%E5%8D%A0%E4%BD%8D%E6%A0%85%E6%A0%BC%E5%9B%BEoccupancy-grid-map/Screenshot-from-2020-01-31-18-37-34.png"></p>
<p>重复的浮点数乘法运算导致计算结果的数值变得很小而难以精确表达和运算。Logit函数可以把自变量从(0,1)连续单调地映射到正负无穷。logit函数的定义如下：</p>
<p>$f(x) = log {\frac{x}{1 - x}}$</p>
<p><img src="/2020/02/01/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6mapping-%E5%8D%A0%E4%BD%8D%E6%A0%85%E6%A0%BC%E5%9B%BEoccupancy-grid-map/20180901104349204.png"></p>
<p>所以我们使用Logit函数替代标准的Bayes更新过程。</p>
<h2 id="贝叶斯更新过程的推导"><a href="#贝叶斯更新过程的推导" class="headerlink" title="贝叶斯更新过程的推导"></a>贝叶斯更新过程的推导</h2><p>贝叶斯理论(Bayes Theorem)更新网格(Cell)占用概率的公式如下：</p>
<p>$<br>p\left(m^{i} y_{1: t}\right)=\frac{p\left(y_{t} y_{1: t-1}, m^{i}\right) p\left(m^{i} y_{1: t-1}\right)}{p\left(y_{t} y_{1: t-1}\right)} \tag{1}<br>$</p>
<p>根据一阶马尔科夫(Markov Assumption)假设，t时刻的状态只与t-1时刻的状态有关，因此公式(1)可写为如下形式：</p>
<p>$<br>p\left(m^{i} y_{1: t}\right)=\frac{p\left(y_{t} m^{i}\right) p\left(m^{i} y_{1: t-1}\right)}{p\left(y_{t} y_{1: t-1}\right)} \tag{2}<br>$</p>
<p>对测量模型应用贝叶斯(Bayes Theorem)更新过程：</p>
<p>$<br>p\left(y_{t} m^{i}\right)=\frac{p\left(m^{i} y_{t}\right) p\left(y_{t}\right)}{p\left(m^{i}\right)} \tag{3}<br>$</p>
<p>将公式3)代入公式2)，可得：</p>
<p>$<br>p\left(m^{i} y_{1: t}\right)=\frac{p\left(m^{i} y_{t}\right) p\left(y_{t}\right) p\left(m^{i} y_{1: t-1}\right)}{p\left(m^{i}\right) p\left(y_{t} y_{1: t-1}\right)} \tag{4}<br>$</p>
<p>然后计算1-p的值：</p>
<p>$<br>p\left(\neg m^{i} y_{1: t}\right)=1-p\left(m^{i} y_{1: t}\right)=\frac{p\left(\neg m^{i} y_{t}\right) p\left(y_{t}\right) p\left(m^{i} y_{1: t-1}\right)}{p\left(\neg m^{i}\right) p\left(y_{t} y_{1: t-1}\right)} \tag{5}<br>$</p>
<p>将p和1-p代入logit函数：</p>
<p>$<br>\operatorname{logit}(p)=\log \left(\frac{p}{1-p}\right)<br>$</p>
<p>$<br>\begin{aligned}<br>\quad \frac{p\left(m^{i} y_{1: t}\right)}{p\left(\neg m^{i} y_{1: t}\right)} &amp; =\frac{\frac{p\left(m^{i} y_{t}\right) p\left(y_{t}\right) p\left(m^{i} y_{1: t-1}\right)}{p\left(m^{i}\right) p\left(y_{t}\right) p\left(m^{i} y_{1: t-1}\right)}}{\frac{p\left(\neg m^{i} y_{t}\right) p\left(y_{t}\right) p\left(m^{i} y_{1: t-1}\right)}{p\left(\neg m^{i}\right) p\left(y_{t} y_{1: t-1}\right)}} \\<br>&amp;=\frac{p\left(m^{i} y_{t}\right) p\left(\neg m^{i}\right) p\left(m^{i} y_{1: t-1}\right)}{p\left(\neg m^{i} y_{t}\right) p\left(m^{i}\right) p\left(\neg m^{i} y_{1: t-1}\right)} \\<br>&amp;=\frac{p\left(m^{i} y_{t}\right)\left(1-p\left(m^{i}\right)\right) p\left(m^{i} y_{1: t-1}\right)}{\left(1-p\left(m^{i} y_{t}\right)\right) p\left(m^{i}\right)\left(1-p\left(m^{i} y_{1: t-1}\right)\right)}<br>\end{aligned} \tag{6}<br>$</p>
<p>对公式6）等号两侧取log，进行整理后，得到：</p>
<p>$<br>\operatorname{logit}\left(p\left(m^{i} y_{1: t}\right)\right)=\operatorname{logit}\left(p\left(m^{i} y_{t}\right)\right)+\operatorname{logit}\left(p\left(m^{i} y_{1: t-1}\right)\right)-\operatorname{logit}\left(p\left(m^{i}\right)\right)<br>$</p>
<p>于是得到<strong>Bayes更新递推公式</strong>：</p>
<p>$<br>l_{t, i}=\operatorname{logit}\left(p\left(m^{i} y_{t}\right)\right)+l_{t-1, i}-l_{0, i}<br>$</p>
<p>其中: $\operatorname{logit}\left(p\left(m^{i} y_{t}\right)\right)$是Inverse Measurement Model，$l_{t-1, i}$是网格i在t-1时刻的置信度(belif)，$l_{0,i}$是Initial belief。</p>
<p>可以看到，该递推公式应用的关键是Inverse Measurement Model：$p\left(m^{i} y_{t}\right))$，如何计算该值呢？</p>
<h2 id="Inverse-Measurement-Model"><a href="#Inverse-Measurement-Model" class="headerlink" title="Inverse Measurement Model"></a>Inverse Measurement Model</h2><p>占位栅格地图的传感器测量模型为：$p(y_t m^{i})$，表示基于已有的地图Cell概率，叠加传感器测量结果，得到新的占位概率值。</p>
<p>而现在我们要求解的是：$p(m^{i} y_t)$，这也是为什么该公式被成为Inverse Measurement Model的原因。</p>
<p>下面来看看Inverse Measurement Model如何计算？下面以二维激光雷达扫描模型来说明(注意：实际应用的激光雷达是3D的，这里用2D Lidar是为了简化模型，所用理论可以很好推广到3D模型)。</p>
<p><strong>2D Lidar模型</strong></p>
<p>它在2D平面上进行扫描，包含两个参数：Scanner bearing和Scanner rangers。Scanner bearing均匀的分布在[$-{\phi_{max}}^s, {\phi_{max}}^s$]之间，一般的我们可以认为它们均匀分布在360度的各个方向上。Scanner rangers是从Lidar中心到障碍物的距离，Lidar发出激光、接收回波，从而计算出到周围障碍物的距离；为了简化期间，我们也假设Lidar发送激光后立即收到回波，不存在时间延迟。</p>
<p><img src="/2020/02/01/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6mapping-%E5%8D%A0%E4%BD%8D%E6%A0%85%E6%A0%BC%E5%9B%BEoccupancy-grid-map/Screenshot-from-2020-02-01-12-06-50-1024x362.png"></p>
<p><strong>Map坐标系&amp;Vehicle坐标系&amp;传感器坐标系</strong></p>
<p>数学模型构建过程中<strong>坐标系</strong>是不可或缺的。这里主要涉及到三个坐标系：Map坐标系、Vehicle坐标系以及传感器坐标系。2D Lidar的测量结果都是相对于自身传感器中心的，即以2D Lidar中心为坐标原点；所有的测量结果最终都要转换到Map坐标系，完成地图制作的计算。</p>
<p>假设2D Lidar在Map坐标系中的姿态为$(x_{1,t}, x_{2,t}, x_{3,t})$，其中$x_{1,t}$和$x_{2,t}$是x和y坐标，$x_{3,t}$是传感器朝向。通过该姿态，可以将2D Lidar测量结果转换到Map坐标系。</p>
<p><img src="/2020/02/01/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6mapping-%E5%8D%A0%E4%BD%8D%E6%A0%85%E6%A0%BC%E5%9B%BEoccupancy-grid-map/Screenshot-from-2020-02-01-12-21-57-1024x755.png"></p>
<p><strong>Lidar测量结果与Map Cell关联匹配</strong></p>
<p>如何将2D Lidar模型与Map Cell关联起来呢？如下图所示，第i个Map Cell用$(r^{i}, {\phi}^i)$表示。</p>
<p><img src="/2020/02/01/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6mapping-%E5%8D%A0%E4%BD%8D%E6%A0%85%E6%A0%BC%E5%9B%BEoccupancy-grid-map/Screenshot-from-2020-02-01-12-38-07-1024x461.png"></p>
<p>然后通过2D Lidar bearing与Map Cell相对于传感器的方位进行最小误差匹配，得到影响当前Map Cell的激光束。</p>
<p>$k = argmin({\phi}_i - {\phi}_i^s)$</p>
<p>匹配的过程如下：首先定义两个值$\alpha$和$\beta$，各个网格Cell的概率计算如下：</p>
<p>1）如果$r^i &gt; {r_{max}}^s$或者$\phi^i - \phi_k^s &gt; \beta /2$， 表示为探测区域，没有信息，这些区域的概率值一般为0.5，表示不确定是否被占用。</p>
<ol>
<li><p>如果$r_k^s &lt; r_{max}^s$并且$r^i - r_k^s &lt; \alpha / 2$，表示该区域大概率被占用，因此要赋予一个大于0.5的概率值。</p>
</li>
<li><p>如果$r^i - r_k^s &gt; \alpha / 2$，这些网格被占用的概率较低，因此要赋予一个小于0.5的概率值。</p>
</li>
</ol>
<p><img src="/creenshot-from-2020-02-01-12-50-41-1024x462.png"></p>
<p>如下图所示，红色区域为高概率被占用区域，灰色区域为未知区域，其余区域为低概率被占用区域。</p>
<p><img src="/2020/02/01/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6mapping-%E5%8D%A0%E4%BD%8D%E6%A0%85%E6%A0%BC%E5%9B%BEoccupancy-grid-map/Screenshot-from-2020-02-01-14-59-27-1024x472.png"></p>
<p>至此，有了Inverse Measurement Model，Bayes更新的过程可以正常进行了。</p>
<p><strong>更高效的Inverse Measurement Model计算方法</strong></p>
<p>采用光线跟踪(Ray Tracing)的Bresenham’s Line Algorithm可以大大减少复杂的浮点数计算，提升计算效率。</p>
<p><img src="/2020/02/01/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6mapping-%E5%8D%A0%E4%BD%8D%E6%A0%85%E6%A0%BC%E5%9B%BEoccupancy-grid-map/Screenshot-from-2020-02-01-15-20-01.png"></p>
<h1 id="移除Lidar中地面和动态物体"><a href="#移除Lidar中地面和动态物体" class="headerlink" title="移除Lidar中地面和动态物体"></a>移除Lidar中地面和动态物体</h1><p>实际应用中的激光雷达(Lidar)是3D的，会扫描到大量的地面点，这些地面点如果不被移除，按照计算匹配模型，会被当做障碍物处理。所以需要将地面点点云数据从激光雷达点云中移除掉。如何移除呢？一种可行的方法是，通过自动化识别算法从Lidar点云中将地面识别并剔除。</p>
<p><img src="/2020/02/01/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6mapping-%E5%8D%A0%E4%BD%8D%E6%A0%85%E6%A0%BC%E5%9B%BEoccupancy-grid-map/Screenshot-from-2020-02-01-15-43-18-1024x652.png"></p>
<p>地面识别的难度是比较高的，因为很多道路路面内外的界限在点云中是不明确的，自动化识别算法会误把道路边界外的区域识别为道路路面，从而导致错误的地图信息等。通过视觉分割算法辅助点云识别可以提升路面的识别率。</p>
<p><img src="/2020/02/01/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6mapping-%E5%8D%A0%E4%BD%8D%E6%A0%85%E6%A0%BC%E5%9B%BEoccupancy-grid-map/Screenshot-from-2020-02-01-15-47-38-1024x511.png"></p>
<p>动态物体(行人、车辆等)也需要从点云数据中移除，这依赖于基于点云和图像的感知技术。但同样也存在很多技术难题，比如如何提升识别的准确率，如何将静止的车辆识别出来等等。</p>
<p><img src="/2020/02/01/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6mapping-%E5%8D%A0%E4%BD%8D%E6%A0%85%E6%A0%BC%E5%9B%BEoccupancy-grid-map/Screenshot-from-2020-02-01-15-48-41.png"></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>本文主要整理自Coursera自动驾驶课程：Motion Planning for Self-Driving Cars第二周课程的学习笔记。</p>
]]></content>
      <categories>
        <category>自动驾驶</category>
      </categories>
      <tags>
        <tag>自动驾驶</tag>
        <tag>概率占位栅格地图</tag>
        <tag>Mapping技术</tag>
        <tag>占位栅格地图</tag>
        <tag>自动驾驶Mapping</tag>
      </tags>
  </entry>
  <entry>
    <title>自动驾驶中的PID控制算法</title>
    <url>/2020/10/02/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E4%B8%AD%E7%9A%84pid%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>PID控制算法是一个在工业控制应用中常见的反馈回路算法，它把收集到的数据和一个参考值进行比较，然后把这个差别用于计算新的输入值，从而使得整个系统更加准确而稳定。</p>
<p>PID控制算法由比例单元(Proportional)、积分单元(Integral)和微分单元(Derivative)三部分组成，通过这三个单元的增益${\displaystyle K_{p}}$，${\displaystyle K_{i}}$和${\displaystyle K_{d}}$来达到理想的控制效果。</p>
<p>PID主要适用于基本上线性，且动态特性不随时间变化的系统。</p>
<p><img src="/2020/10/02/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E4%B8%AD%E7%9A%84pid%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95/9e82d77f-d8f5-4d96-87d4-a9a66f0b3575-1024x471.png" alt="图片来源【1】"></p>
<span id="more"></span>

<p>下面我们主要了解PID控制算法的细节及其在机器人/自动驾驶领域的应用。在机器人/自动驾驶领域，一个常见的任务就是使得机器人/自动驾驶车辆移动到目标轨迹上。如下图所示，车辆以速度v前进，我们的目标是让其沿着Reference Trajectory行驶。Crosstrack Error是目标偏差，PID的目标就是不断缩小该偏差，使其无限接近于0。</p>
<p><img src="/2020/10/02/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E4%B8%AD%E7%9A%84pid%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95/3ca5ab3d-e0e3-42f6-8579-dfb26e23d188-1024x288.png" alt="图片来源【2】"></p>
<h1 id="车辆模型"><a href="#车辆模型" class="headerlink" title="车辆模型"></a>车辆模型</h1><p>为了解决上述问题，需要先定义一个车辆模型，用以描述车辆的属性和运动特性。(代码来自Udacity的免费课程Artificial Intelligence for Robotics【2】)。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">robot</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, length=<span class="number">20.0</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Creates robot and initializes location/orientation to 0, 0, 0.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.x = <span class="number">0.0</span></span><br><span class="line">        self.y = <span class="number">0.0</span></span><br><span class="line">        self.orientation = <span class="number">0.0</span></span><br><span class="line">        self.length = length</span><br><span class="line">        self.steering_noise = <span class="number">0.0</span></span><br><span class="line">        self.distance_noise = <span class="number">0.0</span></span><br><span class="line">        self.steering_drift = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set</span>(<span class="params">self, x, y, orientation</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Sets a robot coordinate.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line">        self.orientation = orientation % (<span class="number">2.0</span> * np.pi)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_noise</span>(<span class="params">self, steering_noise, distance_noise</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Sets the noise parameters.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># makes it possible to change the noise parameters</span></span><br><span class="line">        <span class="comment"># this is often useful in particle filters</span></span><br><span class="line">        self.steering_noise = steering_noise</span><br><span class="line">        self.distance_noise = distance_noise</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_steering_drift</span>(<span class="params">self, drift</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Sets the systematical steering drift parameter</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.steering_drift = drift</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span>(<span class="params">self, steering, distance, tolerance=<span class="number">0.001</span>, max_steering_angle=np.pi / <span class="number">4.0</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        steering = front wheel steering angle, limited by max_steering_angle</span></span><br><span class="line"><span class="string">        distance = total distance driven, most be non-negative</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> steering &gt; max_steering_angle:</span><br><span class="line">            steering = max_steering_angle</span><br><span class="line">        <span class="keyword">if</span> steering &lt; -max_steering_angle:</span><br><span class="line">            steering = -max_steering_angle</span><br><span class="line">        <span class="keyword">if</span> distance &lt; <span class="number">0.0</span>:</span><br><span class="line">            distance = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># apply noise</span></span><br><span class="line">        steering2 = random.gauss(steering, self.steering_noise)</span><br><span class="line">        distance2 = random.gauss(distance, self.distance_noise)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># apply steering drift</span></span><br><span class="line">        steering2 += self.steering_drift</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Execute motion</span></span><br><span class="line">        turn = np.tan(steering2) * distance2 / self.length</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">abs</span>(turn) &lt; tolerance:</span><br><span class="line">            <span class="comment"># approximate by straight line motion</span></span><br><span class="line">            self.x += distance2 * np.cos(self.orientation)</span><br><span class="line">            self.y += distance2 * np.sin(self.orientation)</span><br><span class="line">            self.orientation = (self.orientation + turn) % (<span class="number">2.0</span> * np.pi)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># approximate bicycle model for motion</span></span><br><span class="line">            radius = distance2 / turn</span><br><span class="line">            cx = self.x - (np.sin(self.orientation) * radius)</span><br><span class="line">            cy = self.y + (np.cos(self.orientation) * radius)</span><br><span class="line">            self.orientation = (self.orientation + turn) % (<span class="number">2.0</span> * np.pi)</span><br><span class="line">            self.x = cx + (np.sin(self.orientation) * radius)</span><br><span class="line">            self.y = cy - (np.cos(self.orientation) * radius)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;[x=%.5f y=%.5f orient=%.5f]&#x27;</span> % (self.x, self.y, self.orientation)</span><br></pre></td></tr></table></figure>

<h1 id="Proportional-Control"><a href="#Proportional-Control" class="headerlink" title="Proportional Control"></a>Proportional Control</h1><p>Proportional Control考虑当前偏差，偏差越大就让车辆越快的向中心线靠拢。</p>
<p>$$\alpha = \tau \cdot \text{CTE}$$</p>
<p>上式中，$\alpha$是车辆的Steering Angle，$\tau$是增益系数，$\text{CTE}$是Cross Track Error。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">param</span>):</span></span><br><span class="line">    myrobot = robot()</span><br><span class="line">    myrobot.<span class="built_in">set</span>(<span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>)</span><br><span class="line">    speed = <span class="number">1.0</span> <span class="comment"># motion distance is equalt to speed (we assume time = 1)</span></span><br><span class="line">    N = <span class="number">100</span> </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">        crosstrack_error = myrobot.y</span><br><span class="line">        steer = -param * crosstrack_error</span><br><span class="line">        myrobot.move(steer, speed)</span><br><span class="line"></span><br><span class="line">run(<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure>

<p>仅对车辆施加Proportional Control的车辆运动效果如下(绿色的是车辆运动轨迹，红色是目标轨迹):</p>
<p><img src="/2020/10/02/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E4%B8%AD%E7%9A%84pid%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95/0f3d6a29-e910-44b8-bf97-f0e7f5331d54-1024x379.png"></p>
<p>做一个动图，看起来更加直观。可以看到，车辆发生了overshoot的问题，沿着目标轨迹上下震荡，始终不能做到稳定的沿着目标轨迹运动。</p>
<p><img src="/2020/10/02/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E4%B8%AD%E7%9A%84pid%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95/b5feb663-9974-4485-931a-adef0864b6af.gif"></p>
<p>我们调大增益系数，从$\tau = 0.1$到$\tau = 0.3$，观察到车辆震荡的频率更高了。</p>
<p><img src="/2020/10/02/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E4%B8%AD%E7%9A%84pid%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95/1d519af5-915b-4665-964a-7164f81e2323-1024x391.png"></p>
<h1 id="P-amp-D-Control"><a href="#P-amp-D-Control" class="headerlink" title="P&amp;D Control"></a>P&amp;D Control</h1><p>为了解决OverShoot引起的震荡问题，引入Derivative Control。 Derivative Control考虑CTE的变化，并根据变化反方向校正Steering Angle，使得车辆可以平滑的靠近目标轨迹。</p>
<p>$$ \alpha = -\tau_p \cdot \text{CTE} - \tau_d \cdot \frac{d}{dt} \text{CTE} $$</p>
<p>代码实现:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">robot = Robot()</span><br><span class="line">robot.<span class="built_in">set</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">robot, tau_p, tau_d, n=<span class="number">150</span>, speed=<span class="number">1.0</span></span>):</span></span><br><span class="line">    x_trajectory = []</span><br><span class="line">    y_trajectory = []</span><br><span class="line"></span><br><span class="line">    crosstrack_error = robot.y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        diff_crosstrack_error = robot.y - crosstrack_error</span><br><span class="line">        steer = -tau_p * crosstrack_error - tau_d * diff_crosstrack_error </span><br><span class="line">        crosstrack_error = robot.y</span><br><span class="line">        robot.move(steer, speed)</span><br><span class="line"></span><br><span class="line">        x_trajectory.append(robot.x)</span><br><span class="line">        y_trajectory.append(robot.y)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x_trajectory, y_trajectory</span><br><span class="line"></span><br><span class="line">x_trajectory, y_trajectory = run(robot, <span class="number">0.3</span>, <span class="number">3.0</span>)</span><br><span class="line">n = <span class="built_in">len</span>(x_trajectory)</span><br><span class="line"></span><br><span class="line">fig, (ax1, ax2) = plt.subplots(<span class="number">2</span>, <span class="number">1</span>, figsize=(<span class="number">8</span>, <span class="number">8</span>))</span><br><span class="line">ax1.plot(x_trajectory, np.zeros(n), <span class="string">&#x27;r&#x27;</span>, label=<span class="string">&#x27;reference&#x27;</span>)</span><br><span class="line">ax1.plot(x_trajectory, y_trajectory, <span class="string">&#x27;g&#x27;</span>, label=<span class="string">&#x27;PD controller&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p>当$\tau_p = 0.1, \tau_d = 3.0$时的效果：</p>
<p><img src="/2020/10/02/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E4%B8%AD%E7%9A%84pid%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95/bd159693-a2e1-47ee-95fa-a2deaf4ebec0-1024x386.png"></p>
<p>当$\tau_p = 0.2, \tau_d = 3.0$时的效果：</p>
<p><img src="/2020/10/02/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E4%B8%AD%E7%9A%84pid%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95/e68b1903-9b5b-4ef9-8a9c-0b8db66f0417-1024x392.png"></p>
<p>当$\tau_p = 0.3, \tau_d = 3.0$时的效果：</p>
<p><img src="/2020/10/02/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E4%B8%AD%E7%9A%84pid%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95/ca441fc0-409f-4077-9a52-8ce83e2db793-1024x392.png"></p>
<p>看起来已经很完美了，但是实际还存在一个系统偏差(Systematic Bias)的问题。如下图所示，控制指令要求车辆转向为0度，但实际上它转了0.5度，这种误差对于人类司机来讲，会自动校正；但是对于自动驾驶系统，需要消除这种误差。</p>
<p><img src="/2020/10/02/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E4%B8%AD%E7%9A%84pid%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95/03564ae0-2b25-43dd-b29c-984d9c4d8f47.png" alt="图片来源【2】"></p>
<p>给Robot增加一个drift：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">robot.set_steering_drift(<span class="number">10.0</span> * math.pi / <span class="number">180.0</span>)</span><br></pre></td></tr></table></figure>

<p>可以看到由于系统误差的存在，导致最终车辆稳定在一个非目标位置。</p>
<p><img src="/2020/10/02/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E4%B8%AD%E7%9A%84pid%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95/efb4e82f-9c1f-4102-ac8d-448c8b258de4-1024x390.png" alt="图片来源【2】"></p>
<h1 id="PID-Control"><a href="#PID-Control" class="headerlink" title="PID Control"></a>PID Control</h1><p>如何解决系统偏差导致的目标偏差的问题？直观的感觉是，需要向右打方向盘，校正车辆的行驶方向，使得车辆不断靠近目标轨迹。这就是Integral Control的效果。</p>
<p><img src="/2020/10/02/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E4%B8%AD%E7%9A%84pid%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95/63a96606-6f1b-4338-a5be-9e6735da7ad6-1024x469.png"></p>
<p>$$ \alpha = -\tau_p \cdot \text{CTE} - \tau_d \cdot \frac{d}{dt} \text{CTE} - \tau_i \text{CTE} $$</p>
<p>代码实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">robot = Robot()</span><br><span class="line">robot.<span class="built_in">set</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">robot.set_steering_drift(<span class="number">10.0</span> * math.pi / <span class="number">180.0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">robot, tau_p, tau_d, tau_i, n=<span class="number">200</span>, speed=<span class="number">1.0</span></span>):</span></span><br><span class="line">    x_trajectory = []</span><br><span class="line">    y_trajectory = []</span><br><span class="line"></span><br><span class="line">    int_crosstrack_error = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    crosstrack_error = robot.y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        diff_crosstrack_error = robot.y - crosstrack_error</span><br><span class="line"></span><br><span class="line">        crosstrack_error = robot.y</span><br><span class="line">        int_crosstrack_error += crosstrack_error</span><br><span class="line"></span><br><span class="line">        steer = -tau_p * crosstrack_error - tau_d * diff_crosstrack_error -tau_i * int_crosstrack_error</span><br><span class="line"></span><br><span class="line">        robot.move(steer, speed)</span><br><span class="line"></span><br><span class="line">        x_trajectory.append(robot.x)</span><br><span class="line">        y_trajectory.append(robot.y)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x_trajectory, y_trajectory</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x_trajectory, y_trajectory = run(robot, <span class="number">0.2</span>, <span class="number">3.0</span>, <span class="number">0.004</span>)</span><br><span class="line">n = <span class="built_in">len</span>(x_trajectory)</span><br><span class="line"></span><br><span class="line">plt.plot(x_trajectory, y_trajectory, <span class="string">&#x27;g&#x27;</span>, label=<span class="string">&#x27;PID controller&#x27;</span>)</span><br><span class="line">plt.plot(x_trajectory, np.zeros(n), <span class="string">&#x27;r&#x27;</span>, label=<span class="string">&#x27;reference&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p>实际效果如下:</p>
<p><img src="/2020/10/02/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E4%B8%AD%E7%9A%84pid%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95/0a6aee53-4c06-490f-9dfe-ee3f83fda0d7-1024x765.png"></p>
<p>本文代码均来自：Udacity的Artificial Intelligence for Robotics。</p>
<h1 id="参考材料"><a href="#参考材料" class="headerlink" title="参考材料"></a>参考材料</h1><p>1.<a href="https://zh.wikipedia.org/wiki/PID%E6%8E%A7%E5%88%B6%E5%99%A8">https://zh.wikipedia.org/wiki/PID%E6%8E%A7%E5%88%B6%E5%99%A8</a></p>
<p>2.Udacity的Artificial Intelligence for Robotics</p>
]]></content>
      <categories>
        <category>自动驾驶</category>
      </categories>
      <tags>
        <tag>PID Control</tag>
        <tag>PID控制算法</tag>
        <tag>Proportional Control</tag>
        <tag>Robot Control</tag>
        <tag>机器人控制</tag>
        <tag>自动驾驶控制</tag>
      </tags>
  </entry>
  <entry>
    <title>自动驾驶定位算法-基于多传感器融合的状态估计(muti-Sensors Fusion)</title>
    <url>/2019/12/30/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E5%8D%81%E4%BA%94%E5%9F%BA%E4%BA%8E%E5%A4%9A%E4%BC%A0%E6%84%9F%E5%99%A8%E8%9E%8D%E5%90%88%E7%9A%84%E7%8A%B6%E6%80%81%E4%BC%B0/</url>
    <content><![CDATA[<p><img src="/2019/12/30/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E5%8D%81%E4%BA%94%E5%9F%BA%E4%BA%8E%E5%A4%9A%E4%BC%A0%E6%84%9F%E5%99%A8%E8%9E%8D%E5%90%88%E7%9A%84%E7%8A%B6%E6%80%81%E4%BC%B0/Screenshot-from-2019-12-28-12-29-38-1-1024x470.png" alt="Coursera Lecture -&gt; State Estimation and Localization for Self-Driving Cars -&gt; Multisensor Fusion for State Estimation"></p>
<h1 id="传感器-Sensor-选取"><a href="#传感器-Sensor-选取" class="headerlink" title="传感器(Sensor)选取"></a>传感器(Sensor)选取</h1><p>自动驾驶系统中用于状态估计(State Estimation)的常用传感器包括GPS/GNSS、IMU、激光雷达(Lidar)。</p>
<span id="more"></span>

<p><img src="/2019/12/30/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E5%8D%81%E4%BA%94%E5%9F%BA%E4%BA%8E%E5%A4%9A%E4%BC%A0%E6%84%9F%E5%99%A8%E8%9E%8D%E5%90%88%E7%9A%84%E7%8A%B6%E6%80%81%E4%BC%B0/Screenshot-from-2019-12-28-12-38-59-1024x226.png"></p>
<p>状态估计(State Estimation)选用传感器需要考虑哪些因素：</p>
<p>1）误差不相关性。也就是说，用于Sensor Fusion的传感器其中单个传感器(Sensor Measurement)测量失败，不会导致其它传感器(Sensor)由于相同的原因而同时失败。</p>
<p>2）传感器的相互补充性。 比如IMU可以填充GPS两次定位间隔期间的定位输出，用于平滑GPS/GNSS的定位结果；GPS为IMU提供初值，消除IMU单独使用出现的偏移(Drift)的问题；Lidar可以弥补定位精度的问题，而GNSS可以为Lidar定位地图匹配提供地图范围数据。</p>
<p><img src="/2019/12/30/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E5%8D%81%E4%BA%94%E5%9F%BA%E4%BA%8E%E5%A4%9A%E4%BC%A0%E6%84%9F%E5%99%A8%E8%9E%8D%E5%90%88%E7%9A%84%E7%8A%B6%E6%80%81%E4%BC%B0/Screenshot-from-2019-12-28-13-18-59-1024x482.png" alt="松耦合的系统"></p>
<h1 id="传感器的标定-Sensor-Calibration"><a href="#传感器的标定-Sensor-Calibration" class="headerlink" title="传感器的标定(Sensor Calibration)"></a>传感器的标定(Sensor Calibration)</h1><p>如果想要各个传感器能够相互协同，无间配合，传感器的标定是必不可少的。传感器的标定通常分为三种: 内参标定(Intrinsic Calibration)、外参标定(Extrinsic Calibration)和时间校准(Temporal Calibration)。</p>
<p><img src="/2019/12/30/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E5%8D%81%E4%BA%94%E5%9F%BA%E4%BA%8E%E5%A4%9A%E4%BC%A0%E6%84%9F%E5%99%A8%E8%9E%8D%E5%90%88%E7%9A%84%E7%8A%B6%E6%80%81%E4%BC%B0/Screenshot-from-2019-12-28-17-45-45-1024x285.png"></p>
<h2 id="内参标定-Intrinsic-Calibration"><a href="#内参标定-Intrinsic-Calibration" class="headerlink" title="内参标定(Intrinsic Calibration)"></a>内参标定(Intrinsic Calibration)</h2><p>传感器或者车辆的内参在传感器制造的时候就已经固定下来，传感器模型中的固定参数都是内参，都需要通过Intrinsic Calibration事先确定。</p>
<p><img src="/2019/12/30/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E5%8D%81%E4%BA%94%E5%9F%BA%E4%BA%8E%E5%A4%9A%E4%BC%A0%E6%84%9F%E5%99%A8%E8%9E%8D%E5%90%88%E7%9A%84%E7%8A%B6%E6%80%81%E4%BC%B0/Screenshot-from-2019-12-28-17-57-49-1024x492.png"></p>
<p>比如估计车辆运动距离的轮速计模型$v=r \omega$中，r就一个内参。另外激光雷达(Lidar)中扫描线的角度，在激光雷达计算模型中需要事先知道这个参数，以实现激光雷达扫描线(Scan Line)的拼接。</p>
<p>如何获取传感器的内参呢？实践中有几种方法:</p>
<p>1）从传感器制造商的使用说明书中获取。这种方法往往只能获取大概的参数，每个设备的内参都是不同，所以并不能获取比较精确的参数。</p>
<p>2）手工测量内参。比如车轮的半径，可以通过手工测量的方法获取。但是类似于激光雷达的内参无法通过手工测量获取。</p>
<p>3）Estimate as part of State。这种方式不仅可以获取精确的传感器内参，而且可以解决内参随时间变化的情况。比如汽车的轮胎半径漏气导致半径变小等。</p>
<h2 id="外参标定-Extrinsic-Calibration"><a href="#外参标定-Extrinsic-Calibration" class="headerlink" title="外参标定(Extrinsic Calibration)"></a>外参标定(Extrinsic Calibration)</h2><p>传感器的外参主要表达各个传感器之间的位置相对姿态，它是把各个传感器的数据坐标统一起来的必不可少的参数。</p>
<p><img src="/2019/12/30/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E5%8D%81%E4%BA%94%E5%9F%BA%E4%BA%8E%E5%A4%9A%E4%BC%A0%E6%84%9F%E5%99%A8%E8%9E%8D%E5%90%88%E7%9A%84%E7%8A%B6%E6%80%81%E4%BC%B0/Screenshot-from-2019-12-28-11-28-13.png"></p>
<p>如何获取传感器的外参呢？实践中有几种方法:</p>
<p>1、CAD图纸。如果你能获取传感器安装的CAD图纸，那你就可以获得比较准确的传感器外参。</p>
<p>2、手动测量。当然手动测量的难度也非常高，因为传感器的中心往往在传感器内部，难以精确测量。</p>
<p>3、Estimate as part of State。这也是一个研究的方向。可以比较好的应对外参标定问题，但难度也比较高。</p>
<h2 id="时间校准-Temporal-Calibration"><a href="#时间校准-Temporal-Calibration" class="headerlink" title="时间校准(Temporal Calibration)"></a>时间校准(Temporal Calibration)</h2><p><img src="/2019/12/30/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E5%8D%81%E4%BA%94%E5%9F%BA%E4%BA%8E%E5%A4%9A%E4%BC%A0%E6%84%9F%E5%99%A8%E8%9E%8D%E5%90%88%E7%9A%84%E7%8A%B6%E6%80%81%E4%BC%B0/Screenshot-from-2019-12-28-19-03-16-1024x380.png"></p>
<p>时间校准对于各个传感器的数据融合至关重要。比如IMU的输出频率是200HZ，Lidar的输出频率是20HZ，只有按照最相近的时间进行对齐，才能将IMU和Lidar数据准确融合起来。</p>
<p>在实际应用中，各个传感器的相对时间误差是未知的，这些误差可能是由于各个传感器的预处理耗时不同导致的，也可能是由于各个传感器的计时器精度不同造成的。</p>
<p>如何校准传感器的时间呢？实践中有几种方法:</p>
<p>1）假设这些传感器的时间相对误差为0。当然忽略这些误差，会导致最终的融合结果比预期要差。</p>
<p>2）硬件同步。在硬件设计上保证各个传感器的时间戳对齐。</p>
<h1 id="EKF-多传感器融合-Multi-Sensors-Fusion"><a href="#EKF-多传感器融合-Multi-Sensors-Fusion" class="headerlink" title="EKF-多传感器融合(Multi-Sensors Fusion)"></a>EKF-多传感器融合(Multi-Sensors Fusion)</h1><p>自动驾驶对车辆的状态(Vehicle State)的描述一般包括：位置(Position，一般为三维空间坐标x、y、z)、速度($v_x, v_y, v_z$)、朝向(四元数，x，y，z，w)，它是一个10维向量。</p>
<p>$$<br>x_k =<br>\begin{bmatrix}<br>p_k \\<br>v_k \\<br>q_k \\<br>\end{bmatrix}<br>\in R^{10}<br>$$</p>
<p>自动驾驶汽车一般包含多个Camera、3D 激光雷达(Lidar)、惯性测量单元(IMU)、多个Radar、GPS/GNSS Reciver、轮速计(Wheel Odmetry)，这些传感器在运行过程中时刻都在以不同的频率发送不同类型的数据，多传感器融合模块需要将这些信息融合起来，不断更新自动驾驶车辆的状态(Vehicle State)。多传感器融合进行状态估计(State Estimation)的流程如下：</p>
<p><img src="/2019/12/30/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E5%8D%81%E4%BA%94%E5%9F%BA%E4%BA%8E%E5%A4%9A%E4%BC%A0%E6%84%9F%E5%99%A8%E8%9E%8D%E5%90%88%E7%9A%84%E7%8A%B6%E6%80%81%E4%BC%B0/1_7r_YClMa9KdIYmCWKJTEgA.png"></p>
<p>车辆运动模型(Motion Model Input)如下，它的信息一般来自于IMU，包含x、y、z三个方向上的加速度和角速度，是一个6维向量。</p>
<p>$$<br>u_k =<br>\begin{bmatrix}<br>f_k \\<br>\omega_k \\<br>\end{bmatrix}<br>\in R^6<br>$$</p>
<p>车辆运动模型的计算过程如下:</p>
<p><img src="/2019/12/30/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E5%8D%81%E4%BA%94%E5%9F%BA%E4%BA%8E%E5%A4%9A%E4%BC%A0%E6%84%9F%E5%99%A8%E8%9E%8D%E5%90%88%E7%9A%84%E7%8A%B6%E6%80%81%E4%BC%B0/Screenshot-from-2019-12-28-16-30-17-1024x467.png"></p>
<p>为了应用EKF，我们定义Error State如下，其中$\phi_k$是3x1的矩阵。</p>
<p>$$<br>\delta x_k =<br>\begin{bmatrix}<br>\delta p_k \\<br>\delta v_k \\<br>\delta \phi_k \\<br>\end{bmatrix}<br>\in R^6<br>$$</p>
<p>EKF的Motion Model如下:</p>
<p><img src="/2019/12/30/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E5%8D%81%E4%BA%94%E5%9F%BA%E4%BA%8E%E5%A4%9A%E4%BC%A0%E6%84%9F%E5%99%A8%E8%9E%8D%E5%90%88%E7%9A%84%E7%8A%B6%E6%80%81%E4%BC%B0/Screenshot-from-2019-12-28-23-10-46-1024x473.png"></p>
<p>EKF中的GNSS测量模型:</p>
<p><img src="/2019/12/30/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E5%8D%81%E4%BA%94%E5%9F%BA%E4%BA%8E%E5%A4%9A%E4%BC%A0%E6%84%9F%E5%99%A8%E8%9E%8D%E5%90%88%E7%9A%84%E7%8A%B6%E6%80%81%E4%BC%B0/Screenshot-from-2019-12-28-23-16-04-1024x519.png"></p>
<p>EKF中的Lidar测量模型:</p>
<p><img src="/2019/12/30/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E5%8D%81%E4%BA%94%E5%9F%BA%E4%BA%8E%E5%A4%9A%E4%BC%A0%E6%84%9F%E5%99%A8%E8%9E%8D%E5%90%88%E7%9A%84%E7%8A%B6%E6%80%81%E4%BC%B0/Screenshot-from-2019-12-28-23-16-20-1024x555.png"></p>
<p>这里假设激光雷达(Lidar)的测量结果和GNSS的测量结果都在同一个坐标系下(注意，实际情况下，需要经过坐标变换才能达到这种效果)</p>
<h2 id="EKF的IMU-GNSS-Lidar多传感器融合流程如下"><a href="#EKF的IMU-GNSS-Lidar多传感器融合流程如下" class="headerlink" title="EKF的IMU+GNSS+Lidar多传感器融合流程如下:"></a>EKF的IMU+GNSS+Lidar多传感器融合流程如下:</h2><p>1）Update State With IMU Inputs</p>
<p><img src="/2019/12/30/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E5%8D%81%E4%BA%94%E5%9F%BA%E4%BA%8E%E5%A4%9A%E4%BC%A0%E6%84%9F%E5%99%A8%E8%9E%8D%E5%90%88%E7%9A%84%E7%8A%B6%E6%80%81%E4%BC%B0/Screenshot-from-2019-12-28-23-22-00-1024x591.png" alt="Coursera Lecture -&gt; State Estimation and Localization for Self-Driving Cars -&gt;  Sensor Calibration - A Necessary Evil"></p>
<p>2、Propagate Uncertainty</p>
<p><img src="/2019/12/30/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E5%8D%81%E4%BA%94%E5%9F%BA%E4%BA%8E%E5%A4%9A%E4%BC%A0%E6%84%9F%E5%99%A8%E8%9E%8D%E5%90%88%E7%9A%84%E7%8A%B6%E6%80%81%E4%BC%B0/Screenshot-from-2019-12-28-23-30-02-1024x394.png" alt="Coursera Lecture -&gt; State Estimation and Localization for Self-Driving Cars -&gt;  Sensor Calibration - A Necessary Evil"></p>
<p>3、当有GNSS或者LIDAR测量结果到达时，进入步骤4），否则进入步骤1）。</p>
<p>4、计算GNSS/Lidar的卡尔曼增益(Kalman Gain)。</p>
<p><img src="/2019/12/30/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E5%8D%81%E4%BA%94%E5%9F%BA%E4%BA%8E%E5%A4%9A%E4%BC%A0%E6%84%9F%E5%99%A8%E8%9E%8D%E5%90%88%E7%9A%84%E7%8A%B6%E6%80%81%E4%BC%B0/Screenshot-from-2019-12-28-23-33-50-1024x417.png" alt="Coursera Lecture -&gt; State Estimation and Localization for Self-Driving Cars -&gt;  Sensor Calibration - A Necessary Evil"></p>
<p>4、计算Error State。</p>
<p><img src="/2019/12/30/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E5%8D%81%E4%BA%94%E5%9F%BA%E4%BA%8E%E5%A4%9A%E4%BC%A0%E6%84%9F%E5%99%A8%E8%9E%8D%E5%90%88%E7%9A%84%E7%8A%B6%E6%80%81%E4%BC%B0/Screenshot-from-2019-12-28-23-37-59-1024x362.png" alt="Coursera Lecture -&gt; State Estimation and Localization for Self-Driving Cars -&gt;  Sensor Calibration - A Necessary Evil"></p>
<p>5、Correct Predicted State。</p>
<p><img src="/2019/12/30/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E5%8D%81%E4%BA%94%E5%9F%BA%E4%BA%8E%E5%A4%9A%E4%BC%A0%E6%84%9F%E5%99%A8%E8%9E%8D%E5%90%88%E7%9A%84%E7%8A%B6%E6%80%81%E4%BC%B0/Screenshot-from-2019-12-28-23-41-36-1024x459.png" alt="Coursera Lecture -&gt; State Estimation and Localization for Self-Driving Cars -&gt;  Sensor Calibration - A Necessary Evil"></p>
<p>6、Compute Corrected Covariance。</p>
<p><img src="/2019/12/30/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E5%8D%81%E4%BA%94%E5%9F%BA%E4%BA%8E%E5%A4%9A%E4%BC%A0%E6%84%9F%E5%99%A8%E8%9E%8D%E5%90%88%E7%9A%84%E7%8A%B6%E6%80%81%E4%BC%B0/Screenshot-from-2019-12-28-23-44-46-1024x454.png" alt="Coursera Lecture -&gt; State Estimation and Localization for Self-Driving Cars -&gt;  Sensor Calibration - A Necessary Evil"></p>
<h1 id="状态估计-State-Estimation-的精度需求-Accuracy-Requirements"><a href="#状态估计-State-Estimation-的精度需求-Accuracy-Requirements" class="headerlink" title="状态估计(State Estimation)的精度需求(Accuracy Requirements)"></a>状态估计(State Estimation)的精度需求(Accuracy Requirements)</h1><p>不同的应用场景对State Estimation的精度的要求不同，比如高速场景下的Lane Keeping一般要求亚米级级精度。如下图所示的场景，车辆宽度为1.8m，机动车道宽度为3m，所以车辆两侧有约60cm的冗余空间，在这种场景下，如果要实现Lane Keeping的功能，只要状态估计的精度小于60cm就可以满足实际应用的需求。</p>
<p><img src="/2019/12/30/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E5%8D%81%E4%BA%94%E5%9F%BA%E4%BA%8E%E5%A4%9A%E4%BC%A0%E6%84%9F%E5%99%A8%E8%9E%8D%E5%90%88%E7%9A%84%E7%8A%B6%E6%80%81%E4%BC%B0/Screenshot-from-2019-12-28-12-00-56.png"></p>
<p>但在拥挤的城市道路交通场景下，对State Estimation的精度要求是越高越好，状态估计的精度越高，自动驾驶就越安全。</p>
<h1 id="状态估计-State-Estimation-的更新频率要求"><a href="#状态估计-State-Estimation-的更新频率要求" class="headerlink" title="状态估计(State Estimation)的更新频率要求"></a>状态估计(State Estimation)的更新频率要求</h1><p>以人类驾驶汽车为例，一个人开车过程中闭着眼睛，但为了保证行车安全，她每间隔1s睁开一次眼睛，以确定自己所在的位置。在空旷的道路场景下，1HZ的位置确认频率就可以保证，但是在繁忙的交通的道路上，1s确认一次位置的做法就非常不靠谱了。</p>
<p>但是，越高的定位频率带来的越高的计算资源消耗，而车载计算资源是有限的，并且还是感知、控制、决策、路径规划等所有功能共享的，所以在更新频率和计算资源之间需要有一个trade-off。</p>
<p>根据经验，15HZ-30HZ的状态更新的频率就能够满足自动驾驶的应用需求，当然在计算资源允许的情况下，状态更新(State Estimation)频率越高越好。</p>
<h1 id="Sensor-Failures"><a href="#Sensor-Failures" class="headerlink" title="Sensor Failures"></a>Sensor Failures</h1><p>自动驾驶使用的传感器系统可能由于外部环境因素而失效，比如恶劣天气状况、硬件故障、系统连接线松了等等；也可能由于传感器自身的短板导致，比如GNSS在隧道场景下无法定位、在城市环境下定位的误差达到数十米，IMU容易收到温度变换的影响等。</p>
<p>即使在没有传感器异常的情况下，我们依然能够从多传感器的使用中收益。如下图所示，各个传感器的功能相互补充，构建安全的自动驾驶系统。</p>
<p><img src="/2019/12/30/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E5%8D%81%E4%BA%94%E5%9F%BA%E4%BA%8E%E5%A4%9A%E4%BC%A0%E6%84%9F%E5%99%A8%E8%9E%8D%E5%90%88%E7%9A%84%E7%8A%B6%E6%80%81%E4%BC%B0/Screenshot-from-2019-12-29-09-21-22-1024x427.png"></p>
<p>各个传感器各有所长，比如短距测量传感器可以在停车场景下，检测附近的障碍物，避免发生碰撞；中距测量传感器在车道保持场景下，检测周围的行人、机动/非机动车辆；长距测量传感器帮助我们检测和预测远距离障碍物的运动等等。在实际应用要充分考虑到这些传感器的长处和短板，并增加一定的冗余系统，保证在部分系统无法工作的情况下，仍然可以保证车辆的正常运行。</p>
<p><img src="/2019/12/30/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E5%8D%81%E4%BA%94%E5%9F%BA%E4%BA%8E%E5%A4%9A%E4%BC%A0%E6%84%9F%E5%99%A8%E8%9E%8D%E5%90%88%E7%9A%84%E7%8A%B6%E6%80%81%E4%BC%B0/Screenshot-from-2019-12-29-09-42-39-1024x600.png"></p>
<h1 id="多传感器融合的代码实战"><a href="#多传感器融合的代码实战" class="headerlink" title="多传感器融合的代码实战"></a>多传感器融合的代码实战</h1><p><img src="/2019/12/30/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E5%8D%81%E4%BA%94%E5%9F%BA%E4%BA%8E%E5%A4%9A%E4%BC%A0%E6%84%9F%E5%99%A8%E8%9E%8D%E5%90%88%E7%9A%84%E7%8A%B6%E6%80%81%E4%BC%B0/Screenshot-from-2020-01-05-13-42-59-1024x403.png"></p>
<p>Couresas上的Multi-Sensors Fusion Project效果如下:</p>
<p><img src="/2019/12/30/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E5%8D%81%E4%BA%94%E5%9F%BA%E4%BA%8E%E5%A4%9A%E4%BC%A0%E6%84%9F%E5%99%A8%E8%9E%8D%E5%90%88%E7%9A%84%E7%8A%B6%E6%80%81%E4%BC%B0/Screenshot-from-2020-01-05-13-11-47-1024x489.png" alt="Vehicle Trajectory-Ground Truth and Estimated Trajectory"></p>
<p><img src="/2019/12/30/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E5%8D%81%E4%BA%94%E5%9F%BA%E4%BA%8E%E5%A4%9A%E4%BC%A0%E6%84%9F%E5%99%A8%E8%9E%8D%E5%90%88%E7%9A%84%E7%8A%B6%E6%80%81%E4%BC%B0/Screenshot-from-2020-01-05-13-09-04-1024x644.png" alt="Vehicle Trajectory-Estimation Error and Uncertainty Bounds"></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接:"></a>参考链接:</h1><p><a href="https://medium.com/@wilburdes/sensor-fusion-algorithms-for-autonomous-driving-part-1-the-kalman-filter-and-extended-kalman-a4eab8a833dd">https://medium.com/@wilburdes/sensor-fusion-algorithms-for-autonomous-driving-part-1-the-kalman-filter-and-extended-kalman-a4eab8a833dd</a>  </p>
<p>Coursera Lecture -&gt; State Estimation and Localization for Self-Driving Cars</p>
]]></content>
      <categories>
        <category>自动驾驶</category>
      </categories>
      <tags>
        <tag>Muti Sensors Fusion</tag>
        <tag>State Estimation</tag>
        <tag>多传感器融合</tag>
        <tag>状态估计</tag>
        <tag>自动驾驶定位</tag>
      </tags>
  </entry>
  <entry>
    <title>自动驾驶运动规划-Hybird A*算法</title>
    <url>/2020/10/30/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E8%BF%90%E5%8A%A8%E8%A7%84%E5%88%92-hybird-a%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>下面的视频展示了DARPA Urban Challenge(DARPA 2007)中Stanford Racing Team的无人车Junior使用的运动规划(Motion Planning)算法Hybird A*在增量构建的迷宫场景、阻断的道路场景和停车场狭窄停车位场景的实际表现。</p>
<p>在迷宫场景中，可以看到随着车辆的运动，周围在不断的做增量构建,这也就意味着，迷宫中的障碍物是通过车端的传感器实时感知结果得到的。车辆只能看到它周围的环境，随着车辆的持续运动，周围的环境被增量式的构建出来。车辆根据增量构建的场景，实时的调整自身的运动规划策略。</p>
<p><img src="/2020/10/30/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E8%BF%90%E5%8A%A8%E8%A7%84%E5%88%92-hybird-a%E7%AE%97%E6%B3%95/v2-4b43504df6921dce7e5ff362a1a53c23_b.gif" alt="Hybird A\*算法在迷宫场景的规划效果。图片来源：参考材料2"></p>
<span id="more"></span>

<p>视频中黄色的小短线是Hybird A*搜索树，可以看到该算法在不同位置、不同转向角度的情况下都可以实时的为车辆规划出可行的运动路径。</p>
<p>在道路阻断导致车辆无法继续前行的场景下，Hybird A*算法可以规划出掉头曲线，从而避开阻塞的道路，从其它道路继续前进。</p>
<p><img src="/2020/10/30/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E8%BF%90%E5%8A%A8%E8%A7%84%E5%88%92-hybird-a%E7%AE%97%E6%B3%95/v2-4dfb7dacc8bc2d7da86aa9d5764bf5a1_b.jpg" alt="Hybird A\*算法在道路阻断场景的规划效果。图片来源：参考材料2"></p>
<p>最后是一个在停车场进入狭窄停车位的场景，可以看到Hybird A*算法可以规划出复杂的运动路线，使得车辆先前进，再后退，再一次性的进入到狭窄的空车位中。</p>
<p><img src="/2020/10/30/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E8%BF%90%E5%8A%A8%E8%A7%84%E5%88%92-hybird-a%E7%AE%97%E6%B3%95/v2-242fb603c6b7478b26476e1d72df7351_b.jpg" alt="Hybird A\*算法在狭窄停车位场景的规划效果。图片来源：参考材料2"></p>
<p>既然是A*算法，Hybird A*算法具有A*算法的基本特征，即通过当前状态到目标状态的代价(Cost)预估，引导车辆更快的收敛到目标状态。</p>
<h1 id="搜索空间离散化"><a href="#搜索空间离散化" class="headerlink" title="搜索空间离散化"></a>搜索空间离散化</h1><p>传统的开放空间(Open Space)中的A*路径搜索的算法，一般将空间划分为小网格，使用网格中心作为A*路径规划的节点，在这些节点中寻求一条规避障碍物的路径。求解的路径只保证连通性，不保证车辆实际可行。</p>
<p><img src="/2020/10/30/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E8%BF%90%E5%8A%A8%E8%A7%84%E5%88%92-hybird-a%E7%AE%97%E6%B3%95/v2-bea58d1b8d2533fbdf1d62f79fd9f434_1440w.jpg" alt="传统A\*算法 VS Hybird A\*算法。图片来源：参考材料2"></p>
<p>Hybird A*算法同时考虑空间连通性和车辆朝向，将二维平面空间和角度同时进行二维离散化。论文《Practical Search Techniques in Path Planning  for Autonomous Driving》中设置的二维网格大小为1m x 1m，角度分辨率为$5^o$。在(X,Y,$\theta$)三个维度上进行搜索树(Search Tree)扩展时，Hybird A*将车辆的运动学约束引入其中，路径节点可以是二维小网格内的任意一点，保证了搜索出的路径一定是车辆实际可以行驶的。</p>
<h1 id="Hybird-A-搜索树扩展"><a href="#Hybird-A-搜索树扩展" class="headerlink" title="Hybird A*搜索树扩展"></a>Hybird A*搜索树扩展</h1><h2 id="满足车辆运动学约束"><a href="#满足车辆运动学约束" class="headerlink" title="满足车辆运动学约束"></a>满足车辆运动学约束</h2><p>搜索树扩展过程需要基于车辆运动模型，不同类型的车辆运动模型有差异，这里以以前提到的Simple Car Model为例。</p>
<p><img src="/2020/10/30/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E8%BF%90%E5%8A%A8%E8%A7%84%E5%88%92-hybird-a%E7%AE%97%E6%B3%95/v2-a57bc605a69cd10576c903cc66fa535f_1440w.jpg" alt="Simple Car车辆运动模型。图片来源：Planning Algorithm-http://planning.cs.uiuc.edu/node658.htm"></p>
<p>Simple Car Model的车辆运动学约束的实现如下，其中(x,y, yaw)是车辆的当前姿态；distance是车辆在当前行驶方向上前进的距离；steer是方向盘与车辆行驶方向的夹角；函数返回的是满足车辆运动学约束的下一个姿态点。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span>(<span class="params">x, y, yaw, distance, steer, L=WB</span>):</span></span><br><span class="line">    x += distance * cos(yaw)</span><br><span class="line">    y += distance * sin(yaw)</span><br><span class="line">    yaw += pi_2_pi(distance * tan(steer) / L)  <span class="comment"># distance/2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x, y, yaw</span><br></pre></td></tr></table></figure>

<h2 id="车辆控制空间离散化"><a href="#车辆控制空间离散化" class="headerlink" title="车辆控制空间离散化"></a>车辆控制空间离散化</h2><p>车辆的控制输入主要有两个：方向盘转角(Steering Angle)和运动方向(direction)。将方向盘转角从最小转角(Min Steering Angle)到最大转角(Max Steering Angle)按照一定间隔进行采样；车辆的运动方向只有两个：向前运动和向后运动。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> steer <span class="keyword">in</span> np.concatenate((np.linspace(-MAX_STEER, MAX_STEER, N_STEER),[<span class="number">0.0</span>])):</span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> [<span class="number">1</span>, -<span class="number">1</span>]:</span><br><span class="line">        <span class="keyword">yield</span> [steer, d]</span><br></pre></td></tr></table></figure>

<h2 id="对运动空间进行扩展探索"><a href="#对运动空间进行扩展探索" class="headerlink" title="对运动空间进行扩展探索"></a>对运动空间进行扩展探索</h2><p>对运动空间进行扩展探索的过程就是以车辆的控制参数(Steering Angle和Direction)为输入，从车辆的当前姿态为输入，不断采样生成增量扩展的搜索树的过程。</p>
<p>在生成搜索树的过程中，有两个细节：</p>
<p>1）对采样扩展的结果进行碰撞检测，并剔除不满足碰撞检测的扩展。碰撞检测的过程不仅考虑障碍物的位置和形状，还需要考虑车辆自身的位置和形状；</p>
<p>2）最大程度的保证采样扩展的起点和终点不在同一个网格中。可以将采样扩展的长度设置为比对角线长度大一点；</p>
<p><img src="/2020/10/30/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E8%BF%90%E5%8A%A8%E8%A7%84%E5%88%92-hybird-a%E7%AE%97%E6%B3%95/v2-e8aacf720df0170dc592f10c958d99aa_1440w.jpg" alt="Search Tree With Reed-Shepp Expansion，黄绿色的是增量扩展的搜索树，紫色的是从当前位置到目标位置的Reed-Shepp扩展路径。图片来源：参考材料3"></p>
<p>采样扩展的示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x, y, yaw = current.xlist[-<span class="number">1</span>], current.ylist[-<span class="number">1</span>], current.yawlist[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">arc_l = XY_GRID_RESOLUTION * <span class="number">1.5</span></span><br><span class="line">xlist, ylist, yawlist = [], [], []</span><br><span class="line"><span class="keyword">for</span> dist <span class="keyword">in</span> np.arange(<span class="number">0</span>, arc_l, MOTION_RESOLUTION):</span><br><span class="line">    x, y, yaw = move(x, y, yaw, MOTION_RESOLUTION * direction, steer)</span><br><span class="line">    xlist.append(x)</span><br><span class="line">    ylist.append(y)</span><br><span class="line">    yawlist.append(yaw)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> check_car_collision(xlist, ylist, yawlist, ox, oy, kdtree):</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>

<h1 id="搜索代价预估-Heuristics"><a href="#搜索代价预估-Heuristics" class="headerlink" title="搜索代价预估(Heuristics)"></a>搜索代价预估(Heuristics)</h1><p>Hybird A*算法依赖如下两种Heuristics：Non Holonomic Without Obstacles和Obstacles Without Holonomic。</p>
<h2 id="Non-Holonomic-Without-Obstacles"><a href="#Non-Holonomic-Without-Obstacles" class="headerlink" title="Non Holonomic Without Obstacles"></a>Non Holonomic Without Obstacles</h2><p>Non Holonomic Without Obstacles只考虑车辆运动的非完整约束特性，而不考虑障碍物对车辆运动的限制，即认为车辆在完全没有障碍物的开放空间上运动。<br>Heuristics Cost = Max(non holonomic without obstacles cost, 2D Euclidean distance)</p>
<p>之所以使用Non Holonomic Without Obstacles Cost和2D Euclidean distance的原因在于，它可以对靠近目标附近的错误Heading搜索进行大量有效的剪枝。<br>Non Holonomic Without Obstacles Cost的计算过程中，对车辆的运动方向变化、车辆转向角度变化、车辆方向盘转角大小等行为施加一定的惩罚，保证车辆按照预期的行为进行运动。</p>
<p><img src="/2020/10/30/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E8%BF%90%E5%8A%A8%E8%A7%84%E5%88%92-hybird-a%E7%AE%97%E6%B3%95/v2-958aecbb37fe68605a3ef8bdac80c20f_1440w.jpg" alt="Hybird A\*算法在停车场的路径规划效果。图片来源：参考材料3"></p>
<h2 id="Obstacles-Without-Holonomic"><a href="#Obstacles-Without-Holonomic" class="headerlink" title="Obstacles Without Holonomic"></a>Obstacles Without Holonomic</h2><p>Obstacles Without Holonomic只考虑环境中的障碍物，不考虑车辆的运动约束。这种情况的处理就非常常见了，先基于已知环境和已知障碍物构建网格地图，再采用动态规划算法(Dynamic Programming)计算每个网格到达目的地所在网格的Cost(Cost一般使用欧式距离就够了)。</p>
<p>使用该Heuristic的好处是，可以提前发现所有的U型障碍物和Dead Ends，从而引导车辆尽早避开这些区域。</p>
<p><img src="/2020/10/30/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E8%BF%90%E5%8A%A8%E8%A7%84%E5%88%92-hybird-a%E7%AE%97%E6%B3%95/v2-c3a5ebd96864055c8428555c729320fd_b.jpg" alt="动态规划算法(Dynamic Programming)"></p>
<h1 id="Analytic-Expansions"><a href="#Analytic-Expansions" class="headerlink" title="Analytic Expansions"></a>Analytic Expansions</h1><p>前面提到的Hybird A*算法中对运动空间(X, Y, $\theta$)和车辆控制参数(Steering Angle)进行了离散化处理，这就决定了它永远不可能精确的到达连续变化的目标姿态。</p>
<p>为了解决这一问题，论文《Practical Search Techniques in Path Planning  for Autonomous Driving》中提出使用基于Reed Shepp模型的Analytic  Expansions，即选出一些节点，使用Reed Shepp曲线计算从该节点到目标姿态的路径，如果该路径在已知的环境中不与任何障碍物发生碰撞，则将其作为可选的行驶路径。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">paths = rs.calc_paths(sx, sy, syaw, gx, gy, gyaw,</span><br><span class="line">                        max_curvature, step_size=MOTION_RESOLUTION)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> paths:</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">best_path, best = <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> path <span class="keyword">in</span> paths:</span><br><span class="line">    <span class="keyword">if</span> check_car_collision(path.x, path.y, path.yaw, ox, oy, kdtree):</span><br><span class="line">        cost = calc_rs_path_cost(path)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> best <span class="keyword">or</span> best &gt; cost:</span><br><span class="line">            best = cost</span><br><span class="line">            best_path = path</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> best_path</span><br></pre></td></tr></table></figure>

<p>到目前为止，我们通过Hybird A*算法得到了一条实际可行驶的运动路径，但这样的路径往往需要进一步的优化才能得到更好的预期驾驶行为。这种优化分为两个步骤：</p>
<p>1） 应用非线性优化算法(non-linear optimization)对路径的长度(length)和平滑性(smoothness)进行优化；</p>
<p>2） 对优化后的路径进行非参数化的插值(non-parametric interpolation)。</p>
<p>如何对规划出的路径进行继续优化下周继续研究！</p>
<h1 id="参考材料"><a href="#参考材料" class="headerlink" title="参考材料"></a>参考材料</h1><p>1、Explaining the Hybrid A Star pathfinding algorithm for selfdriving cars.(<a href="https://blog.habrador.com/2015/11/explaining-hybrid-star-pathfinding.html">https://blog.habrador.com/2015/11/explaining-hybrid-star-pathfinding.html</a>)<br>2、Udacity A* in Action-Artificial Intelligence for Robotics(<a href="https://www.youtube.com/watch?v=qXZt-B7iUyw">https://www.youtube.com/watch?v=qXZt-B7iUyw</a>)<br>3、Practical Search Techniques in Path Planning for Autonomous Driving<br>(<a href="https://ai.stanford.edu/~ddolgov/papers/dolgov_gpp_stair08.pdf">https://ai.stanford.edu/~ddolgov/papers/dolgov_gpp_stair08.pdf</a>)<br>4、文中代码出处<br>(<a href="https://github.com/gyq18/PythonRobotics/blob/9a9ea3b3d7cc2f5e4cb10b384610964044f17583/PathPlanning/HybridAStar/hybrid_a_star.py">https://github.com/gyq18/PythonRobotics/blob/9a9ea3b3d7cc2f5e4cb10b384610964044f17583/PathPlanning/HybridAStar/hybrid_a_star.py</a>)</p>
]]></content>
      <categories>
        <category>自动驾驶</category>
      </categories>
      <tags>
        <tag>运动规划</tag>
        <tag>Hybird A Star</tag>
        <tag>Hybird A*</tag>
        <tag>Motion Planning</tag>
      </tags>
  </entry>
  <entry>
    <title>自动驾驶运动规划-Hybird A*算法(续)</title>
    <url>/2020/10/30/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E8%BF%90%E5%8A%A8%E8%A7%84%E5%88%92-hybird-a%E7%AE%97%E6%B3%95%E7%BB%AD/</url>
    <content><![CDATA[<p>Hybird A*算法保证生成的路径是车辆可实际行驶的，但它仍然包含很多不必要的车辆转向操作，我们可以对其进行进一步的平滑和优化。</p>
<h1 id="Objective-Function"><a href="#Objective-Function" class="headerlink" title="Objective Function"></a>Objective Function</h1><p>对于Hybird A*生成的车辆轨迹序列：${(x_1, y_1),(x_2, y_2),…,(x_N, y_N)}$,论文【1】中提出如下的目标优化函数(Objective Function)：</p>
<p>$$\begin{array}{l}w_{\rho} \sum_{i=1}^{N} \rho_{V}\left(x_{i}, y_{i}\right)+ \\ w_{o} \sum_{i=1}^{N} \sigma_{o}\left(\left|\mathbf{x}_{i}-\mathbf{o}_{i}\right|-d_{\max }\right)+ \\w_{\kappa} \sum_{i=1}^{N-1} \sigma_{\kappa}\left(\frac{\Delta \phi_{i}}{\left|\Delta \mathbf{x}_{i}\right|}-\kappa_{\max }\right)+ \\ w_{s} \sum_{i=1}^{N-1}\left(\Delta \mathbf{x}_{i+1}-\Delta \mathbf{x}_{i}\right)^{2}\end{array}$$</p>
<span id="more"></span>

<p>该优化函数是Voronoi Term、Obstacle Term、Curvature Term和Smoothness Term四个部分的加权平均：第一个部分引导车辆尽可能的避开障碍物区域；第二个部分惩罚车辆与障碍物的碰撞行为；第三部分约束规划的每个点的最大曲率，并提供车辆非完整约束的保证；第四个部分是轨迹的平滑性约束。$w_{\rho}$、$w_{o}$、$w_{\kappa}$、$w_{s}$分别是这四个部分的权重因子。</p>
<h2 id="Voronoi-Term"><a href="#Voronoi-Term" class="headerlink" title="Voronoi Term"></a>Voronoi Term</h2><p>Voronoi Term中引入了Voronoi Field的概念，Voronoi Field是机器人Motion Planning领域两种经典算法Voronoi Diagram和Potential Field的结合。</p>
<p>此处采用Voronoi Field的定义如下：</p>
<p>$$\begin{aligned}\rho_{V}(x, y)=&amp;\left(\frac{\alpha}{\alpha+d_{\mathcal{O}}(x, y)}\right)\left(\frac{d_{\mathcal{V}}(x, y)}{d_{\mathcal{O}}(x, y)+d_{\mathcal{V}}(x, y)}\right) \\&amp; \frac{\left(d_{\mathcal{O}}-d_{\mathcal{O}}^{\max }\right)^{2}}{\left(d_{\mathcal{O}}^{\max }\right)^{2}}\end{aligned}$$</p>
<p>其中$d_{\mathcal{O}}$和$d_{\mathcal{V}}$分别是路径点(x,y)到最近障碍物的距离和到最近Voronoi Diagram的边的距离。越靠近障碍物，$\rho_{V}(x, y)$的值越大，越接近1；越靠近Voronoi Edge，$\rho_{V}(x, y)$的值越接近0。</p>
<p><img src="/2020/10/30/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E8%BF%90%E5%8A%A8%E8%A7%84%E5%88%92-hybird-a%E7%AE%97%E6%B3%95%E7%BB%AD/v2-8f93cbb765626ef162a1d0ae24a1ca84_1440w.jpg"></p>
<p>上图图左一为Voronoi Field的实际效果，上图右一是标准Potential Field的实际效果。可以看到，Voronoi Field对狭窄通道的效果要明显优于Potential Field。</p>
<p><img src="/2020/10/30/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E8%BF%90%E5%8A%A8%E8%A7%84%E5%88%92-hybird-a%E7%AE%97%E6%B3%95%E7%BB%AD/v2-b2b52c6d9e0c597c882a9016b574c22c_1440w.jpg"></p>
<p>实际停车场的Voronoi Field和Junior的规划路径</p>
<h2 id="Obstacle-Term"><a href="#Obstacle-Term" class="headerlink" title="Obstacle Term"></a>Obstacle Term</h2><p>Obstacle Term中$x_i$是路径点坐标位置，$o_i$是附近障碍物的位置，$d_{max}$是决定Obstacle Term是否影响路径Cost的阈值。当路径点距离障碍物的距离小于$d_{max}$时，Obstacle Term才会对轨迹的Cost进行惩罚。距离障碍物越近，$x_i - o_i$的值越小，Obstacle Term的值就越大，整个轨迹的Cost也就越大。这样就达到了使得平滑后的路径远离障碍物的效果。</p>
<p>这里$\sigma_{o}$一般使用二次函数。即:</p>
<p>$$<br>\sigma_{o}<br>\left(\left| x_{i}-_{i} \right|-d_{\max }\right) = \left(\left| x_{i}-{o}_{i}\right|-d_{\max }\right)^2<br>$$</p>
<h2 id="Curvature-Term"><a href="#Curvature-Term" class="headerlink" title="Curvature Term"></a>Curvature Term</h2><p>对于一系列的点$X_i=\{x_i, y_i\}, i \in [1,N]$，$\Delta X_i = X_i - X_{i-1}$，即为规划路径的方向向量；$\Delta \phi_i$为路径点的方向角变化。</p>
<p>$\kappa = \Delta \phi / \Delta X_i$为$X_i$处的曲率。与Obstacle Term类似，Curvature Term也设置了一个最大允许的路径曲率$\kappa_{max}$，当曲率大于$\kappa_{max}$时，Curvature Term才会对路径的Cost施加惩罚。</p>
<h2 id="Smoothness-Term"><a href="#Smoothness-Term" class="headerlink" title="Smoothness Term"></a>Smoothness Term</h2><p>平滑项利用当前点前后两个方向向量的差值来衡量，方向向量既可以衡量方向的改变，也可以体现轨迹点的分布变换。</p>
<h1 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h1><p>确定Objective Function函数之后，就可以利用Conjugate Gradient(CG，共轭梯度法)或者Gradient Descent求解最优路径。</p>
<p><img src="/2020/10/30/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E8%BF%90%E5%8A%A8%E8%A7%84%E5%88%92-hybird-a%E7%AE%97%E6%B3%95%E7%BB%AD/v2-58534926e1b30883118f3532096bb90b_1440w.jpg"></p>
<p>代码参见:<br><a href="https://github.com/teddyluo/hybrid-a-star-annotation/blob/master/src/smoother.cpp">https://github.com/teddyluo/hybrid-a-star-annotation/blob/master/src/smoother.cpp</a></p>
<p>平滑后的路径如下：</p>
<p><img src="/2020/10/30/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E8%BF%90%E5%8A%A8%E8%A7%84%E5%88%92-hybird-a%E7%AE%97%E6%B3%95%E7%BB%AD/v2-e42b1b6553416fa555ceaa4426b26f34_1440w.jpg" alt="Hybrid-A\*(红色路径) VS CG path(蓝色路径)"></p>
<h1 id="Non-Parametric-Interpolation"><a href="#Non-Parametric-Interpolation" class="headerlink" title="Non-Parametric Interpolation"></a>Non-Parametric Interpolation</h1><p>对路径进行非线性优化后，我们得到一条比Hybird A*算法路线更加平滑的路径，但是这条路径仍然由一段段的折线组成。在论文【1】中提到在它们的实现中组成路径的折线大约在0.5m-1m，这些折线仍然会导致车辆会出现非常生硬的转向，所以需要使用插值算法进一步平滑路径。</p>
<p>参数化的插值算法对噪声非常敏感，比如当路径中两个顶点非常接近时，三次样条曲线(Cubic Spline)算法的输出就会产生非常大的震荡。</p>
<p>【1】中提出通过固定原始路径顶点，然后在固定顶点之间插入新的顶点，最后使用Conjugate Gradient(CG，共轭梯度法)最小化曲率的非参数插值(Non-Parametric Interpolation)方法对曲线进一步平滑，平滑效果如下：</p>
<p><img src="/2020/10/30/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E8%BF%90%E5%8A%A8%E8%A7%84%E5%88%92-hybird-a%E7%AE%97%E6%B3%95%E7%BB%AD/v2-d264c9cf18e4de3687aab429920e9253_1440w.jpg"></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>1、Practical Search Techniques in Path Planning for Autonomous Driving。Dmitri Dolgov，Sebastian Thrun，Michael Montemerlo，James Diebel.<br>2、Path Planning in Unstructured Environments, A Real-time Hybrid A* Implementation for Fast and Deterministic Path Generation for the KTH Research Concept Vehicle.</p>
]]></content>
      <categories>
        <category>自动驾驶</category>
      </categories>
      <tags>
        <tag>运动规划</tag>
        <tag>Hybird A Star</tag>
        <tag>Hybird A*</tag>
        <tag>Motion Planning</tag>
        <tag>Objective Function</tag>
        <tag>运动规划目标函数</tag>
      </tags>
  </entry>
  <entry>
    <title>自动驾驶运动规划(Motion Planning)</title>
    <url>/2020/01/18/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E8%BF%90%E5%8A%A8%E8%A7%84%E5%88%92motion-planning/</url>
    <content><![CDATA[<h1 id="什么是Motion-Planning"><a href="#什么是Motion-Planning" class="headerlink" title="什么是Motion Planning"></a>什么是Motion Planning</h1><p>Motion Planning是在遵循道路交通规则的前提下，将自动驾驶车辆从当前位置导航到目的地的一种方法。</p>
<p>在实际开放道理场景下，自动驾驶要处理的场景非常繁杂：空旷的道路场景、与行人、障碍物共用道理的场景、空旷的十字路口、繁忙的十字路口、违反交通规则的行人/车辆、正常行驶的车辆/行人等等。场景虽然复杂，但都可以拆解为一系列简单行为(behavior)的组合:</p>
<p><img src="/2020/01/18/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E8%BF%90%E5%8A%A8%E8%A7%84%E5%88%92motion-planning/Screenshot-from-2020-01-18-18-57-56-1024x468.png"></p>
<span id="more"></span>

<p>将这些简单的行为(behavior)组合起来，就可以完成复杂的驾驶行为。</p>
<h1 id="Motion-Planning的约束条件-constraints"><a href="#Motion-Planning的约束条件-constraints" class="headerlink" title="Motion Planning的约束条件(constraints)"></a>Motion Planning的约束条件(constraints)</h1><p>Motion Planning是一个复杂的问题，它的执行过程需要满足很多约束条件：</p>
<h2 id="车辆运动学约束"><a href="#车辆运动学约束" class="headerlink" title="车辆运动学约束"></a>车辆运动学约束</h2><p>车辆运动受到运动学约束，比如它不能实现瞬时侧向移动，前驱的车辆必须依赖前轮的转向才能实现变道、转向等操作，在弯道上不能速度过快等等。通常我们采用单车模型(Bicycle Model)对车辆运动进行建模。</p>
<p><img src="/2020/01/18/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E8%BF%90%E5%8A%A8%E8%A7%84%E5%88%92motion-planning/Screenshot-from-2020-01-18-19-17-52.png"></p>
<h2 id="静态障碍物-Static-Obstacle-约束"><a href="#静态障碍物-Static-Obstacle-约束" class="headerlink" title="静态障碍物(Static Obstacle)约束"></a>静态障碍物(Static Obstacle)约束</h2><p>静态障碍物(Static Obstacle)是道路上静止的车辆、路面中间的石墩子等车辆不可行驶的区域。Motion Planning需要避开这些静态障碍物，避免与它们发生碰撞。解决碰撞的思路大概有两种：</p>
<p>1）将静态障碍物(Static Obstacle)在网格占位图中表示出来，然后检测规划路线是否与静态障碍物区域相交。</p>
<p>2）将车辆的轮廓扩大，比如扩展成一个圆形，然后检测障碍物是否与Circle发生碰撞。</p>
<p><img src="/2020/01/18/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E8%BF%90%E5%8A%A8%E8%A7%84%E5%88%92motion-planning/Screenshot-from-2020-01-18-19-26-13.png"></p>
<h2 id="动态障碍物约束"><a href="#动态障碍物约束" class="headerlink" title="动态障碍物约束"></a>动态障碍物约束</h2><p>Motion Planning要实时处理行人、车辆等各种运动的障碍物，避免与障碍物发生碰撞事故。</p>
<p><img src="/2020/01/18/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E8%BF%90%E5%8A%A8%E8%A7%84%E5%88%92motion-planning/Screenshot-from-2020-01-18-19-37-33-1024x584.png"></p>
<h2 id="道路交通规则约束"><a href="#道路交通规则约束" class="headerlink" title="道路交通规则约束"></a>道路交通规则约束</h2><p>车辆在道路上行驶必须要遵守车道线约束规则(比如左转专用道只能左转、实线不能变道、路口必须遵守红绿灯的指示)和各种标志标牌的指示。</p>
<p><img src="/2020/01/18/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E8%BF%90%E5%8A%A8%E8%A7%84%E5%88%92motion-planning/Screenshot-from-2020-01-18-19-55-29-1024x281.png"></p>
<h1 id="Motion-Planning的优化目标"><a href="#Motion-Planning的优化目标" class="headerlink" title="Motion Planning的优化目标"></a>Motion Planning的优化目标</h1><p>了解Motion Planning的约束条件之后，需要构造目标优化函数，然后最小化目标函数，从而获得在当前环境下的最优运动轨迹。目标函数的种类有很多，下面枚举一些常用的目标函数。</p>
<p>1）关注路径长度(Path Length)，寻求到达目的地的最短路径。</p>
<p>$s_f = \int^{s_f}_{s_i}{\sqrt{1+ (\frac{dy}{dx})^2}dx}$</p>
<p>2）关注通行时间(Travel Time)，寻求到达目的地的最短时间。</p>
<p>$T_f = \int^{s_f}_{0} {\frac{1}{v(s)}ds}$</p>
<p>3）惩罚偏离参考轨迹和参考速度的行为。</p>
<p>$\int^{s_f}_{0} {x(s) - x_{ref}(s)ds}$</p>
<p>$\int^{s_f}_{0} {v(s) - v_{ref}(s)ds}$</p>
<p>4）考虑轨迹平滑性(Smoothness)</p>
<p>$\int^{s_f}_{0} {\dddot{x}(s)^2ds}$</p>
<p>5）考虑曲率约束(Curvature)</p>
<p>$\int^{s_f}_{0} {k(s)^2ds}$</p>
<p>通过组合设计自己的目标优化函数，从而获得较好的Planning效果。</p>
<h1 id="分级运动规划器-Hierarchical-Motion-Planning"><a href="#分级运动规划器-Hierarchical-Motion-Planning" class="headerlink" title="分级运动规划器(Hierarchical Motion Planning)"></a>分级运动规划器(Hierarchical Motion Planning)</h1><p><img src="/2020/01/18/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E8%BF%90%E5%8A%A8%E8%A7%84%E5%88%92motion-planning/Screenshot-from-2020-01-18-20-37-52-1024x324.png"></p>
<p>Motion Planning是一个异常复杂的问题，所以通常我们把它切分为一系列的子问题(Sub Problem)。比如Mission Planner、Behavior Planner、Local Planner、Vehicle Control等。</p>
<p><img src="/2020/01/18/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E8%BF%90%E5%8A%A8%E8%A7%84%E5%88%92motion-planning/Screenshot-from-2020-01-18-20-40-07.png"></p>
<h2 id="Mission-Planner"><a href="#Mission-Planner" class="headerlink" title="Mission Planner"></a>Mission Planner</h2><p>Mission Planner关注High-Level的地图级别的规划；通过Graph Based的图搜索算法实现自动驾驶路径的规划。</p>
<p><img src="/2020/01/18/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E8%BF%90%E5%8A%A8%E8%A7%84%E5%88%92motion-planning/Screenshot-from-2020-01-18-20-51-30.png"></p>
<h2 id="Behavior-Planner"><a href="#Behavior-Planner" class="headerlink" title="Behavior Planner"></a>Behavior Planner</h2><p>Behavior Planner主要关注交通规则、其它道路交通参与者(自行车、行人、社会车辆)等等，决定在在当前场景下应该采取何种操作(如停车让行、加速通过、避让行人等等)。</p>
<p><img src="/2020/01/18/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E8%BF%90%E5%8A%A8%E8%A7%84%E5%88%92motion-planning/Screenshot-from-2020-01-18-21-01-29.png"></p>
<p>Behavior Planner的实现方式比较常见的有几种：<strong>有限状态机(Finite State Machines)、规则匹配系统(Rule Based System)、强化学习系统(Reinforcement Learning)。</strong></p>
<p>有限状态机中的State是各个行为决策，根据对外界环境的感知和交通规则的约束在各个状态之间转换。比如在路口红绿灯的场景，当路口交通灯为红色不可通行时，车辆会首先切换到Decelerate to Stop状态，然后在路口停止线完全停下来，进入Stop状态，并持续在Stop状态等待，直至交通灯变为绿色允许车辆通行，车辆进入Track Speed状态，继续前行。</p>
<p><img src="/2020/01/18/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E8%BF%90%E5%8A%A8%E8%A7%84%E5%88%92motion-planning/Screenshot-from-2020-01-18-21-15-18.png"></p>
<p>Rule-Based System是通过一系列的分级的规则匹配来决定下一步的决策行为。比如交通灯绿色-&gt;通行；交通灯红色-&gt;停车等待。</p>
<p><img src="/2020/01/18/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E8%BF%90%E5%8A%A8%E8%A7%84%E5%88%92motion-planning/Screenshot-from-2020-01-18-21-25-58-1024x174.png"></p>
<p>基于强化学习的Behavior Planner系统如下：</p>
<p><img src="/2020/01/18/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E8%BF%90%E5%8A%A8%E8%A7%84%E5%88%92motion-planning/Screenshot-from-2020-01-18-21-31-32-1024x498.png"></p>
<h2 id="Local-Planner"><a href="#Local-Planner" class="headerlink" title="Local Planner"></a>Local Planner</h2><p>Local Planner关注如何生成舒适的、碰撞避免的行驶路径和舒适的运动速度，所以Local Planner又可以拆分为两个子问题：<strong>Path Planner和Velocity Profile Generation</strong>。Path Planner又分为Sampling-Based Planner、Variational Planner和Lattice Planner。</p>
<p>最经典的Sampling-Based Planner算法是Rapidly Exploring Random Tree，RRT算法。</p>
<p><img src="/2020/01/18/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E8%BF%90%E5%8A%A8%E8%A7%84%E5%88%92motion-planning/Screenshot-from-2020-01-18-21-36-30.png"></p>
<p>Variational Planner根据Cost Function进行优化调整，从而避开障碍物，生成安全的轨迹。</p>
<p><img src="/2020/01/18/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E8%BF%90%E5%8A%A8%E8%A7%84%E5%88%92motion-planning/Screenshot-from-2020-01-18-21-45-12-1024x464.png"></p>
<p>Lattice Planner将空间搜索限制在对车辆可行的Action Space。</p>
<p><img src="/2020/01/18/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E8%BF%90%E5%8A%A8%E8%A7%84%E5%88%92motion-planning/Screenshot-from-2020-01-18-21-48-25.png"></p>
<p><strong>Velocity Profile Generation</strong>要考虑到限速、速度的平滑性等。</p>
<p><img src="/2020/01/18/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E8%BF%90%E5%8A%A8%E8%A7%84%E5%88%92motion-planning/Screenshot-from-2020-01-18-21-52-05-1024x529.png"></p>
<p>Vehicle Control将Planner的规划结果转化为车辆的运动行为。</p>
<h1 id="待阅读材料"><a href="#待阅读材料" class="headerlink" title="待阅读材料"></a>待阅读材料</h1><ul>
<li><p>  P. Polack, F. Altche, B. Dandrea-Novel, and A. D. L. Fortelle, “<a href="https://ieeexplore.ieee.org/abstract/document/7995816">The kinematic bicycle model: A consistent model for planning feasible trajectories for autonomous vehicles</a>” 2017 IEEE Intelligent Vehicles Symposium (IV), 2017. Gives an overview of the kinematic bicycle model.</p>
</li>
<li><p>  S. Karaman and E. Frazzoli, “<a href="http://amav.gatech.edu/sites/default/files/papers/icra2013.Karaman.Frazzoli.submitted.pdf">Sampling-based optimal motion planning for non-holonomic dynamical systems</a>,” 2013 IEEE International Conference on Robotics and Automation, 2013. Introduces the RRT* algorithm as an example of sampling-based planning.</p>
</li>
<li><p>  N. Ratliff, M. Zucker, J. A. Bagnell, and S. Srinivasa, “<a href="https://kilthub.cmu.edu/articles/CHOMP_Gradient_Optimization_Techniques_for_Efficient_Motion_Planning/6552254/1">CHOMP: Gradient optimization techniques for efficient motion planning</a>,” 2009 IEEE International Conference on Robotics and Automation, 2009. Introduces the CHOMP algorithm as an example of applying calculus of variations to planning.</p>
</li>
<li><p>  M. Pivtoraiko, R. A. Knepper, and A. Kelly, “<a href="https://ri.cmu.edu/pub_files/2009/3/ross.pdf">Differentially constrained mobile robot motion planning in state lattices</a>,” Journal of Field Robotics, vol. 26, no. 3, pp. 308-333, 2009. Introduces the state lattice planning method.</p>
</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>1、Course自动驾驶课程： <a href="https://www.coursera.org/learn/motion-planning-self-driving-cars/home/welcome">Motion Planning for Self-Driving Cars</a></p>
]]></content>
      <categories>
        <category>自动驾驶</category>
      </categories>
      <tags>
        <tag>自动驾驶运动规划</tag>
        <tag>Motion Planning</tag>
        <tag>运动规划目标函数</tag>
        <tag>Hierarchical Motion Planning</tag>
        <tag>Motion Planner</tag>
        <tag>Motion Planning Objective Function</tag>
        <tag>分级运动规划器</tag>
        <tag>车辆动力学</tag>
        <tag>车辆运动学</tag>
        <tag>运动规划约束</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机视觉-Camera标定</title>
    <url>/2019/12/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89-camera%E6%A0%87%E5%AE%9A/</url>
    <content><![CDATA[<h4 id="1、像素坐标系与图像坐标系之间的关系"><a href="#1、像素坐标系与图像坐标系之间的关系" class="headerlink" title="1、像素坐标系与图像坐标系之间的关系"></a>1、像素坐标系与图像坐标系之间的关系</h4><p>假设每一个像素在u轴和v轴方向上的物理尺寸为dx和dy</p>
<p><img src="/2019/12/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89-camera%E6%A0%87%E5%AE%9A/4ad600029917f48fb5be.jpg" alt="计算机视觉-Camera标定(1)"></p>
<span id="more"></span>

<h4 id="2、图像坐标系到相机坐标系"><a href="#2、图像坐标系到相机坐标系" class="headerlink" title="2、图像坐标系到相机坐标系"></a>2、图像坐标系到相机坐标系</h4><p><img src="/2019/12/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89-camera%E6%A0%87%E5%AE%9A/4ad800028bebb494b0ce.jpg" alt="计算机视觉-Camera标定(1)"></p>
<h4 id="3、世界坐标系到相机坐标系"><a href="#3、世界坐标系到相机坐标系" class="headerlink" title="3、世界坐标系到相机坐标系"></a>3、世界坐标系到相机坐标系</h4><p><img src="/2019/12/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89-camera%E6%A0%87%E5%AE%9A/4ad70000db53d3553707.jpg" alt="计算机视觉-Camera标定(1)"></p>
<p><img src="/2019/12/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89-camera%E6%A0%87%E5%AE%9A/4ad900013a3bb610ed89.jpg" alt="计算机视觉-Camera标定(1)"></p>
<p>于是，从世界坐标系到像素坐标系的转换关系：</p>
<p><img src="/2019/12/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89-camera%E6%A0%87%E5%AE%9A/4ad900013b9553cafc2f.jpg" alt="计算机视觉-Camera标定(1)"></p>
<h4 id="4、其他情况"><a href="#4、其他情况" class="headerlink" title="4、其他情况"></a>4、其他情况</h4><p>考虑像素坐标系坐标轴不垂直的情况(实际相机由于制造工艺上的问题，导致物理成像坐标轴不是绝对垂直)，如下图所示，假设O1在UV坐标系下的坐标为(u0, v0),像素的物理尺寸仍然为dx，dy，则有</p>
<p><img src="/2019/12/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89-camera%E6%A0%87%E5%AE%9A/472b0002dfc7ab409f46.jpg" alt="计算机视觉-Camera标定(1)"></p>
<p><img src="/2019/12/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89-camera%E6%A0%87%E5%AE%9A/47290002d8c8c581f478.jpg" alt="计算机视觉-Camera标定(1)"></p>
<p>矩阵形式如下：</p>
<p><img src="/2019/12/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89-camera%E6%A0%87%E5%AE%9A/47290002d94419e50800.jpg" alt="计算机视觉-Camera标定(1)"></p>
<p>世界坐标系与像素坐标系转换关系：</p>
<p><img src="/2019/12/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89-camera%E6%A0%87%E5%AE%9A/4ad600029ca1c9969969.jpg" alt="计算机视觉-Camera标定(1)"></p>
]]></content>
      <categories>
        <category>自动驾驶</category>
      </categories>
      <tags>
        <tag>computer vision</tag>
        <tag>坐标系变换</tag>
        <tag>相机标定</tag>
        <tag>计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>一位财务自由人士的投资修行(转帖)</title>
    <url>/2021/04/04/%E4%B8%80%E4%BD%8D%E8%B4%A2%E5%8A%A1%E8%87%AA%E7%94%B1%E4%BA%BA%E5%A3%AB%E7%9A%84%E6%8A%95%E8%B5%84%E4%BF%AE%E8%A1%8C(%E8%BD%AC%E5%B8%96)/</url>
    <content><![CDATA[<blockquote>
<p>文章来源：<a href="https://xueqiu.com/6465851184/176004126%E3%80%82">https://xueqiu.com/6465851184/176004126。</a> 暂不知道文章的作者是谁，却写出了我这大半年投资的所想所悟，大道至简，尊重常识，才是投资的真谛。</p>
</blockquote>
<p>投资，首先它是一种收入方式的转变，从自己挑水吃，到打造自己的自来水管，从主动收入到被动收入的过渡。当然，这条自来水管刚刚开始的时候很弱小，要它足够大供应足够多的水，那么是必须花费你很多的时间精力去打造。但不管怎么样，只要大方向正确，再掌握一点基本简单的技巧，日久天长，每天挖一点，每天加深一点，每天进步一步，总有一天会建成自己的大运河。</p>
<p>收入方式的改变，随之而来是带来了生活方式的改变。大家为了养家糊口，很多不愿意做的事也必须要做，哪怕这些事情可能损害自己的健康，甚至有一些违反法律，不就是为了家人过上好的生活，为了多赚一些钱。这些人有几重身份，一边是别人的孩子要照顾老人，另一边是又是孩子的父母。一代人要照顾两三代人，这种种重担压得人喘不过气来。这些人从来都是牺牲自我的消费享受，去支付老人的药费，小孩的学费，这些人是平凡的，却也是伟大的，是一种伟大的自我牺牲精神，照顾好家庭，就已经是最大的慈善，无上的功德，我对此非常的敬佩，这也是我一直追求的价值观。</p>
<span id="more"></span>

<p>我非常心疼这些人，我也曾经是这里的一份子，为这种牺牲自我成就他人的精神而感动。所以我真心希望有缘之人，看到我的文章，能够早点开悟，以正确的方式，开始投资，越早越好，很可能我的文章，会不知不觉间改变很多家庭的命运，这可能是我的使命，也是我本人的无上功德。</p>
<p>本人便是一个极端的例子，从早年为了赚钱，忙得要死。到现在投资的自来水管打造成功了，被动收入足够大，不需要再付出时间精力，所以我现在的状态是闲得要死。可以有大量的时间做自己想要做的事情，每天最烦恼的就是时间要如何打发。因为时间太多了，所以生活上也越来越追求精致。当然我说的不是奢侈生活，奢侈生活需要钱，而精致的生活需要的是时间精神。</p>
<p>比如我喝水，一定只喝温水。比如我吃早餐，每天到市场买新鲜的番薯玉米，回家自己蒸熟，再喝上一杯自制的新鲜无添加豆浆，一杯豆浆融合了十多种杂粮。在我心中，这就是我每天生活一个完美的开启。</p>
<p>其实这些精致的生活，并不需要花费钱，我的生活消费可能比很多上班族还低。精致在于精神境界的追求上，而非物质金钱上。一个早餐下来，又新鲜又健康，花费不过两元。而大家为了赶时间上班，随便在街头上吃的，又不健康又贵。</p>
<p>诚然，这种精致的生活追求，是需要花费大量的时间与精力的。一个上班族赶时间哪有精力顾上这些呢？这是一个现实的问题。但投资让收入方式从主动到被动的改变，生活方式也随之改变。投资会让你慢慢释放出时间，依靠出卖自己的时间获取收入这部分的比例渐渐在降低。我有一个习惯保持了很多年了，就是每天都在买入。不管钱多钱少，我每天都在买入。没钱的时候，10元100元也要买。这与钱多钱少没有关系，这是一种誓要用投资改变命运的信仰。也许这是我投资的强迫症吧。没有办法，这是以前养成的习惯，以前总是想快点财务自由，用尽每一分钱（闲钱）来投资。每过一天，我都感到我的河道又挖深了一点点，水流又多了一点点。不以善小而不为，10元也是一个种子基金，与其将它花费在我不需要的地方，不如此时此刻将它播种下去，久以时日，必建奇功。</p>
<p>所以虽然现在我已经财务自由，但这种良好的习惯，将会伴随我一辈子。当你也养成这样的习惯，珍视每一元，每一元的投资都能够让你离财务自由更进一小步，每天进步一点点，量变到质的飞跃，怎么可能会不自由！财务自由只是迟早的事，关键是你有没有改变命运的勇气，与持之以恒的耐心。投资永远不可能一夜暴富，它是以年为单位的人生战略规划，每十年财富上一个台阶。</p>
<p>当有一天，你被动收入超过了主动收入，你就会深深体会到某一种的自由感，某一种长久的快乐。这种快乐不是你买了车，不是你买了什么名牌包包，不是这类消费型的快乐，而是一种持久的成就感。多年的付出，终于从量变积累到质变的一天，被动收入终于超越主动收入。这时候我们便有时间精力慢下来，重新审视一下我们剩余的人生，可以开始规划选择一条自己更愿意走的路。所以这种快乐幸福感，实质是对自我人生的一种掌控感，我的命运越来越被我掌控，照着我规划的路线走下去，只要时间足够长，最终你会得到绝大部份你想要的生活方式。这不仅仅是一种财务上的自由，更是一种精神上的自由。你开始学会掌握自己的欲望，你会发现减少不必要的消费，其实带来更大的快乐，是一种自律的快乐。真正的快乐，从来不需要依靠消费来产生，这是一种精神上的自给自足。从掌控欲望，到改写命运。</p>
<p>从此不再需要为钱而工作，而是为兴趣而工作。如同我现在卖书，讲学，有人说，如果你这么富有，为何还要卖书，这不是骗子？我不生气，只是为这些人感到可怜，从来没有尝试过为兴趣而工作，或者说现实生活的压力不允许他们为兴趣而工作。所以我对他们不感到生气，反而有种慈悲可怜之感，希望这些人也早日过上为兴趣而工作的生活吧。有钱不是不需要工作，而是不需要为钱而工作。</p>
<p>投资带来的幸福的烦恼就是——太闲了！所以我现在形成了一种人生最舒服的状态。在主动收入方面，我放弃了为钱而工作，我是依靠兴趣而工作，这个工作同样会产生收入，但这是我快乐的收入，为之努力而不觉得累，反正越干越精神，越干越享受。因为享受，也让我不是为了钱而工作，而是为了提升我的技术，我在这个主动收入上的技能，不断地精进。工作上不断地精进，也在不断提升我的主动收入。所以虽然我不为钱而工作，但我的主动收入却也越来越高。另外，主动收入可以足够应付我平常的生活消费，我完全不需要依靠卖股票来维生，甚至还有结余，还能支持不断地买入股票——手有余粮心自然不慌。所以我在主动收入上，已经形成了良性循环——为兴趣而赚钱，再在此基础上，主动收入又与投资形成互补促进，这种状态实在是太舒服了。</p>
<p>事业（建立在兴趣基础上的主动收入）投资（不断自动增长的被动收入）两不误，我认为这是人生最完美的收入方式。</p>
<p>从一开始选择投资，便已经意味着你在人生战略上领先了一步。</p>
<p>如同很多人一辈子练习画画，一辈子练习书法，而我只不过是一辈子在股票投资领域上不断练习，没有什么本质的不同，功多自然艺熟，没有什么特别，没有什么秘诀，就是专注一个领域时间足够久而已。成为投资专家，并不比其他任何领域的专家更高贵，我认为本质是一样的，分工不同而已。</p>
<p>但有一点我是很幸运，如果一个人练习了十年的书法成为书法专家，未必一定能够过上财富生活，写好书法到转换成财富变现中间还隔着很多的道道，可能需要包装，需要宣传，需要名气。而我练习了十年的投资成为投资专家，投资到变现，中间没有什么距离，就直接财富变现了。投资嘛，投资做得好，自然是要赚钱的，不管我有没有名气，不管别人怎么骂我讨厌我，我依然不会受任何影响，赚着属于我的利润。没有好的收益，没有财富，算哪门子的投资专家？钱，虽然很粗俗，但它就是衡量投资是否成功的一个重要因素，就是这么直白。所以这是我幸运的地方，我与一位书法家同样付出一样多的努力最终成为各自己领域的专家，但由于我的领域是投资，可以直接变现，而他可能比我曲折很多倍。并不是我比他聪明或更努力，而是不同领域不同特性造就的结果。选择大于努力。</p>
<p>一般来说，想要生活得成功，需要两种能力，一种是具体的技能，另外一种是在现今商业社会将这种技能变现成财富的能力。而投资神奇之处，是技能与变现是重叠的，所以投资家比其它领域的人，事半功倍。一开始就选择投资作为一个终身职业，意味着比其他人少付出了一半的努力。</p>
<p>我这辈子最幸运的是，在二十岁就想明白了很多事情，知道自己想得到什么，也知道自己应该放弃什么，将我有限的精力极致专注在某一个很小很小的点上。然后余下八十年专心执行二十岁所制定的路线，每天进步一点点，等待时间足够长，我便得到我所有想要的事，包括家庭幸福，投资成就，身体健康。我获得让绝大多数人羡慕甚至是嫉妒的成绩——不仅仅是金钱。并不是我多聪明，相反我的绝对智商只能处于中下水平，但我真正聪明甚至是称得上人生智慧的做法，将我有限的智商极致专注在一个极小的领域——世界有很多行业，我只专注于投资。投资有很多品种，我只专注于股票。股票有上万个，我只专注于代表中国经济发展方向的十来个。投资方法千万种，我只永远低估的时候买入，高估卖出，只用一招，别无二式。就是这样，不断地做减法，不断地专注。</p>
<p>一般人是每天都有新鲜事，我是一辈子重复一件事，怎么可能不成功？怎么可能不成为投资家？在这个小领域中，我成为了这个领域的神，这是简单的物理法则，压力作用在足够小的面积上，便能切金断玉。而我在其他领域，只是一个白痴。但我不介意，人生需要有取舍，在一个小小的领域做到极致，已经足够成就一生传奇。而非常幸运的是，投资做的好，就意味着金钱，在现今这个商业化社会，拥有金钱，在其他领域虽然我是白痴，但也不再需要我亲力亲为，我完全可以假手于人，借助其他领域的专家为我效力，而我更专注于投资一域，享受并赚取更多的财富，形成一种非常高效的良性循环。</p>
<p>当然很多人也知道投资是个好东东，也同样在投资上付出巨大的努力，而不见得有好的收获。一方面可能是这些努力用错了方向，只是看上去很努力而已，没有用在关键的地方，自然是白费气力。很多人将心神放在了消息和股价不可预测的涨跌上，而且还常常被这些不可预测的因素，弄得自己头晕眼花，失去了方向。另一方面，我觉得更多的原因，在于无法克服自身人性的弱点。很多人在股票投资上付出巨大的努力而没有回报，而我却一直认为投资是一件很简单的事，我只付出了微不足道的努力，便在投资上取得巨大的收获。我将这些归功于我的性格，我的确是天生适合做投资的料。</p>
<p>投资对于我来说，已经是呼吸一般自然的事情，没有什么困难。事实上投资的方法一点也不难，投资很简单，只是人性很复杂。是人性的复杂，将原本很简单的投资，污染成复杂的事。一切皆是庸人自扰。</p>
<p>投资要做得好，必须要回归到简单的本源。所以这就是我的天生优势——我的智商实在是非常的普通平庸，无法理解复杂的事物，所以我天生凡事尽量往简单处想。在现实生活中做生意，我是完败的等待着被淘汰的那一批人。做生意对我来说太复杂的，每天都有无穷无尽的事情要处理，各种关系要处理。经营上还时刻要创新，产品要创新，服务要创新，变着花样讨好消费者，而且还有激烈的价格竞争，这一切对于我来说，都太复杂了，以我低下的智商，实在是无法掌控。</p>
<p>所以我的想法很简单，与其自己创造一个好生意，不如发现并买入一个好生意。反正本质是一样的：拥有一个好生意为我赚取钞票。就是这么简单的事。自己创造一个好生意，成功率只有万分之一。但发现一个好生意，成功率却是99.99%——直接挑选那些行业龙头不就行了吗！好生意，就是印钞机。我没有能力创造，但我有能力发现。这是出生于这个时代的幸运。假如我早出生三十年，我将一无事处，我的人生将暗淡无光。</p>
<p>做生意，时刻要变，不变就等待着被时代所淘汰。但即使你变，最终还是会被时代所淘汰。有时候你什么都没有做错，只是错在太老而已。没有新时代的基因。</p>
<p>但做投资，万世不变。无论现在时兴苹果还是华为，无论全社会兴起吃老干妈还是鱼子酱，总是有那么一批赚大钱的公司，总是有行业的领导者，总是有那1%的优等生。所以无论时代如何变革，我的投资永恒不变——永恒投资于那1%的优等生。人类精英中的精英，暴利中的暴利，时代的印钞机。</p>
<p>买入并持有顶层1%的精英企业，就是投资中最简单而最有效的事。</p>
<p>本质上，投资应该是永远持有这些精英企业，不做任何波段，指数化投资将是一个非常好的选择。长期的指数化投资，收益将达到10%左右。在此基础上，我进化了一点点。因为指数，其实也是由一个个具体股票组成。所以指数投资的一个缺点就是，你将被动投资一堆比较平庸的公司。</p>
<p>所以我的进化是，在指数化投资的基础上，去除了指数中平庸的公司，只投资于最优秀的公司，指数其实已经足够优秀，但我要优中选优。比如指数中的保险公司有好几个，那么我就只投资最优秀中国平安。指数中银行股有一大堆，我只投资最优秀的招商银行。指数中地产股也有好几个，我只投资最好的万科。指数中消费股也很多，我只投资茅台、伊利。指数中还有一堆不好的行业，重资产的企业，我也一一去除了。最终就剩下几家最优秀最赚钱的企业，这就是我进化版的指数化投资。</p>
<p>这样做减法下来，我的“超级指数”，大概不会超过20个股票。我将永恒持有这些股票。在这里要特别的强调，我所谓的永恒持有不是永远持有某一个具体的股票，我永恒持有的是始终代表经济最高层次的1%。这是一个动态的变化过程。以前我的名单中有苏宁，有国美，但随着他们不适应新时代的发展，他们已经从我的名单中去除。</p>
<p>又随着新时代的到来，腾讯、阿里、百度这些高科技公司也进入到我的候选观察名单当中。所以这是一种动态的静态投资哲学。动态的是，我的名单永远跟随着时代变化而进化。静态的是，我永远只投资代表人类未来符合时代的精英企业，这是我万世不变的法则。不变的是投资的原则，变的是与时俱进的赚钱生意。</p>
<p>通过这种简单的进化，长期投资收益将从原有10%提升到15%。这是了不起的进化，却又是那么的简单。10%年收益复利70年是789倍，而15%复利是17735倍。也就是说，现在我30岁，假如我能够努力活到一百岁，届时我的财富很大概率将比现在增长一万倍。这足够改写我整个家族的发展史。而且我相信，绝大部分人，也可以这样分享中国经济的成果，很多家庭可以依靠这个简单的方法，最终改写命运。</p>
<p>而这种进化是那么的简单，用一些简单的原则，过滤一下平庸的公司就可以了，只投资那么一眼就看到的优秀公司，只投资好行业中的优秀公司。所以，投资实在是很简单的事，付出一点点努力，却能够有巨大的回报。</p>
<p>原则上，我的投资战略，就是永恒持有这些优秀公司组合，不做任何波段。但很快，我发现了我的天赋——懒。可以说，我是懒出了境界，懒到与世无争，懒到淡泊一切。我只是持有这些优秀公司，获得15%的年收益就已经很满足了。即使最终无法得到15%，得到10%也满意。我就是这么懒，就是这么不想努力，就是这么没有进取之心。但这却演变成为我投资上一个极大的天赋：拥有极端的耐心，等待复利的增长。</p>
<p>而市场上普通的交易者，是心浮气躁，希望一夜暴富。而我却是极端的耐心，计划用一百年的时间，来进行复利的增长。最后导致一个结果是，像我这类极端耐心的人，常常不动如山，就是埋头持有，不闻不问，目标很简单很明确，心如止水面对市场上各种波动。这种天赋导致我可以赚取市场上超额的收益，长期大幅跑赢指数。</p>
<p>因为我不动，所以我不会犯错，至少致命的错误不会犯，就是运气好的时候，可能可以以10PE以下买到优秀公司。运气差一点，PE高一点点买优秀公司，收益低一点点，其实我也完全不在意。买贵一点，买便宜一点，其实都是在一个合理区间，这算不上是错误，应该是投资上的必然结果，肯定会遇到的，所以我很坦然。但是同样市场对面的千千万万的投资者，却没有我这种坦然，他们很急，很焦虑，很多动作。动作越大，错误越大。他们常常想跑赢市场，想赚取超越市场的收益，最后的结果是自己消灭了自己，自己吓死了自己。而我这种耐心到极致的人，常常等到各种买入的良机。金融危机买阿里，三聚氰氨买蒙牛，地产调控买保利，银行坏帐买民生，利率下降买平安。然后等待危机过去，股价收复上涨，我便功成身退，再次进入耐心的潜伏期。</p>
<p>这种结果是很让我哭笑不得的，也算是意外的收获。我的出发点，只是永恒持有优秀公司，获取优秀公司的平均成长收益就满足了。而市场对面千万的交易者，他们想超越市场，在他们瞎折腾的过程中，引起市场大幅的波动，要么恐惧的导致股价低的不可思异，要么贪婪的导致股价高的不可思异。对于我这种在旁边冷眼旁观的观察者而言，实质就是低估的时候轻轻的买入，高估的时候安静的离开，轻轻松松，我从来没有想过，股票投资是如此的暴利，市场上愚蠢的钱是如此之多，捡钱是如此的简单。余生几十年，我不过是简单重复这个捡钱的过程而已。</p>
<p>其实，只要大家和我一样，长期持有优秀公司，那么市场的波动就会变得非常小。就不会出现这种超额收益的现象。最终大家都是平均分享上市公司的发展成果。但大家贪婪，总是不满足，总是想自己会更聪明战胜其他人，最终导致的结果是自己打败了自己。</p>
<p>我从来没有战胜市场，只是其他人自己打败了自己。所有人都自己把自己累死，我这个一动不动的人，反而成为幸存者，活到最后，捡起大家遗落的钱。</p>
<p>我从来没有想过赢，没有想过要超越谁，我只是埋头做好自己，埋头持有好公司。但市场却自己常常犯错，市场之愚蠢，不可思异。</p>
<p>所以我对投资的领悟，已经超脱了对行业与公司的基本研究——这些研究其实也很简单，简单关注一下就行了。买万科还是买保利？买美的还是买格力？买茅台还是买五粮液？我根本不在乎，花了一大堆精力去研究，也许收益率就提升两三个点左右吧。甚至是常常自己迷失在自以为是的研究当中。花费极大的精力将行业企业研究到极致（还不一定研究方向就是正确的，多数时候不如傻傻持有），不如保持人性上保持简单纯粹，赚人性的钱，一不小心就是动不动就是数以倍计。因为这根本不花费我任何精力，也不会犯任何错。企业研究有时候可以是越研究越错，毕竟信息不对称。而人性的修练，怎么练都是对的，就是保持简单平静就好了。</p>
<p>永远追求做一个好人，做一个平静的人，永远是对的。而这对于我来说，根本不花精力，原因我的性格天生如此，不喜欢争，人多的地方永远不去，吵的地方待不久。所以我赚人性的钱轻轻松松，动不动就是以翻倍为结果，利润远远超越赚研究行业企业的辛苦血汗钱。当然，两者皆赚，并不矛盾。只是一个需要付出极大的努力，最终才能提升获得一点点的收益，甚至可能弄巧反拙。而修心养性，却是提升收益的另一个维度。如同你无论多么努力踩自行车就是这个速度，而汽车只需要轻轻一点油门。修心养性不仅能提升投资上的收益，更重要的是提升整个生命的质量。</p>
<p>德位相配，修练到有足够的财富承受能力，拥有巨大的财富，然后你又发现，其实你根本不需要财富，一样过得自由快乐。如同我没有想赚超额的利润，利润却自己送上门来。</p>
<p>这就是我和一般投资者的本质差异吧。而且这种差异是自带的天赋，一般人也难以模仿。因为大多数人的人性不适合。佛法说静极生慧，而投资上是静极生暴利。说白了就是不犯错的人，去捡那些犯错扔下的钱。简单到极致，便不会犯错，也可以持久重复。</p>
<p>退可守，守着优秀的公司，每年10%-15%的收益，非常的满足，这让我首先立于不败之地。进可攻，静待市场犯错，每两三年便有一次翻倍的暴利机会。用我简单到极致的纯粹，去碰撞市场上各种复杂的人性，不胜而胜。</p>
<p>所以总结下来，长期投资是分了三个阶段。</p>
<p>第一阶段，投资指数，赚市场平均增长的钱，长期下来收益率10%。</p>
<p>第二阶段，指数的进化版，优中选优，好行业好公司，长期下来收益率15%-20%。</p>
<p>投资来到这里，我觉得已经可以了，剩下的就是坚持而已。所以我说投资很简单。任何说投资很复杂的人，都是贪婪之人，他们想追求第三个阶段。</p>
<p>第三阶段，就是在第二阶段的基础上，低估买入，高估卖出，赚人性的钱。按经验看，一般3-5年倍便会出现收益翻倍的大波动，收益率可以达到年化的30%，甚至有时达到50%。这里就可以看出人性的魔力，一个公司的正常增长率长期下来不过15%左右，就人性的波动，动不动就是翻倍。</p>
<p>想赚第三阶段的钱需要天赋，而且机会可遇不可求。凡求者，必败。所以我从来不强求。我只立足于第二阶段。因为不求，所以无欲则刚，立于不败之地。等得起，机会自然会来，所以我常常做到了第三阶段。我能够做到了，是因为我不求。很多人，只是“假装不求”，实质上还是在强求，自我欺骗。能够做到这点，要么是具有天赋的性格，像我这种性格，懒出境界的人，与世无争。要么就是人世间事情经历多了，终于大彻大悟。求的最高境界是不求，不求，自然会来。所以芒格说，四十岁以下，没有真正的价值投资者。价值投资，除了极少数天赋异禀的人之外，大多数的确需要经历足够多的人生历练，才会有彻悟。</p>
<p>所以第三阶段，说简单也简单，说困难也非常难。方法很简单，心法很困难。方法就是这样了，很难再改进。但心法是一个更高的维度，稍稍把人性的弱点修正一下，在投资上就会有非凡的表现。把人性修行好，在投资的战场上，当相于你拥有了飞机坦克，对与拿着长矛的人交战，这是碾压式的合法的抢劫。</p>
<p>当你投资不再想着赚钱的时候，就自然会赚很多钱。假如你练习书法，是为了将来能够写一字值千金，那么你的书法永远写不好。只有把投资当成是一种修行之人，当成是一种人生信仰，投资才真正做到极致。投资做好了，结果不就是会赚到大钱吗？所以我的出发点，只是想把投资做好，享受这个投资的乐趣，而非想着钱，这有本质的不同。想着钱的人，总是该买的时候不敢买，害怕继续跌。该卖的时候贪婪着不想卖，害怕继续升。买了不应该买的，害怕出黑马。想赚尽市场的钱，眼红别人赚得比自己多。</p>
<p>而我只是享受发现一个低估的股票，低估了，便买入，高估了，便卖出，然后继续寻找下一个。每次发现一个低估的股票的时候，如同一个小孩子发现一个新的玩具般高兴。从来没有恐惧与贪婪之心。所以买入之后，下跌便下跌了，我也不再乎。卖出之后常常继续升，我也不眼红。我只是享受这一件玩具而已。</p>
<p>现在投资，已经成为我的一个修行工具。如同有些人练太极，有些人写书法，有些人打座静心，而我只是做投资而已，道是一样的。所谓投资上的修行，我的理解就是把自己给做好，做一个好人，做一个淡然之人。平常把每一件小事给做好，就是我的日常修行。从喝水开始，从吃饭开始，从睡觉开始，从跟家人好好说话开始，我已经就是修行。</p>
<p>我的修行不需要去深山闭关，吃好饭睡好觉，做每一件事保持平静之心，就是修行的最高境界。我没有刻意去修行，却又时时刻刻在修行。无处，却又无处不在。简单到极致，空无一物，却又万法加身。</p>
<p>道，从来没有离开生活。生活之道，才是最高的修行。</p>
<p>我的人生，从来没有什么大事，都是一件件平凡小事，每一件小事，我都力求做到极致，这就是我人生修行的最高境界。自律到信仰，信仰就是自律到极致，自律到自然，成为本能，无须刻意，已无执意，一举手一投足，皆发自内心，又顺应自然，合乎于道。自律没有成为本能之前，是痛苦的，是刻意为之，是“时时勤拂拭，莫使有尘埃”。当自律成为了本能，就不再有痛苦，反而因为自律，因为战胜自我的人性，会产生极大的快乐。成为信仰之后，根本无须刻意，无须强求。自律到极致，就无须再自律。别人眼中的自律、勤奋、节约，在我眼中不过如呼吸一般自然存在。“本来无一物，何处惹尘埃”。</p>
<p>人性修练到这个境界，投资赚钱不过如探囊取物一般的简单。任何认为投资困难的人，本质上是人性还没有到境界。不就是耐心等待嘛，等待低估买入，等待公司成长，等待市场高估，一切不过是慢慢来，慢慢等，就完成了，有什么难的？对于我来说，已经不存在耐心这个概念，我根本没有想过自己是否耐心，别人眼中的耐心，在我这里，不过是一种本能般自然的事。</p>
<p>山不是山，水不是水，投资也不再是那个投资。投资信仰变成了人生信仰，我得到比金钱重要千万倍的东西。投资除了带给我金钱之外，也改变了我的人生观。让家庭更和谐，心灵更自由，身体更健康，朋友更尊重，这绝对不是用钱就能买来的财富，这是比金钱更高维度的财富。投资无法解决所有问题，甚至我越来越觉得，不能解决大部分问题。有钱有时间有精力，只是第一个条件，有了条件跨进一个新的维度，下一步其实更关键，你拥有金钱时间之后，你选择做什么？别以为有钱了家人就会爱戴你，别以为有钱了朋友就会尊重你, 别以为有钱了你的心灵就会获得平静，别以为有钱了健康就会随之而来，还差一万光年。</p>
<p>年轻的时候一无所有，我想当然的认为，有了一百万，家人就会更尊敬我更爱我，就不会产生矛盾。很快，我赚了一生的第一个一百万，但情况并没有改善，矛盾依旧。我想，可能因为我还不够富有，如果能够有一千万，一定能够改善了。过了几年，资产又增长了十倍，我突然醒悟到，家人的爱，与你拥有多少钱毫无关系。很多人甚至越有钱，家庭矛盾越大。因为你越有钱，你自以为自己能力越大，越认为自己了不起，越认为其他人应该尊重你应该礼让于你，越是自我为中心，矛盾便越大。所以我醒悟了，我开始追求金钱之外的修行。投资在一般人眼中只是为了赚钱，我是为了修行。这是借由投资的修行，真正从财务自由，到达了人生自由。</p>
<p>全心全意无限包容地去爱家人，孩子的成长全程陪伴在身边。首先我要把自己做好，首先我要主动去爱，主动去付出，言传身教。我不再求了，我不再自以为中心，然后又慢慢的，身边所有的人，又受到我的感染，最终结果又变成了以我为中心，但此中心已非彼中心，以前别人是因为怕我，现在别人是因为爱我尊重我，以我为精神领导。家庭非常和谐的统一在一起。整个家庭，从我的父母，到我的妻子，再到我的三个孩子，他们都非常清楚明白，投资便是今后百年的发展战略。一旦形成这种高度统一的凝聚力，家庭，就升华成家族。我们每个人心中，深刻理解了这个家族百年发展的大战略，再没有任何阻力阻碍家庭的百年复利战略</p>
]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>投资理财</tag>
        <tag>人生感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>自动驾驶定位算法-直方图滤波(Histogram Filter)定位</title>
    <url>/2019/12/07/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E4%B9%9D-%E7%9B%B4%E6%96%B9%E5%9B%BE%E6%BB%A4%E6%B3%A2histogram-filter%E5%AE%9A%E4%BD%8D/</url>
    <content><![CDATA[<h1 id="直方图滤波-Histogram-Filter-的算法思想"><a href="#直方图滤波-Histogram-Filter-的算法思想" class="headerlink" title="直方图滤波(Histogram Filter)的算法思想"></a>直方图滤波(Histogram Filter)的算法思想</h1><p>直方图滤波的算法思想在于：它把整个状态空间dom(x(t))切分为互不相交的部分$b_1、b_2、…,b_{n-1}$，使得：</p>
<p><img src="/2019/12/07/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E4%B9%9D-%E7%9B%B4%E6%96%B9%E5%9B%BE%E6%BB%A4%E6%B3%A2histogram-filter%E5%AE%9A%E4%BD%8D/1524143870919032686cb02.jpeg" alt="无人驾驶高精度定位技术(1)-直方图滤波Histogram Filter"></p>
<p>然后定义一个新的状态空间$y_t \in \{0,…,n−1\}$，当且仅当$x(t)∈b_i$时，$y_t=i$,由于$y_t$是一个离散的状态空间，我们就可以采用离散贝叶斯算法计算$bel(y_t)$。$bel(y_t)$是对$bel(x_t)$的近似，它给出x(t)在每一个$b_i$的概率，$b_i$划分的越精细，计算的结果就越精确，当然精确的代价是计算成本的上升。</p>
<span id="more"></span>

<h1 id="1D直方图滤波在自动驾驶定位的应用"><a href="#1D直方图滤波在自动驾驶定位的应用" class="headerlink" title="1D直方图滤波在自动驾驶定位的应用"></a>1D直方图滤波在自动驾驶定位的应用</h1><p>如下图所示，无人驾驶汽车在一维的宽度为5m的世界重复循环，因为世界是循环的，所以如果无人驾驶汽车到了最右侧，再往前走一步，它就又回到了最左侧的位置。</p>
<p><img src="/2019/12/07/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E4%B9%9D-%E7%9B%B4%E6%96%B9%E5%9B%BE%E6%BB%A4%E6%B3%A2histogram-filter%E5%AE%9A%E4%BD%8D/15242324358146dc9241c7f.png"></p>
<p>自动驾驶汽车上安装有Sensor可以检测车辆当前所在位置的颜色，但Sensor本身的存在一定检测错误率，即Sensor对颜色的检测不是100%准确的；</p>
<p>无人驾驶汽车以自认为1m/step的恒定速度向右运动，车辆运动本身也存在误差，即向车辆发出的控制命令是向右移动2m，而实际的车辆运动结果可能是待在原地不动，可能向右移动1m，也可能向右移动3m。</p>
<h2 id="数学模型"><a href="#数学模型" class="headerlink" title="数学模型"></a><strong>数学模型</strong></h2><p>从数学的语言来描述这个问题：机器人只有一个状态变量：位置，$pos(t) \in [0,5)$。应用直方图滤波(Histogram Filter)，对状态空间做如下分解:</p>
<p>$$<br>b_0 \in [0,1),<br>b_1 \in [1,2),<br>b_2 \in [2,3),<br>b_3 \in [3,4),<br>b_4 \in [4,5)<br>$$</p>
<p><img src="/2019/12/07/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E4%B9%9D-%E7%9B%B4%E6%96%B9%E5%9B%BE%E6%BB%A4%E6%B3%A2histogram-filter%E5%AE%9A%E4%BD%8D/15242324358146dc9241c7f.jpeg" alt="无人驾驶高精度定位技术(1)-直方图滤波Histogram Filter"></p>
<p>于是得到一个新的状态空间$y(t) \in {0,…,4}$，它是对连续状态空间的近似，在某一时刻车辆只能在这些离散状态中的一个。</p>
<p>虽然车辆自认为在向右运动，每一步运动1m，我们假设存在5%的概率，无人驾驶汽车仍待在原地没动；存在90%的概率车辆在向右移动1m；存在5%的概率无人驾驶汽车在向右运动2m。</p>
<p>$$<br>\begin{aligned}<br>\text{P}(y_t &amp;= (x+2) mod 5 y_{t-1} = x) = 0.05 \\<br>\text{P}(y_t &amp;= (x+1) mod 5 y_{t-1} = x = 0.9 \\<br>\text{P}(y_t &amp;= xy_{t-1} = x)=0.05 \\<br>\end{aligned}<br>$$</p>
<p>无人驾驶汽车的Sensor假设90%的概率感知结果是正确的，还有10%的情况下它感知的结果是错误的。</p>
<p>$$<br>\begin{aligned}<br>\text{P}(\text{MeasuredColor}_t = \text{Blue} y_t = 0,2,3) &amp;= 0.9 \\<br>\text{P}(\text{MeasuredColor}_t = \text{Orange} y_t = 0,2,3) &amp;= 0.1 \\<br>\text{P}(\text{MeasuredColor}_t = \text{Blue} y_t = 1,4) &amp;= 0.1 \\<br>\text{P}(\text{MeasuredColor}_t = \text{Orange} y_t = 1,4) &amp;= 0.9 \\<br>\end{aligned}<br>$$</p>
<h2 id="利用直方图滤波-Histogram-Filter-进行车辆定位的过程"><a href="#利用直方图滤波-Histogram-Filter-进行车辆定位的过程" class="headerlink" title="利用直方图滤波(Histogram Filter)进行车辆定位的过程"></a>利用直方图滤波(Histogram Filter)进行车辆定位的过程</h2><p>我们用一个5维的向量来描述t时刻，无人驾驶汽车位于第1个格子、第2个格子、第3个格子、第4个格子、第5个格子的概率。</p>
<p>$$\text{bel}(y_t) = (\text{bel}_{t,1}, \text{bel}_{t,2}, \text{bel}_{t,3}, \text{bel}_{t,4}, \text{bel}_{t,5})$$</p>
<p>无人驾驶汽车对自己所在位置一无所知，假设它连续三次【运动-向右走一步】-【观测】,三次观测结果分别是orange、blue、orange，我们一步步无人驾驶汽车是如何通过【运动】-【观测】过程逐步确认自己的位置的。</p>
<p><strong>t=0时刻</strong></p>
<p>没有任何先验知识，无人车不知道自己在哪里,所以在各个位置概率相等：</p>
<p>$$\text{bel}(y_0) = (0.2, 0.2, 0.2, 0.2, 0.2)$$</p>
<p><strong>t=1时刻</strong></p>
<p>首先向右走1m，用运动模型进行位置预测</p>
<p>$$<br>\begin{aligned}<br>\overline{\text{bel}}(y_1) &amp;= \sum_{y_0} \text{P}(y_1 y_0) P(y_0) \\<br>&amp;=(0.05,0.9,0.05,0,0) * 0.2+(0,0.05,0.9,0.05,0) * 0.2 \\<br>&amp;+(0,0.05,0.9,0.05) * 0.2+(0.05,0,0,0.05,0.9) * 0.2 \\<br>&amp;+(0.9,0.05,0,0,0.05) * 0.2 \\<br>&amp;=(0.2,0.2,0.2,0.2,0.2)<br>\end{aligned}<br>$$</p>
<p>可以看出无人车虽然向前运动一步，但它仍然对自己所在位置一无所知。这也和我们的认知相同，刚开始完全不知道自己在哪里，走了一步自然也完全不知道自己在哪里。</p>
<p>再用更新模型通过Sensor感知环境，更新当前位置的置信度。</p>
<p>$$<br>\begin{aligned}<br>\text{bel}(y_1) &amp;= \eta \text{P}(\text {MeasuredColor}_1 = \text{orange} {y_1}) \overline {\text {bel}} (y_1) \\<br>&amp; = \eta (0.1,0.9,0.1,0.1,0.9) {*} (0.2,0.2,0.2,0.2,0.2) \\<br>&amp; = \eta (0.02,0.18,0.02,0.02,0.18) \\<br>&amp; = (0.04762,0.42857,0.04762,0.04761,0.42857)<br>\end{aligned}<br>$$</p>
<p>orange的颜色感知信息使得传感器认为自己很可能位于第二个和第五个方格中。</p>
<p><strong>t=2时刻</strong>  </p>
<p>运动模型-向右走1m</p>
<p>$$<br>\begin{aligned}<br>\overline{\text{bel}}(y_2) &amp;= \sum_{y_1} \text{P}(y_2 y_1) \text{P}(y_1) \\<br>&amp;= (0.39048,0.08571,0.39048,0.06667,0.06667) \\<br>\end{aligned}<br>$$</p>
<p>更新模型-sensor环境感知</p>
<p>$$<br>\begin{aligned}<br>\text{bel}(y_2) &amp;= \eta \text{P}(\text{MeasuredColor}_2 = \text{blue} y_2) \overline{\text{bel}}(y_2) \\<br>&amp;=\eta (0.1,0.9,0.1,0.1,0.9) {*} (0.39048,0.08571,0.39048,0.06667,0.06667) \\<br>&amp;=(0.45165,0.01102,0.45165,0.07711,0.00857) \\<br>\end{aligned}<br>$$</p>
<p><strong>t=3时刻</strong></p>
<p>运动模型-向右走1m</p>
<p>$$<br>\begin{aligned}<br>\overline{\text{bel}}(y_3) &amp;= \sum_{y_2} \text{P}(y_3 y_2) \text{P}(y_2) \\<br>&amp;= =(0.03415,0.40747,0.05508,0.41089,0.09241) \\<br>\end{aligned}<br>$$</p>
<p>感知更新模型-sensor环境感知</p>
<p>$$<br>\begin{aligned}<br>\text{bel}(y_3) &amp;= \eta \text{P}(\text{MeasuredColor}_3 = \text{orange} y_3) \overline{\text{bel}}(y_3) \\<br>&amp;= \eta(0.1,0.9,0.1,0.1,0.9){*}(0.03415,0.40747,0.05508,0.41089,0.09241) \\<br>&amp;= (0.00683,0.73358,0.01102,0.08219,0.16637) \\<br>\end{aligned}<br>$$</p>
<p>可以看到经过三次的运动和观测后，无人驾驶汽车已经有73%的概率确认自己位于第二个网格中，事实再经过三次的运动观测，无人驾驶汽车可以有94%的概率确认自己的位置。</p>
<h1 id="2D直方图滤波在自动驾驶定位中的应用-一"><a href="#2D直方图滤波在自动驾驶定位中的应用-一" class="headerlink" title="2D直方图滤波在自动驾驶定位中的应用(一)"></a>2D直方图滤波在自动驾驶定位中的应用(一)</h1><p>1D的直方图滤波可以很好的帮助我们理解直方图滤波的原理以及在如何应用在自动驾驶的定位过程中。但是1D的直方图滤波在实际应用中几乎是不存在的，所以我们从更偏向应用的角度，看看2D直方图滤波在自动驾驶定位中是如何工作的。</p>
<h2 id="定义二维地图"><a href="#定义二维地图" class="headerlink" title="定义二维地图"></a>定义二维地图</h2><p>首先定义一张二维地图，R和G代表地图块的颜色：R为红色，G为绿色。每个地图块的大小根据实际应用而定，比如0.0125m*0.125m、0.025m*0.025m等。地图块越小，定位精度越高，但是地图数据量和计算量也就越大；反之，地图块越大，定位精度越低，但数据量和计算量也相应较低。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grid &#x3D; [</span><br><span class="line">    [R,G,G,G,R,R,R],</span><br><span class="line">    [G,G,R,G,R,G,R],</span><br><span class="line">    [G,R,G,G,G,G,R],</span><br><span class="line">    [R,R,G,R,G,G,G],</span><br><span class="line">    [R,G,R,G,R,R,R],</span><br><span class="line">    [G,R,R,R,G,R,G],</span><br><span class="line">    [R,R,R,G,R,G,G],</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>t=0时刻，车辆不知道自己处于地图中的具体位置，转化为数学表述，就是车辆在各个地图块的置信度相同，代码如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize_beliefs</span>(<span class="params">grid</span>):</span></span><br><span class="line">    height = <span class="built_in">len</span>(grid)</span><br><span class="line">    width = <span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">    area = height * width</span><br><span class="line">    belief_per_cell = <span class="number">1.0</span> / area</span><br><span class="line">    beliefs = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">        row = []</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">            row.append(belief_per_cell)</span><br><span class="line">        beliefs.append(row)</span><br><span class="line">    <span class="keyword">return</span> beliefs</span><br></pre></td></tr></table></figure>

<p>初始置信度如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0.020  0.020  0.020  0.020  0.020  0.020  0.020  </span><br><span class="line">0.020  0.020  0.020  0.020  0.020  0.020  0.020  </span><br><span class="line">0.020  0.020  0.020  0.020  0.020  0.020  0.020  </span><br><span class="line">0.020  0.020  0.020  0.020  0.020  0.020  0.020  </span><br><span class="line">0.020  0.020  0.020  0.020  0.020  0.020  0.020  </span><br><span class="line">0.020  0.020  0.020  0.020  0.020  0.020  0.020  </span><br><span class="line">0.020  0.020  0.020  0.020  0.020  0.020  0.020</span><br></pre></td></tr></table></figure>

<p>置信度的可视化如下，红色星星位置为车辆的真实初始实际位置，蓝色圈大小代表置信度的高低，蓝色圈越大，置信度越高，蓝色圈越小，置信度越低。t=0时刻，车辆不确定自己的位置，所以各个位置的置信度相等。</p>
<p><img src="/2019/12/07/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E4%B9%9D-%E7%9B%B4%E6%96%B9%E5%9B%BE%E6%BB%A4%E6%B3%A2histogram-filter%E5%AE%9A%E4%BD%8D/Screenshot-from-2019-12-06-22-50-31.png"></p>
<h2 id="运动更新"><a href="#运动更新" class="headerlink" title="运动更新"></a>运动更新</h2><p>车辆运动模型简化为x、y两个方向的运动，同时由于运动的不确定性，需要对运动后的位置增加概率性信息。</p>
<p>代码如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span>(<span class="params">dy, dx, beliefs, blurring</span>):</span></span><br><span class="line">    height = <span class="built_in">len</span>(beliefs)</span><br><span class="line">    width = <span class="built_in">len</span>(beliefs[<span class="number">0</span>])</span><br><span class="line">    new_G = [[<span class="number">0.0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(width)] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(height)]</span><br><span class="line">    <span class="keyword">for</span> i, row <span class="keyword">in</span> <span class="built_in">enumerate</span>(beliefs):</span><br><span class="line">        <span class="keyword">for</span> j, cell <span class="keyword">in</span> <span class="built_in">enumerate</span>(row):</span><br><span class="line">            new_i = (i + dy ) % height</span><br><span class="line">            new_j = (j + dx ) % width</span><br><span class="line">            new_G[<span class="built_in">int</span>(new_i)][<span class="built_in">int</span>(new_j)] = cell</span><br><span class="line">    <span class="keyword">return</span> blur(new_G, blurring)</span><br></pre></td></tr></table></figure>

<h2 id="观测更新"><a href="#观测更新" class="headerlink" title="观测更新"></a>观测更新</h2><p>观测更新的过程中，当观测的Color等于地图块的Color时，hit=1， bel=beliefs[i][j] * p_hit；当观测到的Color不等于地图块的Color时，hit=0， bel=beliefs[i][j] * p_miss。</p>
<p>代码如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sense</span>(<span class="params">color, grid, beliefs, p_hit, p_miss</span>):</span></span><br><span class="line">    new_beliefs = []</span><br><span class="line"> </span><br><span class="line">    height = <span class="built_in">len</span>(grid)</span><br><span class="line">    width = <span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># loop through all grid cells</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">        row = []</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">            hit = (color == grid[i][j])</span><br><span class="line">            row.append(beliefs[i][j] * (hit * p_hit + (<span class="number">1</span>-hit) * p_miss))</span><br><span class="line">        new_beliefs.append(row)</span><br><span class="line">        </span><br><span class="line">    s = <span class="built_in">sum</span>(<span class="built_in">map</span>(<span class="built_in">sum</span>, new_beliefs))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">            new_beliefs[i][j] = new_beliefs[i][j] / s</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">return</span> new_beliefs</span><br></pre></td></tr></table></figure>

<h2 id="运行定位流程"><a href="#运行定位流程" class="headerlink" title="运行定位流程"></a>运行定位流程</h2><p>单次直方图滤波定位过程中，先进行观测更新，再进行运动更新。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self, num_steps=<span class="number">1</span></span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_steps):</span><br><span class="line">self.sense()</span><br><span class="line">dy, dx = self.random_move()</span><br><span class="line">self.move(dy,dx)</span><br></pre></td></tr></table></figure>

<p>设置运动更新的不确定度为0.1，观测更新的错误率：每隔100次观测出现一次观测错误，车辆的真实初始位置为(3,3),注意，这个真实位置车辆自己并不知道，我们只是为了仿真而设置的值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">blur = <span class="number">0.1</span></span><br><span class="line">p_hit = <span class="number">100.0</span></span><br><span class="line">init_pos = (<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">simulation = sim.Simulation(grid, blur, p_hit, init_pos)</span><br><span class="line"></span><br><span class="line">simulation.run(<span class="number">1</span>)</span><br><span class="line">simulation.show_beliefs()</span><br><span class="line">show_rounded_beliefs(simulation.beliefs)</span><br></pre></td></tr></table></figure>

<p>经过一次直方图滤波定位之后，各个位置的置信度已经发生了变化。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0.003  0.002  0.036  0.002  0.037  0.003  0.038  </span><br><span class="line">0.003  0.037  0.002  0.002  0.001  0.002  0.037  </span><br><span class="line">0.038  0.038  0.003  0.036  0.002  0.002  0.003  </span><br><span class="line">0.038  0.004  0.038  0.003  0.037  0.038  0.038  </span><br><span class="line">0.003  0.038  0.039  0.038  0.003  0.037  0.003  </span><br><span class="line">0.038  0.038  0.038  0.003  0.037  0.003  0.003  </span><br><span class="line">0.038  0.003  0.002  0.002  0.038  0.038  0.038</span><br></pre></td></tr></table></figure>

<p>置信度的可视化效果如下。可以看到，车辆已经对自己的置信度有了一定的认知，但是还是有大量的可能位置需要进一步确认。</p>
<p><img src="/2019/12/07/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E4%B9%9D-%E7%9B%B4%E6%96%B9%E5%9B%BE%E6%BB%A4%E6%B3%A2histogram-filter%E5%AE%9A%E4%BD%8D/Screenshot-from-2019-12-06-23-25-12.png"></p>
<p>连续执行直方图滤波100次，各个位置置信度的数值如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0.008  0.000  0.000  0.000  0.000  0.016  0.016  </span><br><span class="line">0.032  0.001  0.000  0.000  0.001  0.032  0.833  </span><br><span class="line">0.016  0.000  0.000  0.000  0.000  0.025  0.017  </span><br><span class="line">0.001  0.000  0.000  0.000  0.000  0.000  0.000  </span><br><span class="line">0.000  0.000  0.000  0.000  0.000  0.000  0.000  </span><br><span class="line">0.000  0.000  0.000  0.000  0.000  0.000  0.000  </span><br><span class="line">0.000  0.000  0.000  0.000  0.000  0.000  0.000</span><br></pre></td></tr></table></figure>

<p>置信度的可视化效果如下,可以看到，车辆已经83.3%的概率可以确定自己所处的位置了。</p>
<p><img src="/2019/12/07/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E4%B9%9D-%E7%9B%B4%E6%96%B9%E5%9B%BE%E6%BB%A4%E6%B3%A2histogram-filter%E5%AE%9A%E4%BD%8D/Screenshot-from-2019-12-06-23-32-51.png"></p>
<h1 id="2D直方图滤波在自动驾驶定位中的应用-二"><a href="#2D直方图滤波在自动驾驶定位中的应用-二" class="headerlink" title="2D直方图滤波在自动驾驶定位中的应用(二)"></a>2D直方图滤波在自动驾驶定位中的应用(二)</h1><p>车辆状态的定义如下：</p>
<p>$$<br>\begin{aligned}<br>{x}_{t} &amp;=<br>\begin{bmatrix}<br>\text{x} \\<br>\text{y} \\<br>\theta \\<br>\text{v} \\<br>\end{bmatrix}<br>\end{aligned}<br>$$</p>
<p>其中，(x,y)是车辆的位置，$\theta$是车辆的朝向，v是车辆的运动速度，我们假设车辆是匀速运动的，$\omega$是车辆运动的角速度。</p>
<p>车辆运动方程如下，其实就是:</p>
<p>$x_{t+1} = x_t + v * cos(\theta) * \Delta t$<br>$y_{t+1} = y_t + v * sin(\theta) * \Delta t$<br>$\theta_{t+1} = \theta_t + \omega * \Delta t$</p>
<p>写成矩阵形式:</p>
<p>$$<br>x_{t+1} =<br>\begin{bmatrix}<br>1.0 &amp; 0.0 &amp; 0.0 &amp; 0.0 \\<br>0.0 &amp; 1.0 &amp; 0.0 &amp; 0.0 \\<br>0.0 &amp; 0.0 &amp; 1.0 &amp; 0.0 \\<br>0.0 &amp; 0.0 &amp; 0.0 &amp; 0.0 \\<br>\end{bmatrix} *<br>\begin{bmatrix}<br>\text{x} \\<br>\text{y} \\<br>\theta \\<br>\text{v}<br>\end{bmatrix}  +<br>\begin{bmatrix}<br>\Delta t cos(\theta) &amp; 0.0 \\<br>\Delta t sin(\theta) &amp; 0.0 \\<br>0.0 &amp; \Delta t \\<br>1.0 &amp; 0.0 \\<br>\end{bmatrix} *<br>\begin{bmatrix}<br>v \\<br>\omega \\<br>\end{bmatrix}<br>$$</p>
<p>车辆的运动模型代码如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">motion_model</span>(<span class="params">x, u</span>):</span></span><br><span class="line">    F = np.array([[<span class="number">1.0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">                  [<span class="number">0</span>, <span class="number">1.0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">                  [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1.0</span>, <span class="number">0</span>],</span><br><span class="line">                  [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]])</span><br><span class="line"></span><br><span class="line">    B = np.array([[DT * math.cos(x[<span class="number">2</span>, <span class="number">0</span>]), <span class="number">0</span>],</span><br><span class="line">                  [DT * math.sin(x[<span class="number">2</span>, <span class="number">0</span>]), <span class="number">0</span>],</span><br><span class="line">                  [<span class="number">0.0</span>, DT],</span><br><span class="line">                  [<span class="number">1.0</span>, <span class="number">0.0</span>]])</span><br><span class="line"></span><br><span class="line">    x = F @ x + B @ u</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure>

<h2 id="运动更新-1"><a href="#运动更新-1" class="headerlink" title="运动更新"></a>运动更新</h2><p>运动更新的过程与前面谈到的车辆运动模型一致，车辆运动有不确定性，所以增加了Gaussian Filter用来处理不确定性。还有一个细节，就是车辆运动距离和直方图滤波的分块地图之间的转换关系：</p>
<p>x_shift = $\Delta$ x / map_x_resolution</p>
<p>y_shift = $\Delta$ y / map_y_resolution</p>
<p>代码如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># grid_map是网格地图，u=(v,w)是车辆运动的控制参数，yaw是车辆朝向</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">motion_update</span>(<span class="params">grid_map, u, yaw</span>):</span></span><br><span class="line">    <span class="comment"># DT是时间间隔</span></span><br><span class="line">    grid_map.dx += DT * math.cos(yaw) * u[<span class="number">0</span>]</span><br><span class="line">    grid_map.dy += DT * math.sin(yaw) * u[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># grid_map.xy_reso是地图分辨率</span></span><br><span class="line">    x_shift = grid_map.dx // grid_map.xy_reso</span><br><span class="line">    y_shift = grid_map.dy // grid_map.xy_reso</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">abs</span>(x_shift) &gt;= <span class="number">1.0</span> <span class="keyword">or</span> <span class="built_in">abs</span>(y_shift) &gt;= <span class="number">1.0</span>:  <span class="comment"># map should be shifted</span></span><br><span class="line">        grid_map = map_shift(grid_map, <span class="built_in">int</span>(x_shift), <span class="built_in">int</span>(y_shift))</span><br><span class="line">        grid_map.dx -= x_shift * grid_map.xy_reso</span><br><span class="line">        grid_map.dy -= y_shift * grid_map.xy_reso</span><br><span class="line">    <span class="comment"># MOTION_STD是车辆运动不确定性的标准差</span></span><br><span class="line">    grid_map.data = gaussian_filter(grid_map.data, sigma=MOTION_STD)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> grid_map</span><br></pre></td></tr></table></figure>

<h2 id="观测更新-1"><a href="#观测更新-1" class="headerlink" title="观测更新"></a>观测更新</h2><p>这个例子中通过测量车辆到LandMark的距离来确定自身的位置，LandMark的位置都是已知的。</p>
<p><img src="/2019/12/07/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E4%B9%9D-%E7%9B%B4%E6%96%B9%E5%9B%BE%E6%BB%A4%E6%B3%A2histogram-filter%E5%AE%9A%E4%BD%8D/Screenshot-from-2019-12-07-11-55-06.png"></p>
<p>2D 直方图滤波定位算法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_gaussian_observation_pdf</span>(<span class="params">gmap, z, iz, ix, iy, std</span>):</span></span><br><span class="line">    <span class="comment"># predicted range</span></span><br><span class="line">    x = ix * gmap.xy_reso + gmap.minx</span><br><span class="line">    y = iy * gmap.xy_reso + gmap.miny</span><br><span class="line">    d = math.sqrt((x - z[iz, <span class="number">1</span>]) ** <span class="number">2</span> + (y - z[iz, <span class="number">2</span>]) ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># likelihood</span></span><br><span class="line">    pdf = (<span class="number">1.0</span> - norm.cdf(<span class="built_in">abs</span>(d - z[iz, <span class="number">0</span>]), <span class="number">0.0</span>, std))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pdf</span><br><span class="line"></span><br><span class="line">    <span class="comment">#z=[(车辆到Landmark的测量距离，Landmark的x坐标，Landmark的y坐标),...]，z是所有Landmark测量距离和位置的集合，std是测量误差的标准差</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">observation_update</span>(<span class="params">gmap, z, std</span>):</span></span><br><span class="line">    <span class="keyword">for</span> iz <span class="keyword">in</span> <span class="built_in">range</span>(z.shape[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">for</span> ix <span class="keyword">in</span> <span class="built_in">range</span>(gmap.xw):</span><br><span class="line">            <span class="keyword">for</span> iy <span class="keyword">in</span> <span class="built_in">range</span>(gmap.yw):</span><br><span class="line">                gmap.data[ix][iy] *= calc_gaussian_observation_pdf(</span><br><span class="line">                    gmap, z, iz, ix, iy, std)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 概率归一化</span></span><br><span class="line">    gmap = normalize_probability(gmap)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> gmap</span><br></pre></td></tr></table></figure>

<h2 id="运行定位流程-1"><a href="#运行定位流程-1" class="headerlink" title="运行定位流程"></a>运行定位流程</h2><p>设置地图和测量相关参数:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DT = <span class="number">0.1</span>  <span class="comment"># time tick [s]</span></span><br><span class="line">MAX_RANGE = <span class="number">10.0</span>  <span class="comment"># maximum observation range</span></span><br><span class="line">MOTION_STD = <span class="number">1.0</span>  <span class="comment"># standard deviation for motion gaussian distribution</span></span><br><span class="line">RANGE_STD = <span class="number">3.0</span>  <span class="comment"># standard deviation for observation gaussian distribution</span></span><br></pre></td></tr></table></figure>
<p>grid map param</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">XY_RESO = <span class="number">0.5</span>  <span class="comment"># xy grid resolution</span></span><br><span class="line">MINX = -<span class="number">15.0</span></span><br><span class="line">MINY = -<span class="number">5.0</span></span><br><span class="line">MAXX = <span class="number">15.0</span></span><br><span class="line">MAXY = <span class="number">25.0</span></span><br></pre></td></tr></table></figure>
<p>Landmark Position</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">RF_ID = np.array([[<span class="number">10.0</span>, <span class="number">0.0</span>],</span><br><span class="line">                 [<span class="number">10.0</span>, <span class="number">10.0</span>],</span><br><span class="line">                 [<span class="number">0.0</span>, <span class="number">15.0</span>],</span><br><span class="line">                 [-<span class="number">5.0</span>, <span class="number">20.0</span>]])</span><br></pre></td></tr></table></figure>
<p>车辆的初始位置(for simulation)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">xTrue = np.zeros((<span class="number">4</span>, <span class="number">1</span>))</span><br></pre></td></tr></table></figure>

<p>通过Observation模拟自动驾驶车辆对各个LandMark的观测结果和车辆速度的误差。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">observation</span>(<span class="params">xTrue, u, RFID</span>):</span></span><br><span class="line">    xTrue = motion_model(xTrue, u)</span><br><span class="line"></span><br><span class="line">    z = np.zeros((<span class="number">0</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(RFID[:, <span class="number">0</span>])):</span><br><span class="line"></span><br><span class="line">        dx = xTrue[<span class="number">0</span>, <span class="number">0</span>] - RFID[i, <span class="number">0</span>]</span><br><span class="line">        dy = xTrue[<span class="number">1</span>, <span class="number">0</span>] - RFID[i, <span class="number">1</span>]</span><br><span class="line">        d = math.sqrt(dx ** <span class="number">2</span> + dy ** <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> d &lt;= MAX_RANGE:</span><br><span class="line">            <span class="comment"># add noise to range observation</span></span><br><span class="line">            dn = d + np.random.randn() * NOISE_RANGE</span><br><span class="line">            zi = np.array([dn, RFID[i, <span class="number">0</span>], RFID[i, <span class="number">1</span>]])</span><br><span class="line">            z = np.vstack((z, zi))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># add noise to speed</span></span><br><span class="line">    ud = u[:, :]</span><br><span class="line">    ud[<span class="number">0</span>] += np.random.randn() * NOISE_SPEED</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> xTrue, z, ud</span><br></pre></td></tr></table></figure>

<p>执行车辆定位流程:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> SIM_TIME &gt;= time:</span><br><span class="line">    time += DT</span><br><span class="line">    print(<span class="string">&quot;Time:&quot;</span>, time)</span><br><span class="line"></span><br><span class="line">    u = calc_input()</span><br><span class="line"></span><br><span class="line">    yaw = xTrue[<span class="number">2</span>, <span class="number">0</span>]  <span class="comment"># Orientation is known</span></span><br><span class="line">    xTrue, z, ud = observation(xTrue, u, RF_ID)</span><br><span class="line"></span><br><span class="line">    grid_map = histogram_filter_localization(grid_map, u, z, yaw)</span><br></pre></td></tr></table></figure>

<p>定位效果如下:</p>
<p><img src="/2019/12/07/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E4%B9%9D-%E7%9B%B4%E6%96%B9%E5%9B%BE%E6%BB%A4%E6%B3%A2histogram-filter%E5%AE%9A%E4%BD%8D/animation.gif" alt="3"></p>
<p>图片来源:<a href="https://github.com/AtsushiSakai/PythonRobotics">https://github.com/AtsushiSakai/PythonRobotics</a></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>1.<a href="http://www.deepideas.net/robot-localization-histogram-filter/">http://www.deepideas.net/robot-localization-histogram-filter/</a><br>2.<a href="https://github.com/AtsushiSakai/PythonRobotics">https://github.com/AtsushiSakai/PythonRobotics</a></p>
<p>文中完整代码路径:</p>
<p>第3节中的代码github路径:<a href="https://github.com/iamshnoo/localization">https://github.com/iamshnoo/localization</a>，如果无法访问，可以直接通过以下链接下载。</p>
<p><a href="2D_Histogram_Filter.zip">2D_Histogram_Filter</a><a href="2D_Histogram_Filter.zip">下载</a></p>
<p>第4节中的代码的github路径:<a href="https://github.com/AtsushiSakai/PythonRobotics/blob/master/Localization/histogram_filter/histogram_filter.py">https://github.com/AtsushiSakai/PythonRobotics/blob/master/Localization/histogram_filter/histogram_filter.py</a> 如果github无法访问，可以通过以下链接下载:</p>
<p><a href="histogram_filter.zip">histogram_filter</a><a href="histogram_filter.zip">下载</a></p>
]]></content>
      <categories>
        <category>自动驾驶</category>
      </categories>
      <tags>
        <tag>自动驾驶</tag>
        <tag>自动驾驶定位</tag>
        <tag>直方图滤波</tag>
      </tags>
  </entry>
  <entry>
    <title>自动驾驶定位算法-粒子滤波(Particle Filter)</title>
    <url>/2019/12/22/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E5%8D%81%E4%B8%89-%E7%B2%92%E5%AD%90%E6%BB%A4%E6%B3%A2particle-filter/</url>
    <content><![CDATA[<p>自动驾驶对定位的精度的要求在厘米级的，如何实现厘米级的高精度定位呢？一种众所周知的定位方法是利用全球定位系统(GPS)，利用多颗卫星的测量结果，通过三角测量(Triangulation)机制确定目标的位置，GPS定位的原理见《自动驾驶硬件系统-Global Navigation Satellite Systems》，但是GPS并不总是提供高精度定位数据，在GPS信号强的情况下，定位精度在1~3m范围内，在GPS信号弱的情况下，定位精度下降到10~50m范围内。虽然依赖于RTK，可以将卫星定位的精度提高到厘米级，但是在GPS信号弱的场景下，定位精度仍然不能满足应用需求。所以仅仅使用GPS不能实现高可靠的高精度定位的。</p>
<p>为了达到厘米级(3-10cm)的定位精度，除了GPS之外，还需要借助于其它传感器，如激光传感器(LIDAR)、径向距离和角度传感器(Radial distance and angle sensor，RADAR)、视觉传感器(Camera)等，然后利用特定的算法将这些信息融合起来。粒子滤波(Particle Filter)就是利用这些传感器产生的数据进行高精定位的一种常用方法。</p>
<p><img src="/2019/12/22/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E5%8D%81%E4%B8%89-%E7%B2%92%E5%AD%90%E6%BB%A4%E6%B3%A2particle-filter/Particle_filters.gif" alt="Particle Filters From Udacity Lecture"></p>
<span id="more"></span>

<h1 id="粒子滤波-Particle-Filter-的算法思想"><a href="#粒子滤波-Particle-Filter-的算法思想" class="headerlink" title="粒子滤波(Particle Filter)的算法思想"></a>粒子滤波(Particle Filter)的算法思想</h1><p>相对之前提到的[标准卡尔曼滤波]，粒子滤波(Particle Filter)没有线性高斯分布的假设；相对于[直方图滤波]，粒子滤波(Particle Filter)不需要对状态空间进行区间划分。粒子滤波算法采用很多粒子对置信度$\text{bel}(x_t)$进行近似,每个粒子都是对t时刻机器人实际状态的一个猜测。</p>
<p>$\chi_t := { \text{p}_t^{[1]}, \text{p}_t^{[2]}, …, \text{p}_t^{[n]} }$,其中$\text{p}_t^{[i]} \in \text{dom}(x_t)$</p>
<p>越接近t时刻的Ground Truth状态描述的粒子，权重越高。</p>
<p>粒子更新的过程类似于达尔文的自然选择(Natural Selection)机制，与当前Sensor测量状态越匹配的粒子，有更大的机会生存下来，与Sensor测量结果不符的粒子会被淘汰掉，最终粒子都会集中在正确的状态附近。</p>
<h1 id="粒子滤波算法在自动驾驶定位中的应用"><a href="#粒子滤波算法在自动驾驶定位中的应用" class="headerlink" title="粒子滤波算法在自动驾驶定位中的应用"></a>粒子滤波算法在自动驾驶定位中的应用</h1><p>以放置在封闭环境(Close Environment)中的自动驾驶车辆(Kidnapped Vehicle)为例，看它是如何通过粒子滤波(Particle Filter)确定自己所在的位置的。</p>
<p><img src="http://p1.pstatp.com/large/pgc-image/1525514459134fc35d872c9" alt="无人驾驶高精度定位技术(3)-粒子滤波"></p>
<h2 id="先看看自动驾驶车辆有什么？"><a href="#先看看自动驾驶车辆有什么？" class="headerlink" title="先看看自动驾驶车辆有什么？"></a>先看看自动驾驶车辆有什么？</h2><p>1)地图(Map)。每一辆自动驾驶汽车都配备了一幅高精度的地图，地图中包含了大量的地标(Landmark)的位置信息。地标(Landmark)是特定区域内的稳定特征，它们能够在相当长的一段时间内都保持不变，比如路边建筑物、杆状物等。</p>
<p>2)GPS。使用安装在车辆内部的GPS传感器设备，可以提供车辆在地图中的大概的位置范围。基于此局部性范围，仅选择全局地图的一部分用以匹配计算，从而避免大量的冗余计算，提升计算的时效性，从而达到实时定位的目的。</p>
<p>3)Lidar/Radar等传感器。安装在车辆上的Lidar/Radar传感器将测量其与地图路标(Landmark)之间的距离，从而进一步确定车辆的位置。但是Lidar/Radar的测量结果也不准确，存在测量噪声。</p>
<h2 id="将所有传感器信息组合起来"><a href="#将所有传感器信息组合起来" class="headerlink" title="将所有传感器信息组合起来"></a>将所有传感器信息组合起来</h2><p>通过粒子滤波(Particle Filter)将这些所有信息组合在一起，用于实现实时的高精度定位。</p>
<p><img src="/2019/12/22/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E5%8D%81%E4%B8%89-%E7%B2%92%E5%AD%90%E6%BB%A4%E6%B3%A2particle-filter/particle-filter-localization-algorithm-1024x576.png"></p>
<p>图片来源:<a href="https://github.com/sohonisaurabh/CarND-Kidnapped-Vehicle-Project">https://github.com/sohonisaurabh/CarND-Kidnapped-Vehicle-Project</a></p>
<p>粒子滤波(Particle Filter)的主要步骤如下:</p>
<p>1）Initialisation Step：在初始化步骤中，根据GPS坐标输入估算位置，估算位置是存在噪声的，但是可以提供一个范围约束。</p>
<p>2）Prediction Step：在Prediction过程中，对所有粒子(Particles)增加车辆的控制输入(速度、角速度等)，预测所有粒子的下一步位置。</p>
<p>3）Update Step：在Update过程中，根据地图中的Landmark位置和对应的测量距离来更新所有粒子(Particles)的权重。</p>
<p>4）Resample Step：根据粒子(Particles)的权重，对所有粒子(Particles)进行重采样，权重越高的粒子有更大的概率生存下来，权重越小的例子生存下来的概率就越低，从而达到优胜劣汰的目的。</p>
<h2 id="粒子滤波代码实现"><a href="#粒子滤波代码实现" class="headerlink" title="粒子滤波代码实现"></a>粒子滤波代码实现</h2><p><strong>1）Initialisation Step：</strong></p>
<p>初始化阶段，车辆接收到来自GPS的带噪声的测量值，并将其用于初始化车辆的位置。GPS的测量值包括车辆的位置P(x,y)和朝向$\theta$，并且假设测量结果的噪声服从正态分布。</p>
<p>我们创建100个粒子，并用GPS的测量值初始化这些粒子的位置和朝向。粒子的个数是一个可调参数，可根据实际效果和实际需求调整。初始化时，所有粒子的权重相同。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ParticleFilter::init</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y, <span class="keyword">double</span> theta, <span class="keyword">double</span> <span class="built_in">std</span>[])</span> </span>&#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> Set the number of particles. Initialize all particles to first</span></span><br><span class="line">  <span class="comment">// position (based on estimates of</span></span><br><span class="line">  <span class="comment">//   x, y, theta and their uncertainties from GPS) and all weights to 1.</span></span><br><span class="line">  <span class="comment">// Add random Gaussian noise to each particle.</span></span><br><span class="line">  <span class="comment">// <span class="doctag">NOTE:</span> Consult particle_filter.h for more information about this method (and</span></span><br><span class="line">  <span class="comment">// others in this file).</span></span><br><span class="line">  <span class="comment">// TODO Complete</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*Number is particles are chosen in order to run the algorithm in almost real</span></span><br><span class="line"><span class="comment">  time and introduce lowest possible error in localization. This is a tunable</span></span><br><span class="line"><span class="comment">  parameter.*/</span></span><br><span class="line">  num_particles = <span class="number">20</span>;</span><br><span class="line">  default_random_engine gen;</span><br><span class="line"></span><br><span class="line">  <span class="function">normal_distribution&lt;<span class="keyword">double</span>&gt; <span class="title">dist_x</span><span class="params">(x, <span class="built_in">std</span>[<span class="number">0</span>])</span></span>;</span><br><span class="line">  <span class="function">normal_distribution&lt;<span class="keyword">double</span>&gt; <span class="title">dist_y</span><span class="params">(y, <span class="built_in">std</span>[<span class="number">1</span>])</span></span>;</span><br><span class="line">  <span class="function">normal_distribution&lt;<span class="keyword">double</span>&gt; <span class="title">dist_theta</span><span class="params">(theta, <span class="built_in">std</span>[<span class="number">2</span>])</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num_particles; i++) &#123;</span><br><span class="line">    Particle current_particle;</span><br><span class="line">    current_particle.id = i;</span><br><span class="line">    current_particle.x = dist_x(gen);</span><br><span class="line">    current_particle.y = dist_y(gen);</span><br><span class="line">    current_particle.theta = dist_theta(gen);</span><br><span class="line">    current_particle.weight = <span class="number">1.0</span>;</span><br><span class="line"></span><br><span class="line">    particles.push_back(current_particle);</span><br><span class="line">    weights.push_back(current_particle.weight);</span><br><span class="line">  &#125;</span><br><span class="line">  is_initialized = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2）Prediction Step</strong></p>
<p>初始化完成之后，对所有粒子执行车辆运动模型，预测每个粒子下一步出现的位置。粒子的位置更新是通过以下公式完成:</p>
<p><img src="/2019/12/22/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E5%8D%81%E4%B8%89-%E7%B2%92%E5%AD%90%E6%BB%A4%E6%B3%A2particle-filter/prediction-equations-1024x431.png"></p>
<p>车辆运动过程同样存在噪声，前面的文章提到到，比如车辆发出控制指令velocity=10m/s，但是由于设备测量误差、车轮打滑等原因，实际的运动速度可能大于10m/s，也可能小于10m/s，我们同样假设车辆运动噪声服从正态分布。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ParticleFilter::prediction</span><span class="params">(<span class="keyword">double</span> <span class="keyword">delta_t</span>, <span class="keyword">double</span> std_pos[],</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">double</span> velocity, <span class="keyword">double</span> yaw_rate)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> Add measurements to each particle and add random Gaussian noise.</span></span><br><span class="line">  <span class="comment">// <span class="doctag">NOTE:</span> When adding noise you may find std::normal_distribution and</span></span><br><span class="line">  <span class="comment">// std::default_random_engine useful.</span></span><br><span class="line">  <span class="comment">//  http://en.cppreference.com/w/cpp/numeric/random/normal_distribution</span></span><br><span class="line">  <span class="comment">//  http://www.cplusplus.com/reference/random/default_random_engine/</span></span><br><span class="line">  <span class="comment">// TODO complete</span></span><br><span class="line"></span><br><span class="line">  default_random_engine gen;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num_particles; i++) &#123;</span><br><span class="line">    <span class="keyword">double</span> particle_x = particles[i].x;</span><br><span class="line">    <span class="keyword">double</span> particle_y = particles[i].y;</span><br><span class="line">    <span class="keyword">double</span> particle_theta = particles[i].theta;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> pred_x;</span><br><span class="line">    <span class="keyword">double</span> pred_y;</span><br><span class="line">    <span class="keyword">double</span> pred_theta;</span><br><span class="line">    <span class="comment">// Instead of a hard check of 0, adding a check for very low value of</span></span><br><span class="line">    <span class="comment">// yaw_rate</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(yaw_rate) &lt; <span class="number">0.0001</span>) &#123;</span><br><span class="line">      pred_x = particle_x + velocity * <span class="built_in">cos</span>(particle_theta) * <span class="keyword">delta_t</span>;</span><br><span class="line">      pred_y = particle_y + velocity * <span class="built_in">sin</span>(particle_theta) * <span class="keyword">delta_t</span>;</span><br><span class="line">      pred_theta = particle_theta;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      pred_x = particle_x + (velocity / yaw_rate) *</span><br><span class="line">                                (<span class="built_in">sin</span>(particle_theta + (yaw_rate * <span class="keyword">delta_t</span>)) -</span><br><span class="line">                                 <span class="built_in">sin</span>(particle_theta));</span><br><span class="line">      pred_y = particle_y + (velocity / yaw_rate) *</span><br><span class="line">                                (<span class="built_in">cos</span>(particle_theta) -</span><br><span class="line">                                 <span class="built_in">cos</span>(particle_theta + (yaw_rate * <span class="keyword">delta_t</span>)));</span><br><span class="line">      pred_theta = particle_theta + (yaw_rate * <span class="keyword">delta_t</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">normal_distribution&lt;<span class="keyword">double</span>&gt; <span class="title">dist_x</span><span class="params">(pred_x, std_pos[<span class="number">0</span>])</span></span>;</span><br><span class="line">    <span class="function">normal_distribution&lt;<span class="keyword">double</span>&gt; <span class="title">dist_y</span><span class="params">(pred_y, std_pos[<span class="number">1</span>])</span></span>;</span><br><span class="line">    <span class="function">normal_distribution&lt;<span class="keyword">double</span>&gt; <span class="title">dist_theta</span><span class="params">(pred_theta, std_pos[<span class="number">2</span>])</span></span>;</span><br><span class="line"></span><br><span class="line">    particles[i].x = dist_x(gen);</span><br><span class="line">    particles[i].y = dist_y(gen);</span><br><span class="line">    particles[i].theta = dist_theta(gen);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3）Update Step</strong></p>
<p>在预测过程中，我们将车辆的速度和角速度合并到粒子滤波器中，在更新过程中，我们将激光雷达(Lidar)/Radar对于Landmark的测量结果集成到粒子滤波(Particle Filter)中，用于更新所有粒子的权重。</p>
<p>Update Step包含三个主要步骤: a）Transformation；b）Association；c) Update Weights。</p>
<p>Transformation(坐标变换)：Lidar/Radar对Landmark的测量都是相对于车辆自身坐标系统的，需要先转换到地图坐标系。传感器设备都安装在车上，所以传感器的测量结果都是以车辆为坐标原点，X轴沿车辆方向，Y轴沿垂直于X轴的左侧方向。</p>
<p><img src="/2019/12/22/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E5%8D%81%E4%B8%89-%E7%B2%92%E5%AD%90%E6%BB%A4%E6%B3%A2particle-filter/robot_axes_definition.jpg"></p>
<p>假设粒子(Particle)的坐标为$(x_p, y_p)$，Landmark在车辆坐标系中的坐标为$(x_c, y_c)$，Landmark转换到地图(Map)坐标系的坐标为$(x_m, y_m)$，车辆的Heading为$theta$，则从车辆坐标系到地图坐标系的变换矩阵如下:</p>
<p><img src="/2019/12/22/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E5%8D%81%E4%B8%89-%E7%B2%92%E5%AD%90%E6%BB%A4%E6%B3%A2particle-filter/1_uR0dYxOKWHhEPUT6YMGXGg-1024x207.png"></p>
<p>写成非矩阵形式:</p>
<p><img src="/2019/12/22/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E5%8D%81%E4%B8%89-%E7%B2%92%E5%AD%90%E6%BB%A4%E6%B3%A2particle-filter/1_nB_6uUWjDKC-pGWToRTQDQ.png"></p>
<p>通过Transformation我们已经将观测值的坐标转换到地图的坐标空间，下一步是将每个转换后的观测值与Map中的LandMark相关联。Associations主要将LandMark的测量结果匹配到Map中的LandMark。</p>
<p>如下图所示，L1，L2，…，L5是地图(Map)中的Landmark；OBS1、OBS2、OBS3是车辆的Observation。红色方块是车辆的GroundTruth位置，蓝色方块是车辆的预测位置。</p>
<p><img src="/2019/12/22/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E5%8D%81%E4%B8%89-%E7%B2%92%E5%AD%90%E6%BB%A4%E6%B3%A2particle-filter/0_l09z27QssoJvqHLj.png"></p>
<p>我们可以看到地图有5个LandMark，它们分别被标识为L1、L2、L3、L4、L5，并且每个LandMark都有已知的地图位置。我们需要将每个转换后的观测值TOBS1、TOBS2、TOBS3与这5个标识符中的一个相关联。其中一个直观的做法就是每个转换后的观测LandMark坐标与最近的Map LandMark相关联。</p>
<p><img src="/2019/12/22/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E5%8D%81%E4%B8%89-%E7%B2%92%E5%AD%90%E6%BB%A4%E6%B3%A2particle-filter/1_y92MO5zzieuqxH5-uHD0YQ-1024x514.png"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ParticleFilter::dataAssociation</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LandmarkObs&gt; predicted,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LandmarkObs&gt; &amp;observations,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="keyword">double</span> sensor_range)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> Find the predicted measurement that is closest to each observed</span></span><br><span class="line">  <span class="comment">// measurement and assign the</span></span><br><span class="line">  <span class="comment">//   observed measurement to this particular landmark.</span></span><br><span class="line">  <span class="comment">// <span class="doctag">NOTE:</span> this method will NOT be called by the grading code. But you will</span></span><br><span class="line">  <span class="comment">// probably find it useful to</span></span><br><span class="line">  <span class="comment">//   implement this method and use it as a helper during the updateWeights</span></span><br><span class="line">  <span class="comment">//   phase.</span></span><br><span class="line">  <span class="comment">// TODO complete</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*Associate observations in map co-ordinates to predicted landmarks using</span></span><br><span class="line"><span class="comment">nearest neighbor algorithm. Here, the number of observations may be less than</span></span><br><span class="line"><span class="comment">the total number of landmarks as some of the landmarks may be outside the range</span></span><br><span class="line"><span class="comment">of vehicle&#x27;s sensor.*/</span></span><br><span class="line">  <span class="keyword">int</span> i, j;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; observations.size(); i++) &#123;</span><br><span class="line">    <span class="comment">// Maximum distance can be square root of 2 times the range of sensor.</span></span><br><span class="line">    <span class="keyword">double</span> lowest_dist = sensor_range * <span class="built_in">sqrt</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">int</span> closest_landmark_id = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">double</span> obs_x = observations[i].x;</span><br><span class="line">    <span class="keyword">double</span> obs_y = observations[i].y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; predicted.size(); j++) &#123;</span><br><span class="line">      <span class="keyword">double</span> pred_x = predicted[j].x;</span><br><span class="line">      <span class="keyword">double</span> pred_y = predicted[j].y;</span><br><span class="line">      <span class="keyword">int</span> pred_id = predicted[j].id;</span><br><span class="line">      <span class="keyword">double</span> current_dist = dist(obs_x, obs_y, pred_x, pred_y);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (current_dist &lt; lowest_dist) &#123;</span><br><span class="line">        lowest_dist = current_dist;</span><br><span class="line">        closest_landmark_id = pred_id;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    observations[i].id = closest_landmark_id;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Update Weights：完成观测LandMark坐标转换之后和地图匹配之后，就可以更新粒子的权重了。由于粒子(Particle)对所有LandMark的观测都是独立的，所以粒子的总权重是所有观测LandMark的多元高斯概率密度的乘积。</p>
<p><img src="/2019/12/22/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E5%8D%81%E4%B8%89-%E7%B2%92%E5%AD%90%E6%BB%A4%E6%B3%A2particle-filter/1_C8vytZC_jE0unb2TSKRUGw.png"></p>
<p>多元高斯概率密度函数</p>
<p>其中:$\theta_x$和$\theta_y$是x方向和y方向上传感器测量结果的标准差，x和y是Observation LandMark的x和y坐标，$\mu_x$和$\mu_y$是Map LandMark的x和y坐标。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ParticleFilter::updateWeights</span><span class="params">(<span class="keyword">double</span> sensor_range, <span class="keyword">double</span> std_landmark[],</span></span></span><br><span class="line"><span class="function"><span class="params">                                   <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LandmarkObs&gt; observations,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   Map map_landmarks)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> Update the weights of each particle using a mult-variate Gaussian</span></span><br><span class="line">  <span class="comment">// distribution. You can read</span></span><br><span class="line">  <span class="comment">//   more about this distribution here:</span></span><br><span class="line">  <span class="comment">//   https://en.wikipedia.org/wiki/Multivariate_normal_distribution</span></span><br><span class="line">  <span class="comment">// <span class="doctag">NOTE:</span> The observations are given in the VEHICLE&#x27;S coordinate system. Your</span></span><br><span class="line">  <span class="comment">// particles are located</span></span><br><span class="line">  <span class="comment">//   according to the MAP&#x27;S coordinate system. You will need to transform</span></span><br><span class="line">  <span class="comment">//   between the two systems. Keep in mind that this transformation requires</span></span><br><span class="line">  <span class="comment">//   both rotation AND translation (but no scaling). The following is a good</span></span><br><span class="line">  <span class="comment">//   resource for the theory:</span></span><br><span class="line">  <span class="comment">//   https://www.willamette.edu/~gorr/classes/GeneralGraphics/Transforms/transforms2d.htm</span></span><br><span class="line">  <span class="comment">//   and the following is a good resource for the actual equation to implement</span></span><br><span class="line">  <span class="comment">//   (look at equation 3.33 http://planning.cs.uiuc.edu/node99.html</span></span><br><span class="line">  <span class="comment">//   TODO complete</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> i, j;</span><br><span class="line">  <span class="comment">/*This variable is used for normalizing weights of all particles and bring</span></span><br><span class="line"><span class="comment">    them in the range of [0, 1]*/</span></span><br><span class="line">  <span class="keyword">double</span> weight_normalizer = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num_particles; i++) &#123;</span><br><span class="line">    <span class="keyword">double</span> particle_x = particles[i].x;</span><br><span class="line">    <span class="keyword">double</span> particle_y = particles[i].y;</span><br><span class="line">    <span class="keyword">double</span> particle_theta = particles[i].theta;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*Step 1: Transform observations from vehicle co-ordinates to map</span></span><br><span class="line"><span class="comment">     * co-ordinates.*/</span></span><br><span class="line">    <span class="comment">// Vector containing observations transformed to map co-ordinates w.r.t.</span></span><br><span class="line">    <span class="comment">// current particle.</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;LandmarkObs&gt; transformed_observations;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Transform observations from vehicle&#x27;s co-ordinates to map co-ordinates.</span></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; observations.size(); j++) &#123;</span><br><span class="line">      LandmarkObs transformed_obs;</span><br><span class="line">      transformed_obs.id = j;</span><br><span class="line">      transformed_obs.x = particle_x +</span><br><span class="line">                          (<span class="built_in">cos</span>(particle_theta) * observations[j].x) -</span><br><span class="line">                          (<span class="built_in">sin</span>(particle_theta) * observations[j].y);</span><br><span class="line">      transformed_obs.y = particle_y +</span><br><span class="line">                          (<span class="built_in">sin</span>(particle_theta) * observations[j].x) +</span><br><span class="line">                          (<span class="built_in">cos</span>(particle_theta) * observations[j].y);</span><br><span class="line">      transformed_observations.push_back(transformed_obs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*Step 2: Filter map landmarks to keep only those which are in the</span></span><br><span class="line"><span class="comment">     sensor_range of current particle. Push them to predictions vector.*/</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;LandmarkObs&gt; predicted_landmarks;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; map_landmarks.landmark_list.size(); j++) &#123;</span><br><span class="line">      Map::single_landmark_s current_landmark = map_landmarks.landmark_list[j];</span><br><span class="line">      <span class="keyword">if</span> ((<span class="built_in">fabs</span>((particle_x - current_landmark.x_f)) &lt;= sensor_range) &amp;&amp;</span><br><span class="line">          (<span class="built_in">fabs</span>((particle_y - current_landmark.y_f)) &lt;= sensor_range)) &#123;</span><br><span class="line">        predicted_landmarks.push_back(LandmarkObs&#123;</span><br><span class="line">            current_landmark.id_i, current_landmark.x_f, current_landmark.y_f&#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*Step 3: Associate observations to lpredicted andmarks using nearest</span></span><br><span class="line"><span class="comment">     * neighbor algorithm.*/</span></span><br><span class="line">    <span class="comment">// Associate observations with predicted landmarks</span></span><br><span class="line">    dataAssociation(predicted_landmarks, transformed_observations,</span><br><span class="line">                    sensor_range);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*Step 4: Calculate the weight of each particle using Multivariate Gaussian</span></span><br><span class="line"><span class="comment">     * distribution.*/</span></span><br><span class="line">    <span class="comment">// Reset the weight of particle to 1.0</span></span><br><span class="line">    particles[i].weight = <span class="number">1.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> sigma_x = std_landmark[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">double</span> sigma_y = std_landmark[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">double</span> sigma_x_2 = <span class="built_in">pow</span>(sigma_x, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">double</span> sigma_y_2 = <span class="built_in">pow</span>(sigma_y, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">double</span> normalizer = (<span class="number">1.0</span> / (<span class="number">2.0</span> * M_PI * sigma_x * sigma_y));</span><br><span class="line">    <span class="keyword">int</span> k, l;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*Calculate the weight of particle based on the multivariate Gaussian</span></span><br><span class="line"><span class="comment">     * probability function*/</span></span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; transformed_observations.size(); k++) &#123;</span><br><span class="line">      <span class="keyword">double</span> trans_obs_x = transformed_observations[k].x;</span><br><span class="line">      <span class="keyword">double</span> trans_obs_y = transformed_observations[k].y;</span><br><span class="line">      <span class="keyword">double</span> trans_obs_id = transformed_observations[k].id;</span><br><span class="line">      <span class="keyword">double</span> multi_prob = <span class="number">1.0</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (l = <span class="number">0</span>; l &lt; predicted_landmarks.size(); l++) &#123;</span><br><span class="line">        <span class="keyword">double</span> pred_landmark_x = predicted_landmarks[l].x;</span><br><span class="line">        <span class="keyword">double</span> pred_landmark_y = predicted_landmarks[l].y;</span><br><span class="line">        <span class="keyword">double</span> pred_landmark_id = predicted_landmarks[l].id;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (trans_obs_id == pred_landmark_id) &#123;</span><br><span class="line">          multi_prob = normalizer *</span><br><span class="line">                       <span class="built_in">exp</span>(<span class="number">-1.0</span> * ((<span class="built_in">pow</span>((trans_obs_x - pred_landmark_x), <span class="number">2</span>) /</span><br><span class="line">                                    (<span class="number">2.0</span> * sigma_x_2)) +</span><br><span class="line">                                   (<span class="built_in">pow</span>((trans_obs_y - pred_landmark_y), <span class="number">2</span>) /</span><br><span class="line">                                    (<span class="number">2.0</span> * sigma_y_2))));</span><br><span class="line">          particles[i].weight *= multi_prob;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    weight_normalizer += particles[i].weight;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*Step 5: Normalize the weights of all particles since resmapling using</span></span><br><span class="line"><span class="comment">   * probabilistic approach.*/</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; particles.size(); i++) &#123;</span><br><span class="line">    particles[i].weight /= weight_normalizer;</span><br><span class="line">    weights[i] = particles[i].weight;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4）Resample Step</strong></p>
<p>重采样(Resample)是从旧粒子(Old Particles)中随机抽取新粒子(New Particles)并根据其权重进行替换的过程。重采样后，具有更高权重的粒子保留的概率越大，概率越小的粒子消亡的概率越大。</p>
<p>常用的Resample技术是Resampling Wheel。Resampling Wheel的算法思想如下：如下图所示的圆环，圆环的弧长正比与它的权重(即权重越大，弧长越长)。</p>
<p><img src="/2019/12/22/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E5%8D%81%E4%B8%89-%E7%B2%92%E5%AD%90%E6%BB%A4%E6%B3%A2particle-filter/Screenshot-from-2019-12-22-09-06-34.png"></p>
<p>下一步就是利用类似于轮盘赌(Roulette Wheel)的方式，将圆环安装固定步长(Resampling Wheel中将圆环切分为2*max(weights))进行等分，选定一个方向进行n次随机旋转，每次旋转获得一个位置，这个位置就是被选中的粒子的索引。</p>
<p><img src="/2019/12/22/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E5%8D%81%E4%B8%89-%E7%B2%92%E5%AD%90%E6%BB%A4%E6%B3%A2particle-filter/Screenshot-from-2019-12-22-09-52-27.png"></p>
<p>搬运Youtube上的Udacity关于Resampling Wheel视频如下:</p>
<p>来源:<a href="https://www.youtube.com/watch?v=wNQVo6uOgYA">https://www.youtube.com/watch?v=wNQVo6uOgYA</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p3 &#x3D; []</span><br><span class="line">index &#x3D; int(random.random()*N)</span><br><span class="line">beta &#x3D; 0.0</span><br><span class="line">mw &#x3D; max(w)</span><br><span class="line">for i in range(N):</span><br><span class="line">  beta +&#x3D; random.random()*2*mw</span><br><span class="line">  while w[index] &lt; beta:</span><br><span class="line">     beta &#x3D; beta - w[index]</span><br><span class="line">     index &#x3D; index + 1</span><br><span class="line"></span><br><span class="line">  p3.append(p[index]) </span><br></pre></td></tr></table></figure>

<p>Resample的C++代码如下</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ParticleFilter::resample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> Resample particles with replacement with probability proportional to</span></span><br><span class="line">  <span class="comment">// their weight. <span class="doctag">NOTE:</span> You may find std::discrete_distribution helpful here.</span></span><br><span class="line">  <span class="comment">//   http://en.cppreference.com/w/cpp/numeric/random/discrete_distribution</span></span><br><span class="line">  <span class="comment">//   TODO complete</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">vector</span>&lt;Particle&gt; resampled_particles;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create a generator to be used for generating random particle index and beta</span></span><br><span class="line">  <span class="comment">// value</span></span><br><span class="line">  default_random_engine gen;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Generate random particle index</span></span><br><span class="line">  <span class="function">uniform_int_distribution&lt;<span class="keyword">int</span>&gt; <span class="title">particle_index</span><span class="params">(<span class="number">0</span>, num_particles - <span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> current_index = particle_index(gen);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">double</span> beta = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">double</span> max_weight_2 = <span class="number">2.0</span> * *max_element(weights.begin(), weights.end());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; particles.size(); i++) &#123;</span><br><span class="line">    <span class="function">uniform_real_distribution&lt;<span class="keyword">double</span>&gt; <span class="title">random_weight</span><span class="params">(<span class="number">0.0</span>, max_weight_2)</span></span>;</span><br><span class="line">    beta += random_weight(gen);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (beta &gt; weights[current_index]) &#123;</span><br><span class="line">      beta -= weights[current_index];</span><br><span class="line">      current_index = (current_index + <span class="number">1</span>) % num_particles;</span><br><span class="line">    &#125;</span><br><span class="line">    resampled_particles.push_back(particles[current_index]);</span><br><span class="line">  &#125;</span><br><span class="line">  particles = resampled_particles;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后把这些代码串起来，实现车辆定位的功能。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Set up parameters here</span></span><br><span class="line"><span class="keyword">double</span> <span class="keyword">delta_t</span> = <span class="number">0.1</span>;     <span class="comment">// Time elapsed between measurements [sec]</span></span><br><span class="line"><span class="keyword">double</span> sensor_range = <span class="number">50</span>; <span class="comment">// Sensor range [m]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> sigma_pos[<span class="number">3</span>] = &#123;</span><br><span class="line">    <span class="number">0.3</span>, <span class="number">0.3</span>, <span class="number">0.01</span>&#125;; <span class="comment">// GPS measurement uncertainty [x [m], y [m], theta [rad]]</span></span><br><span class="line"><span class="keyword">double</span> sigma_landmark[<span class="number">2</span>] = &#123;</span><br><span class="line">    <span class="number">0.3</span>, <span class="number">0.3</span>&#125;; <span class="comment">// Landmark measurement uncertainty [x [m], y [m]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Read map data</span></span><br><span class="line">Map <span class="built_in">map</span>;</span><br><span class="line"><span class="keyword">if</span> (!read_map_data(<span class="string">&quot;../data/map_data.txt&quot;</span>, <span class="built_in">map</span>)) &#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Error: Could not open map file&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create particle filter</span></span><br><span class="line">ParticleFilter pf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (循环接收车辆的控制信息和Sense信息) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!pf.initialized()) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sense noisy position data from the simulator</span></span><br><span class="line">    <span class="keyword">double</span> sense_x = <span class="built_in">std</span>::stod(j[<span class="number">1</span>][<span class="string">&quot;sense_x&quot;</span>].get&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;());</span><br><span class="line">    <span class="keyword">double</span> sense_y = <span class="built_in">std</span>::stod(j[<span class="number">1</span>][<span class="string">&quot;sense_y&quot;</span>].get&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;());</span><br><span class="line">    <span class="keyword">double</span> sense_theta = <span class="built_in">std</span>::stod(j[<span class="number">1</span>][<span class="string">&quot;sense_theta&quot;</span>].get&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;());</span><br><span class="line"></span><br><span class="line">    pf.init(sense_x, sense_y, sense_theta, sigma_pos);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Predict the vehicle&#x27;s next state from previous (noiseless</span></span><br><span class="line">    <span class="comment">// control) data.</span></span><br><span class="line">    <span class="keyword">double</span> previous_velocity =</span><br><span class="line">        <span class="built_in">std</span>::stod(j[<span class="number">1</span>][<span class="string">&quot;previous_velocity&quot;</span>].get&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;());</span><br><span class="line">    <span class="keyword">double</span> previous_yawrate =</span><br><span class="line">        <span class="built_in">std</span>::stod(j[<span class="number">1</span>][<span class="string">&quot;previous_yawrate&quot;</span>].get&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;());</span><br><span class="line"></span><br><span class="line">    pf.prediction(<span class="keyword">delta_t</span>, sigma_pos, previous_velocity, previous_yawrate);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// receive noisy observation data from the simulator</span></span><br><span class="line">  <span class="comment">// sense_observations in JSON format</span></span><br><span class="line">  <span class="comment">// [&#123;obs_x,obs_y&#125;,&#123;obs_x,obs_y&#125;,...&#123;obs_x,obs_y&#125;]</span></span><br><span class="line">  <span class="built_in">vector</span>&lt;LandmarkObs&gt; noisy_observations;</span><br><span class="line">  <span class="built_in">string</span> sense_observations_x = j[<span class="number">1</span>][<span class="string">&quot;sense_observations_x&quot;</span>];</span><br><span class="line">  <span class="built_in">string</span> sense_observations_y = j[<span class="number">1</span>][<span class="string">&quot;sense_observations_y&quot;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt; x_sense;</span><br><span class="line">  <span class="function"><span class="built_in">std</span>::<span class="built_in">istringstream</span> <span class="title">iss_x</span><span class="params">(sense_observations_x)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::copy(<span class="built_in">std</span>::istream_iterator&lt;<span class="keyword">float</span>&gt;(iss_x), <span class="built_in">std</span>::istream_iterator&lt;<span class="keyword">float</span>&gt;(),</span><br><span class="line">            <span class="built_in">std</span>::back_inserter(x_sense));</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt; y_sense;</span><br><span class="line">  <span class="function"><span class="built_in">std</span>::<span class="built_in">istringstream</span> <span class="title">iss_y</span><span class="params">(sense_observations_y)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::copy(<span class="built_in">std</span>::istream_iterator&lt;<span class="keyword">float</span>&gt;(iss_y), <span class="built_in">std</span>::istream_iterator&lt;<span class="keyword">float</span>&gt;(),</span><br><span class="line">            <span class="built_in">std</span>::back_inserter(y_sense));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x_sense.size(); i++) &#123;</span><br><span class="line">    LandmarkObs obs;</span><br><span class="line">    obs.x = x_sense[i];</span><br><span class="line">    obs.y = y_sense[i];</span><br><span class="line">    noisy_observations.push_back(obs);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Update the weights and resample</span></span><br><span class="line">  pf.updateWeights(sensor_range, sigma_landmark, noisy_observations, <span class="built_in">map</span>);</span><br><span class="line">  pf.resample();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Calculate and output the average weighted error of the particle</span></span><br><span class="line">  <span class="comment">// filter over all time steps so far.</span></span><br><span class="line">  <span class="built_in">vector</span>&lt;Particle&gt; particles = pf.particles;</span><br><span class="line">  <span class="keyword">int</span> num_particles = particles.size();</span><br><span class="line">  <span class="keyword">double</span> highest_weight = <span class="number">-1.0</span>;</span><br><span class="line">  Particle best_particle;</span><br><span class="line">  <span class="keyword">double</span> weight_sum = <span class="number">0.0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num_particles; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (particles[i].weight &gt; highest_weight) &#123;</span><br><span class="line">      highest_weight = particles[i].weight;</span><br><span class="line">      best_particle = particles[i];</span><br><span class="line">    &#125;</span><br><span class="line">    weight_sum += particles[i].weight;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在Udacity Simulator上的演示效果如下:</p>
<p><img src="/2019/12/22/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E5%8D%81%E4%B8%89-%E7%B2%92%E5%AD%90%E6%BB%A4%E6%B3%A2particle-filter/particle_filter.gif"></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>1.<a href="http://www.deepideas.net/robot-localization-histogram-filter/">http://www.deepideas.net/robot-localization-histogram-filter/</a><br>2.<a href="https://github.com/sohonisaurabh/CarND-Kidnapped-Vehicle-Project">https://github.com/sohonisaurabh/CarND-Kidnapped-Vehicle-Project</a><br>3.<a href="https://medium.com/intro-to-artificial-intelligence/kidnapped-vehicle-project-using-particle-filters-udacitys-self-driving-car-nanodegree-aa1d37c40d49">https://medium.com/intro-to-artificial-intelligence/kidnapped-vehicle-project-using-particle-filters-udacitys-self-driving-car-nanodegree-aa1d37c40d49</a></p>
]]></content>
      <categories>
        <category>自动驾驶</category>
      </categories>
      <tags>
        <tag>多传感器融合</tag>
        <tag>自动驾驶定位</tag>
        <tag>Particle Filter</tag>
        <tag>粒子滤波</tag>
      </tags>
  </entry>
  <entry>
    <title>自动驾驶高精地图-概述与分析</title>
    <url>/2019/09/20/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%AB%98%E7%B2%BE%E5%9C%B0%E5%9B%BE-%E6%A6%82%E8%BF%B0%E4%B8%8E%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="HD-Maps-Structure-Functionalities-Accuracy-And-Standards"><a href="#HD-Maps-Structure-Functionalities-Accuracy-And-Standards" class="headerlink" title="HD Maps: Structure, Functionalities, Accuracy And Standards"></a>HD Maps: Structure, Functionalities, Accuracy And Standards</h1><p>在自动驾驶系统的功能系统架构中，高精地图与定位功能紧密相关，与感知模块交互，并最终支持规划和控制模块。</p>
<p><img src="/2019/09/20/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%AB%98%E7%B2%BE%E5%9C%B0%E5%9B%BE-%E6%A6%82%E8%BF%B0%E4%B8%8E%E5%88%86%E6%9E%90/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2019-09-20-%E4%B8%8A%E5%8D%8810.59.57-1024x434.png" alt="Functional system architecture of an automated driving system."></p>
<p>不同级别的自动驾驶对地图的精细程度要求不同。高精地图不仅存储Road和Lane等详细信息，而且还存储Landmark信息和周围环境信息用于辅助车辆定位；车辆定位信息和高精地图信息又作为Perception模块的输入，实现为物理环境建模的目的；Planning&amp;Control模块依据Perception模块输出的环境模型规划和控制车辆的驾驶行为；同时Perception的建模信息又可以作为高精地图的输入，实现对高精地图的及时更新。</p>
<span id="more"></span>

<h2 id="HD-Map-Structure"><a href="#HD-Map-Structure" class="headerlink" title="HD Map Structure"></a>HD Map Structure</h2><p><img src="/2019/09/20/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%AB%98%E7%B2%BE%E5%9C%B0%E5%9B%BE-%E6%A6%82%E8%BF%B0%E4%B8%8E%E5%88%86%E6%9E%90/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2019-09-20-%E4%B8%8A%E5%8D%8811.21.29-1024x162.png" alt="Examples of layered structure of an HD Map"></p>
<p>如上图所示，虽然叫法不同，大部分地图厂商的高精地图都基本分为三层:Road Model, Lane Model 和Localization Model。</p>
<h2 id="HD-Map-Functionalities"><a href="#HD-Map-Functionalities" class="headerlink" title="HD Map Functionalities"></a>HD Map Functionalities</h2><p><img src="/2019/09/20/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%AB%98%E7%B2%BE%E5%9C%B0%E5%9B%BE-%E6%A6%82%E8%BF%B0%E4%B8%8E%E5%88%86%E6%9E%90/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2019-09-20-%E4%B8%8A%E5%8D%8811.26.32-1024x483.png" alt="functionality of an HD Map. (a) Road Model supports navigation; (b) Localisation Model enables perception using Lane Model: the ego vehicle understands the presence of lane markings and an obstacle; (c) Lane Model supports tactical planning, for example, lane-changing manoeuvre."></p>
<p>如上图所示，Road Model用于导航规划；Lane Model用于感知和考虑当前道路和交通状况的路线规划；Localization Model用于在地图中定位车辆，只有当车辆在地图中准确定位时，Lane Model才能帮助车辆感知。</p>
<h2 id="Map-Accuracy"><a href="#Map-Accuracy" class="headerlink" title="Map Accuracy"></a>Map Accuracy</h2><p><img src="/2019/09/20/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%AB%98%E7%B2%BE%E5%9C%B0%E5%9B%BE-%E6%A6%82%E8%BF%B0%E4%B8%8E%E5%88%86%E6%9E%90/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2019-09-20-%E4%B8%8A%E5%8D%8811.37.11-1024x384.png" alt="Relative accuracy defined in EDMap (2004). (a) Incorrect relative accuracies: &lt; 20 cm (orange) and &gt; 20 cm (red) respectively; (b) Correct relative accuracies: &lt; 20cm (orange) and &gt; 20cm (red) respectively."></p>
<p>绝对精度(Absolute Accuracy)：Map Geometry偏移Ground Truth Geometry的最大空间距离。</p>
<p>相对精度(Relative Accuracy)： 首先Align Map Geometry和Ground Truth Geometry，然后计算二者之间的最大空间距离。</p>
<p><img src="/2019/09/20/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%AB%98%E7%B2%BE%E5%9C%B0%E5%9B%BE-%E6%A6%82%E8%BF%B0%E4%B8%8E%E5%88%86%E6%9E%90/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2019-09-20-%E4%B8%8A%E5%8D%8811.47.29-1024x277.png" alt="The map accuracy parameters set by some notable map providers"></p>
<h2 id="HD-Map-Related-Standards"><a href="#HD-Map-Related-Standards" class="headerlink" title="HD Map Related Standards"></a>HD Map Related Standards</h2><p>ISO/TC 204 发布的Geographic Data File (GDF) 提供了一个用于地图信息存储和交换的基础版本。GDF 5.1将支持自动驾驶，并于2018年发布了Local Dynamic Map (LDM)标准，存储在LDM的信息包含天气、道路、交通状况、静态信息等。</p>
<p>许多政府和工业团体都在积极推动自动驾驶地图的标准化，比如，Open AutoDrive Forum (OADF) (openauto-drive.org) 作为cross-domain平台推动自动驾驶标准化。Traveller Information Services Association (TISA) (tisa.org) 正在讨论将Transport Protocol Experts Group (TPEGTM) 的交通信息精度提升到车道级别。Advanced Driver Assistance Systems Interface Specification (ADASIS) Forum (adasis.org) 发布ADASIS protocol V3以支持车内高精地图分发。Sensoris (sensor-is.org) 正在致力于基于车辆的传感器数据交换格式的标准化，以及车辆到云和云到云接口的研发。Navigation Data Standard (NDS, 2016) 和 OpenDRIVE(OpenDRIVE, 2015)是两大高精地图工业级标准，它们与GDF的对比如下:</p>
<p><img src="/2019/09/20/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%AB%98%E7%B2%BE%E5%9C%B0%E5%9B%BE-%E6%A6%82%E8%BF%B0%E4%B8%8E%E5%88%86%E6%9E%90/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2019-09-20-%E4%B8%8A%E5%8D%8811.50.19-1024x653.png"></p>
<p>还有一些地区和国家也在研究自动驾驶的地图标准。日本在研究Dynamic Map(en.sip- adus.go.jp)；2018年5月，中国智能与互联汽车产业创新联盟（CAICV）自动驾驶地图工作组（caicv.org.cn）正式成立，该工作组的愿景是实现中国自动驾驶和高清地图的标准化。</p>
<h1 id="HD-Map-Models"><a href="#HD-Map-Models" class="headerlink" title="HD Map Models"></a>HD Map Models</h1><p>HD Map Model包含Road Model, Lane Model和Localization Model。</p>
<p><img src="/2019/09/20/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%AB%98%E7%B2%BE%E5%9C%B0%E5%9B%BE-%E6%A6%82%E8%BF%B0%E4%B8%8E%E5%88%86%E6%9E%90/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2019-09-20-%E4%B8%8B%E5%8D%8812.23.46-1024x953.png" alt="Road Model (green polylines and yellow nodes) on top of Lane Model."></p>
<h2 id="Road-Model"><a href="#Road-Model" class="headerlink" title="Road Model"></a>Road Model</h2><p>Road Model使用有序的形状点序列组成的线段表示，每个Road Section都包含Start Nodes和End Nodes。使用形状点序列定义Curved Road Geometry，优点是表达简单，增加中间点的密度即可以获得更好的精度，但缺点是需要存储大量的信息，Road Model的道路属性和丰富的语义信息可以为自动驾驶带来更多的先验知识。</p>
<p>此外，相对于传统的2D导航地图，高精地图的Road Model增加了高度信息，对于精度的要求也更高。不同地图提出的用于ADAS的元素级精度要求如下表:</p>
<p><img src="/2019/09/20/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%AB%98%E7%B2%BE%E5%9C%B0%E5%9B%BE-%E6%A6%82%E8%BF%B0%E4%B8%8E%E5%88%86%E6%9E%90/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2019-09-20-%E4%B8%8B%E5%8D%8812.40.17-1024x482.png" alt="Examples of map content for ADAS and accuracy requirements"></p>
<h2 id="Lane-Model"><a href="#Lane-Model" class="headerlink" title="Lane Model"></a>Lane Model</h2><p>最著名的车道地图是DARPA城市挑战赛使用的Road Network Description File (RDNF)，但是RDNF是2D地图，并且也非常粗糙。</p>
<p>Bertha Drive项目使用的基于Lanelet的三维车道模型中，车道不仅包含高度精确的左右边界的可行驶区域，而且车道行驶所需要的交通规则信息。</p>
<p>通常情况下，Lane Model包含如下信息：</p>
<h3 id="Highly-accurate-geometry-model"><a href="#Highly-accurate-geometry-model" class="headerlink" title="Highly accurate geometry model"></a>Highly accurate geometry model</h3><p>Lane Geometry Mode在很大程度上决定了Lane Model的准确性、存储效率和可用性，该模型不仅涵盖车道中心线、车道边界和RoadMarkings，还应包含潜在的三维道路结构，如斜坡和立交桥等。此外，它还应该具备辅助车辆高效计算的能力。</p>
<h3 id="Lane-attributes"><a href="#Lane-attributes" class="headerlink" title="Lane attributes"></a>Lane attributes</h3><p><img src="/2019/09/20/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%AB%98%E7%B2%BE%E5%9C%B0%E5%9B%BE-%E6%A6%82%E8%BF%B0%E4%B8%8E%E5%88%86%E6%9E%90/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2019-09-20-%E4%B8%8B%E5%8D%8812.44.01-1024x274.png"></p>
<p>Lane Attribute主要包括车道中心线(沿车道中间的理论线)和具有不同形状、颜色和材质的车道边界。</p>
<h3 id="Traffic-Regulations-Road-Furniture-And-Parking"><a href="#Traffic-Regulations-Road-Furniture-And-Parking" class="headerlink" title="Traffic Regulations, Road Furniture And Parking"></a>Traffic Regulations, Road Furniture And Parking</h3><p>交通规则和相关信息/参数可以嵌入到其他属性中，例如车道的道路类型可以隐式地指示道路的默认限速。同时Lane Model也应具备分段车道属性的表达能力。与车道关联的停车位和道路设施也需要高度精确的位置信息。</p>
<h2 id="Lane-connectivity"><a href="#Lane-connectivity" class="headerlink" title="Lane connectivity"></a>Lane connectivity</h2><p>Lane connectivity描述了车道或车道的连接关系。交叉路口的拓扑和语义方面由Traffic Matrices处理，Traffic Matrices定义了符合交通规则的所有操作。</p>
<p>车道连通性几何信息通过连接出入口控制点的Virtual Lane表示，Virtual Lane可以使用与普通车道相同的几何车道模型(NDS, 2016)或者采用完全不同的车道模型表示方法(因为两个固定的控制点会影响车道曲线的连续性)。</p>
<p><img src="/2019/09/20/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%AB%98%E7%B2%BE%E5%9C%B0%E5%9B%BE-%E6%A6%82%E8%BF%B0%E4%B8%8E%E5%88%86%E6%9E%90/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2019-09-20-%E4%B8%8B%E5%8D%881.12.03.png" alt="An intersection with entry (blue dots) and exit (red dots) control points and the centrelines of virtual lanes (blue dashed arrow)."></p>
<p>下表列举了各个地图供应商和标准化组织提供的Lane Model内容和精度要求。</p>
<p><img src="/2019/09/20/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%AB%98%E7%B2%BE%E5%9C%B0%E5%9B%BE-%E6%A6%82%E8%BF%B0%E4%B8%8E%E5%88%86%E6%9E%90/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2019-09-20-%E4%B8%8B%E5%8D%881.21.23-1024x568.png" alt="Examples of Lane Model content and accuracy requirements"></p>
<h2 id="Localisation-Model"><a href="#Localisation-Model" class="headerlink" title="Localisation Model"></a>Localisation Model</h2><p>Localisation Model用于辅助车辆定位。根据所使用传感器方案的不同，定位技术分为Feature Based的方法和Dense Information Based的方法。</p>
<p><strong>Feature-based Localisation Model</strong></p>
<p>Feature-Based Localisation Model通常被存储为Graph，每一个Graph Node包含Image和3D Landmark，连接Graph Node的Edge是车辆Pose。Landmark通常使用特征描述子(Feature Descriptor)表达，以方便在Live Image和Map进行Feature匹配。</p>
<p><img src="/2019/09/20/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%AB%98%E7%B2%BE%E5%9C%B0%E5%9B%BE-%E6%A6%82%E8%BF%B0%E4%B8%8E%E5%88%86%E6%9E%90/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2019-09-15-%E4%B8%8B%E5%8D%881.16.52-1024x340.png" alt="Localisation Model examples. (a) Landmark map with green landmarks and orange vehicle pose; (b) Road marking map with blue line segments"></p>
<p>Feature Map易用高效，但是制作Offline Map和Online Localization都需要进行Feature Extraction，过程繁琐复杂。</p>
<p><strong>Dense Information-Based Localisation Model</strong></p>
<p>Dense Information-Based Localisation Model可以进一步分为Location Based(Grid Map)或View Based(如Point Cloud)。毫米波雷达和RGB-D相机也可以用于收集Dense Information进行制图，但LiDAR是目前测绘和自动驾驶公司(HERE、TomTom、Google等)最广泛使用的采集设备。</p>
<p><img src="/2019/09/20/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%AB%98%E7%B2%BE%E5%9C%B0%E5%9B%BE-%E6%A6%82%E8%BF%B0%E4%B8%8E%E5%88%86%E6%9E%90/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2019-09-15-%E4%B8%8B%E5%8D%881.45.18-1024x323.png" alt="Examples of 2D grid map formats. (a) Reflectivity grid map; (b) Occupancy grid map (colour denotes the distance to road centre) ."></p>
<p>2D Grid Map探索X-Y平面(地面)和X-Z平面(垂直于地面)，如上左图所示，假设道路表面平坦，每一个Grid Cell被激光雷达的平均反射值填充，或者由激光雷达反射值的高斯分布填充，两种定位方法的相对精度均在10厘米量级。另一种方法是使用Occupancy Grid Map，如上右图所示，每一个Grid Cell被由距道路中心距离和网格被占用概率联合定义的累积概率填充，通过该手段将道路的3D信息压缩为2D栅格地图，从而达到40cm以内的绝对定位精度。2D Grid Map的缺点在于对于环境变化不具鲁棒性。</p>
<p>2.5D地图是包含高度信息的2D Map。Wolcott和Eustice(2014)在2D X-Y Reflectivity Grid Map中添加Z信息，以描绘道路的高度变化；Morales等人(2010)将Estimated Height添加到2D Map中心线地图中，以在室外林地环境中实现定位；此外，Wolcott和Eustice(2015)提出了对Z高度和反射率值进行建模，以捕获结构和外观变化，并使用多分辨率搜索进行优化。</p>
<p><img src="/2019/09/20/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%AB%98%E7%B2%BE%E5%9C%B0%E5%9B%BE-%E6%A6%82%E8%BF%B0%E4%B8%8E%E5%88%86%E6%9E%90/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2019-09-15-%E4%B8%8B%E5%8D%883.18.52-1024x286.png" alt="continued effort of improvement。a) 2D reflectivity grid map；b) 2D probabilistic grid map;  
(c) 2D probabilistic grid map with height attribute; (d) 2·5D grid map. Only the i-th cell is annotated. Note: i= the index of the cell; z= height; r= reflectivity value; μ = mean; G = Gaussian distribution."></p>
<p>3D点云地图通常由latitude、longitude、altitude、ntensity信息组成的点序列组成，并且可以用Camera Data赋予点云数据纹理。3D点云地图随着面积的增加，其内存占用也呈现指数级增长，这给实际使用带来很多问题。</p>
<p>定位模型或高精地图面临的挑战之一是如何反映环境中的结构、季节或光照条件变化。Churchill和New-man(2013) 提出了考虑“在不同的时间、不同的天气和光照条件”场景差异的方案，Maddern等人(2015)提出的3D PointCloud Map也采用了这种Experience-Based Navigation的方法。Irie(2010)尝试将Grid Map和Feature整合到一个Map中，以提高对光照变化的鲁棒性。在未来，实时地图将是地图的终极目标。</p>
<h1 id="HD-Map-Mapping"><a href="#HD-Map-Mapping" class="headerlink" title="HD Map Mapping"></a>HD Map Mapping</h1><p>HDMap Mapping的主要方法是收集车辆的传感器数据(GNSS Receiver、IMU、Camera、Lidar、Wheel Odometry等)，然后依赖于Mobile Mapping System (MMS) 和 Simultaneous Localisation and Mapping (SLAM)等方法完成地图制作。</p>
<p>NMS依赖于GNSS/IMU进行Pose Estimation，地图采集车的所有传感器数据都包含精确的时间戳，在用于制图之前，需要对这些数据进行离线处理和校准，比如，通过合并同一场景的包含地理信息的图像来创建Dense Localisation Model，从包含地理信息的图像中提取Feature用于车道建模也是热门的研究领域。另外一个研究课题是如何用解析方程来拟合道路和车道曲线，Betaille等人(2010)提出clothoids曲线来拟合实际道路曲线； Gwon等人(2016)提出使用样条曲线拟合实际道路曲线，样条曲线的每一个曲线段为三次多项式。</p>
<p>SLAM最初是针对没有GNSS的环境开发的，其目的是利用Ego Motion Measurements 和Loop Closures建立一个全球一致的Environment Representation ，该Representation提供的Environment Topology和Metric Representation可以辅助进行自动驾驶定位。</p>
<p>MMS和SLAM都有自己的挑战。对于NMS而言，挑战在于GNSS在城市区域的可用性和准确性相对较低；对于SLAM而言，挑战在于随着采集区域的增加，计算成本和计算复杂度爆炸性增长。这些原因催生了对SLAM和GNSS/IMU相互集成的研究，通过增加其他信息来源，如可公开获取的航空影像和数字地图，而不是仅仅使用Loop Closure作为减小SLAM不确定性的唯一来源。</p>
<p>HDMap Mapping面临的挑战之一是实现全自动化，目前的方案是引入机器学习的方法从图像数据中提取道路网络语义信息；另一个挑战是实现大规模制图，解决方案是数据众包，利用来自同一条道路的车辆的传感器数据用于改进更新现有地图或制作新地图。</p>
<p>如果政府在规划、施工遵守标准施工方案，那么从设计和施工文件中获取HDMap信息也是一种潜在可行的方法。</p>
<h1 id="Vehicle-Localization-With-HD-Map-And-Numerical-Analysis"><a href="#Vehicle-Localization-With-HD-Map-And-Numerical-Analysis" class="headerlink" title="Vehicle Localization With HD Map And Numerical Analysis"></a>Vehicle Localization With HD Map And Numerical Analysis</h1><h2 id="Map-Relative-Localisation"><a href="#Map-Relative-Localisation" class="headerlink" title="Map Relative Localisation"></a>Map Relative Localisation</h2><p>Map Relative Localization是解决主车相对于HDMap的位置估计问题。自动驾驶要求非常精确的六自由度(DOF)定位，这对于定义主车视野(Field Of View，FOV)以有效利用车道模型(Lane Model)进行感知至关重要。Levinson和Thrun(2010)研究认为厘米级定位精度对于任何开放道路的自动驾驶都足够使用。自动驾驶车辆还需要较高的位置更新频率：对于某些系统，更新频率高达200HZ（Levinson等人，2007年）；10HZ，限速63公里/小时（Levinson和Thrun，2010年），20HZ，时速60公里（Cui等人，2014年）。</p>
<p>高精地图(HDMap)提供已知的环境信息，然后使用环境感知传感器感知的信息用于定位。通过将从实时图像或扫描中检测到的Feature注册到定位模型中，相对于地图的六自由度(DOF)车辆姿态估计可以达到10-20厘米精度，有了定位信息，就可以将车道模型(Lane Mode)引入到感知任务中，从而将复杂的静态环境感知问题转化为定位问题。</p>
<p><img src="/2019/09/20/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%AB%98%E7%B2%BE%E5%9C%B0%E5%9B%BE-%E6%A6%82%E8%BF%B0%E4%B8%8E%E5%88%86%E6%9E%90/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2019-09-16-%E4%B8%8A%E5%8D%888.30.57-1024x657.png" alt="Feature-based and appearance-based vehicle localisation flow chart."></p>
<p>上图显示了地图相对定位的一般流程。Appearance Based的方法避开了Feature Detection的步骤。“Data Association”将环境传感器测量信息与地图关联起来。当使用贝叶斯状态估计器时，如Kalman Filter(KF)以及其变种(Extended、Unscented等)、Particle Filter (PF)等，Pose Estimation过程对应于State Estimation。</p>
<p>使用KF时，Data Association对于Pose Estimation是必不可少的；当使用PF时它可以简化，但是可以分别考虑每个粒子。Map Relative Localisation使用的Data Association方法包括基于描述子的Feature Matching、Direct Points Comparison、Point Set Registration(Iterative Closest Point，ICP)；Appearance-based Matching使用Normalised Mutual Information、Maximum Likelihood Estimate、Normalised Information Distance、ICP和 Normal Distribution Transformation (NDT)进行Direct Registration。</p>
<p><img src="/2019/09/20/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%AB%98%E7%B2%BE%E5%9C%B0%E5%9B%BE-%E6%A6%82%E8%BF%B0%E4%B8%8E%E5%88%86%E6%9E%90/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2019-09-16-%E4%B8%8B%E5%8D%8811.42.16-1024x344.png" alt="(a) The 3D point cloud-based HD Map; (b) A section of the road in the map and one matched scan (in red)."></p>
<h2 id="Numerical-analysis"><a href="#Numerical-analysis" class="headerlink" title="Numerical analysis"></a>Numerical analysis</h2><p>本节分析使用NDT作为Data Association和主车Pose Estimation的HDMap-Based Localisation，并比较了使用GNSS和ICP的Matching效果。</p>
<p>Input Scan: $S={x_i}(i=1…N_s)$，Map:$M={y_i}(i=1…N_m)$，Scan和Map匹配的过程称为Scan Matching或者Registration，匹配的结果是Vehicle相对于Map的六自由度刚体变换参数:$p=(\psi, \theta, \phi, t_x, t_y, t_z)$。</p>
<p>ICP和NDT是两个广泛使用的Registration方法。ICP将Registration任务看做Source和Target的几何要素(点、线、面)的对应问题。NDT可以避免建立这种对应关系。</p>
<p>本节研究使用Autoware的真实数据集，从数据集中提取了大约3000个Scan作为Input Scan。Scan采用0.5m Voxel Grid进行下采样，然后分别使用NDT(Cell Size=0.5m)和ICP与Autoware的3D Point Cloud Map进行Match。</p>
<p>记初始Pose为$p_0$、Input Scan为S，地图为M，NDT过程分为如下两步：</p>
<p><strong>Step 1. Build NDT map</strong></p>
<p><img src="/2019/09/20/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%AB%98%E7%B2%BE%E5%9C%B0%E5%9B%BE-%E6%A6%82%E8%BF%B0%E4%B8%8E%E5%88%86%E6%9E%90/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2019-09-18-%E4%B8%8A%E5%8D%888.33.40-1024x510.png"></p>
<p>如上图所示，第一步是将Point Cloud分散到预先定义的固定大小的立方体${\beta_i}，=1,…,m$。假设任意一个立方体$\beta$包含的点集${z_k},k=1,…,n$。Mean Vector $\mu$和Covariance Matrix $\sum$定义如下:</p>
<p><img src="/2019/09/20/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%AB%98%E7%B2%BE%E5%9C%B0%E5%9B%BE-%E6%A6%82%E8%BF%B0%E4%B8%8E%E5%88%86%E6%9E%90/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2019-09-18-%E4%B8%8A%E5%8D%888.45.43.png"></p>
<p>对于每一个$\beta_i$进行3D正态分布建模:$N(\mu, \sum)$，它的概率密度函数如下:</p>
<p>$prob(x)=\frac{1}{c}exp(-\frac{(x-\mu)^T \sum^{-1} (x-\mu)}{2})$</p>
<p><strong>Step 2. Align the input scan to the map.</strong></p>
<p>初始Pose:$p=p_0$，采用牛顿法迭代优化姿态p。</p>
<p>1.采用姿态p对Input Scan进行变换。如下，其中T是Transformation Function。</p>
<p>$x_i^{\prime} = T(p, x_i)$</p>
<p>将$x_i^{\prime}$映射到Map Cell，通过概率密度函数计算Score:</p>
<p>$s(p) = -\sum_{i=1}^{N_s} prob(T(p, x_i))$</p>
<p>2. 计算$\Delta p$</p>
<p>$H \Delta p = -g$</p>
<p>其中H是Hessian矩阵，g是梯度矩阵；</p>
<p>3. 更新姿态p</p>
<p>$p = p + \Delta p$</p>
<p>持续上述过程，直至$\Delta p$小于预定阈值。</p>
<p><img src="/2019/09/20/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%AB%98%E7%B2%BE%E5%9C%B0%E5%9B%BE-%E6%A6%82%E8%BF%B0%E4%B8%8E%E5%88%86%E6%9E%90/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2019-09-19-%E4%B8%8A%E5%8D%888.34.18-1024x337.png" alt="Comparing the coordinates from NDT, ICP and GNSS RTK (m)"></p>
<p>如上图，NDT、ICP、GNSS RTK的RMS Difference都在10cm以内。</p>
<p><img src="/2019/09/20/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E9%AB%98%E7%B2%BE%E5%9C%B0%E5%9B%BE-%E6%A6%82%E8%BF%B0%E4%B8%8E%E5%88%86%E6%9E%90/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2019-09-19-%E4%B8%8A%E5%8D%888.38.21-1024x420.png" alt="Comparison the trajectories between: (a) NDT and GNSS; (b) NDT and ICP."></p>
<p>如上图所示，NDT、ICP、GNSS RTK的水平坐标差异大多数都在$2\sigma$范围内(&lt;20cm)，但是也有一些超出了$4\sigma$范围，因此要应用在自动驾驶领域，需要对定位输出做严格的质量控制。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接:"></a>参考链接:</h1><p>Paper: High Definition Map for Automated Driving: Overview and Analysis</p>
<h1 id="该文章为翻译文章，原文出处："><a href="#该文章为翻译文章，原文出处：" class="headerlink" title="该文章为翻译文章，原文出处："></a>该文章为翻译文章，原文出处：</h1><p>Liu, R., Wang, J., &amp; Zhang, B. (n.d.). High Definition Map for Automated Driving: Overview and Analysis. Journal of Navigation, 1-18. doi:10.1017/S0373463319000638</p>
]]></content>
      <categories>
        <category>自动驾驶</category>
      </categories>
      <tags>
        <tag>自动驾驶</tag>
        <tag>高精地图</tag>
        <tag>自动驾驶定位</tag>
        <tag>NDS</tag>
        <tag>NDT</tag>
        <tag>定位模型</tag>
        <tag>相对定位</tag>
        <tag>绝对定位</tag>
        <tag>车道模型</tag>
        <tag>道路模型</tag>
      </tags>
  </entry>
  <entry>
    <title>Tensorflow-Sequential API vs Functional API</title>
    <url>/2021/04/05/tensorflow-Sequential-API-vs-Functional-API/</url>
    <content><![CDATA[<h1 id="Single-Input-amp-Single-Output-Model"><a href="#Single-Input-amp-Single-Output-Model" class="headerlink" title="Single Input &amp; Single Output Model"></a>Single Input &amp; Single Output Model</h1><h2 id="Imports"><a href="#Imports" class="headerlink" title="Imports"></a>Imports</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.python.keras.utils.vis_utils <span class="keyword">import</span> plot_model</span><br><span class="line"><span class="keyword">import</span> pydot</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.models <span class="keyword">import</span> Model</span><br></pre></td></tr></table></figure>

<h2 id="Sequential-API"><a href="#Sequential-API" class="headerlink" title="Sequential API"></a>Sequential API</h2><p>使用Sequential API构建Model。</p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_model_with_sequential</span>():</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># instantiate a Sequential class and linearly stack the layers of your model</span></span><br><span class="line">    seq_model = tf.keras.models.Sequential([tf.keras.layers.Flatten(input_shape=(<span class="number">28</span>, <span class="number">28</span>)),</span><br><span class="line">                                            tf.keras.layers.Dense(<span class="number">128</span>, activation=tf.nn.relu),</span><br><span class="line">                                            tf.keras.layers.Dense(<span class="number">10</span>, activation=tf.nn.softmax)])</span><br><span class="line">    <span class="keyword">return</span> seq_model</span><br></pre></td></tr></table></figure>

<h2 id="Functional-API"><a href="#Functional-API" class="headerlink" title="Functional API"></a>Functional API</h2><p>使用Functional API构建相同的Model。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_model_with_functional</span>():</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># instantiate the input Tensor</span></span><br><span class="line">    input_layer = tf.keras.Input(shape=(<span class="number">28</span>, <span class="number">28</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># stack the layers using the syntax: new_layer()(previous_layer)</span></span><br><span class="line">    flatten_layer = tf.keras.layers.Flatten()(input_layer)</span><br><span class="line">    first_dense = tf.keras.layers.Dense(<span class="number">128</span>, activation=tf.nn.relu)(flatten_layer)</span><br><span class="line">    output_layer = tf.keras.layers.Dense(<span class="number">10</span>, activation=tf.nn.softmax)(first_dense)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># declare inputs and outputs</span></span><br><span class="line">    func_model = Model(inputs=input_layer, outputs=output_layer)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> func_model</span><br></pre></td></tr></table></figure>

<h2 id="Model-Visualization"><a href="#Model-Visualization" class="headerlink" title="Model Visualization"></a>Model Visualization</h2><p>模型可视化，可以看到两种方法构建的模型完全等效。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#model = build_model_with_functional()</span></span><br><span class="line">model = build_model_with_sequential()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot model graph</span></span><br><span class="line">plot_model(model, show_shapes=<span class="literal">True</span>, show_layer_names=<span class="literal">True</span>, to_file=<span class="string">&#x27;model.png&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/2021/04/05/tensorflow-Sequential-API-vs-Functional-API/model_visual.png"></p>
<h2 id="Training-the-model"><a href="#Training-the-model" class="headerlink" title="Training the model"></a>Training the model</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># prepare fashion mnist dataset</span></span><br><span class="line">mnist = tf.keras.datasets.fashion_mnist</span><br><span class="line">(training_images, training_labels), (test_images, test_labels) = mnist.load_data()</span><br><span class="line">training_images = training_images / <span class="number">255.0</span></span><br><span class="line">test_images = test_images / <span class="number">255.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># configure, train, and evaluate the model</span></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=tf.optimizers.Adam(),</span><br><span class="line">              loss=<span class="string">&#x27;sparse_categorical_crossentropy&#x27;</span>,</span><br><span class="line">              metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br><span class="line">model.fit(training_images, training_labels, epochs=<span class="number">5</span>)</span><br><span class="line">model.evaluate(test_images, test_labels)</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Downloading data from https:&#x2F;&#x2F;storage.googleapis.com&#x2F;tensorflow&#x2F;tf-keras-datasets&#x2F;train-labels-idx1-ubyte.gz</span><br><span class="line">32768&#x2F;29515 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 0us&#x2F;step</span><br><span class="line">Downloading data from https:&#x2F;&#x2F;storage.googleapis.com&#x2F;tensorflow&#x2F;tf-keras-datasets&#x2F;train-images-idx3-ubyte.gz</span><br><span class="line">26427392&#x2F;26421880 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 0us&#x2F;step</span><br><span class="line">Downloading data from https:&#x2F;&#x2F;storage.googleapis.com&#x2F;tensorflow&#x2F;tf-keras-datasets&#x2F;t10k-labels-idx1-ubyte.gz</span><br><span class="line">8192&#x2F;5148 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 0us&#x2F;step</span><br><span class="line">Downloading data from https:&#x2F;&#x2F;storage.googleapis.com&#x2F;tensorflow&#x2F;tf-keras-datasets&#x2F;t10k-images-idx3-ubyte.gz</span><br><span class="line">4423680&#x2F;4422102 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 0us&#x2F;step</span><br><span class="line">Train on 60000 samples</span><br><span class="line">Epoch 1&#x2F;5</span><br><span class="line">60000&#x2F;60000 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 5s 76us&#x2F;sample - loss: 0.4978 - accuracy: 0.8248</span><br><span class="line">Epoch 2&#x2F;5</span><br><span class="line">60000&#x2F;60000 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 4s 71us&#x2F;sample - loss: 0.3732 - accuracy: 0.8661</span><br><span class="line">Epoch 3&#x2F;5</span><br><span class="line">60000&#x2F;60000 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 4s 71us&#x2F;sample - loss: 0.3356 - accuracy: 0.8778</span><br><span class="line">Epoch 4&#x2F;5</span><br><span class="line">60000&#x2F;60000 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 4s 71us&#x2F;sample - loss: 0.3103 - accuracy: 0.8866</span><br><span class="line">Epoch 5&#x2F;5</span><br><span class="line">60000&#x2F;60000 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 4s 71us&#x2F;sample - loss: 0.2908 - accuracy: 0.8927</span><br><span class="line">10000&#x2F;10000 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 27us&#x2F;sample - loss: 0.3443 - accuracy: 0.8759</span><br><span class="line">[0.34429156123399735, 0.8759]</span><br></pre></td></tr></table></figure>

<h1 id="Singal-Input-Mutil-Output"><a href="#Singal-Input-Mutil-Output" class="headerlink" title="Singal Input, Mutil Output"></a>Singal Input, Mutil Output</h1><h2 id="Imports-1"><a href="#Imports-1" class="headerlink" title="Imports"></a>Imports</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.models <span class="keyword">import</span> Model</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Dense, Input</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br></pre></td></tr></table></figure>

<h2 id="Utilities"><a href="#Utilities" class="headerlink" title="Utilities"></a>Utilities</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">format_output</span>(<span class="params">data</span>):</span></span><br><span class="line">    y1 = data.pop(<span class="string">&#x27;Y1&#x27;</span>)</span><br><span class="line">    y1 = np.array(y1)</span><br><span class="line">    y2 = data.pop(<span class="string">&#x27;Y2&#x27;</span>)</span><br><span class="line">    y2 = np.array(y2)</span><br><span class="line">    <span class="keyword">return</span> y1, y2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">norm</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (x - train_stats[<span class="string">&#x27;mean&#x27;</span>]) / train_stats[<span class="string">&#x27;std&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_diff</span>(<span class="params">y_true, y_pred, title=<span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">    plt.scatter(y_true, y_pred)</span><br><span class="line">    plt.title(title)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;True Values&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;Predictions&#x27;</span>)</span><br><span class="line">    plt.axis(<span class="string">&#x27;equal&#x27;</span>)</span><br><span class="line">    plt.axis(<span class="string">&#x27;square&#x27;</span>)</span><br><span class="line">    plt.xlim(plt.xlim())</span><br><span class="line">    plt.ylim(plt.ylim())</span><br><span class="line">    plt.plot([-<span class="number">100</span>, <span class="number">100</span>], [-<span class="number">100</span>, <span class="number">100</span>])</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_metrics</span>(<span class="params">metric_name, title, ylim=<span class="number">5</span></span>):</span></span><br><span class="line">    plt.title(title)</span><br><span class="line">    plt.ylim(<span class="number">0</span>, ylim)</span><br><span class="line">    plt.plot(history.history[metric_name], color=<span class="string">&#x27;blue&#x27;</span>, label=metric_name)</span><br><span class="line">    plt.plot(history.history[<span class="string">&#x27;val_&#x27;</span> + metric_name], color=<span class="string">&#x27;green&#x27;</span>, label=<span class="string">&#x27;val_&#x27;</span> + metric_name)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>

<h2 id="Prepare-the-Data"><a href="#Prepare-the-Data" class="headerlink" title="Prepare the Data"></a>Prepare the Data</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Get the data from UCI dataset</span></span><br><span class="line">URL = <span class="string">&#x27;https://archive.ics.uci.edu/ml/machine-learning-databases/00242/ENB2012_data.xlsx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use pandas excel reader</span></span><br><span class="line">df = pd.read_excel(URL)</span><br><span class="line">df = df.sample(frac=<span class="number">1</span>).reset_index(drop=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Split the data into train and test with 80 train / 20 test</span></span><br><span class="line">train, test = train_test_split(df, test_size=<span class="number">0.2</span>)</span><br><span class="line">train_stats = train.describe()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get Y1 and Y2 as the 2 outputs and format them as np arrays</span></span><br><span class="line">train_stats.pop(<span class="string">&#x27;Y1&#x27;</span>)</span><br><span class="line">train_stats.pop(<span class="string">&#x27;Y2&#x27;</span>)</span><br><span class="line">train_stats = train_stats.transpose()</span><br><span class="line">train_Y = format_output(train)</span><br><span class="line">test_Y = format_output(test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Normalize the training and test data</span></span><br><span class="line">norm_train_X = norm(train)</span><br><span class="line">norm_test_X = norm(test)</span><br></pre></td></tr></table></figure>

<h2 id="Build-the-Model"><a href="#Build-the-Model" class="headerlink" title="Build the Model"></a>Build the Model</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Define model layers.</span></span><br><span class="line">input_layer = Input(shape=(<span class="built_in">len</span>(train .columns),))</span><br><span class="line">first_dense = Dense(units=<span class="string">&#x27;128&#x27;</span>, activation=<span class="string">&#x27;relu&#x27;</span>)(input_layer)</span><br><span class="line">second_dense = Dense(units=<span class="string">&#x27;128&#x27;</span>, activation=<span class="string">&#x27;relu&#x27;</span>)(first_dense)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Y1 output will be fed directly from the second dense</span></span><br><span class="line">y1_output = Dense(units=<span class="string">&#x27;1&#x27;</span>, name=<span class="string">&#x27;y1_output&#x27;</span>)(second_dense)</span><br><span class="line">third_dense = Dense(units=<span class="string">&#x27;64&#x27;</span>, activation=<span class="string">&#x27;relu&#x27;</span>)(second_dense)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Y2 output will come via the third dense</span></span><br><span class="line">y2_output = Dense(units=<span class="string">&#x27;1&#x27;</span>, name=<span class="string">&#x27;y2_output&#x27;</span>)(third_dense)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Define the model with the input layer and a list of output layers</span></span><br><span class="line">model = Model(inputs=input_layer, outputs=[y1_output, y2_output])</span><br><span class="line"></span><br><span class="line">print(model.summary())</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Model: &quot;model&quot;</span><br><span class="line">__________________________________________________________________________________________________</span><br><span class="line">Layer (type)                    Output Shape         Param #     Connected to                     </span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">input_1 (InputLayer)            [(None, 8)]          0                                            </span><br><span class="line">__________________________________________________________________________________________________</span><br><span class="line">dense (Dense)                   (None, 128)          1152        input_1[0][0]                    </span><br><span class="line">__________________________________________________________________________________________________</span><br><span class="line">dense_1 (Dense)                 (None, 128)          16512       dense[0][0]                      </span><br><span class="line">__________________________________________________________________________________________________</span><br><span class="line">dense_2 (Dense)                 (None, 64)           8256        dense_1[0][0]                    </span><br><span class="line">__________________________________________________________________________________________________</span><br><span class="line">y1_output (Dense)               (None, 1)            129         dense_1[0][0]                    </span><br><span class="line">__________________________________________________________________________________________________</span><br><span class="line">y2_output (Dense)               (None, 1)            65          dense_2[0][0]                    </span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Total params: 26,114</span><br><span class="line">Trainable params: 26,114</span><br><span class="line">Non-trainable params: 0</span><br><span class="line">__________________________________________________________________________________________________</span><br><span class="line">None</span><br></pre></td></tr></table></figure>

<h2 id="Configure-parameters"><a href="#Configure-parameters" class="headerlink" title="Configure parameters"></a>Configure parameters</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Specify the optimizer, and compile the model with loss functions for both outputs</span></span><br><span class="line">optimizer = tf.keras.optimizers.SGD(lr=<span class="number">0.001</span>)</span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=optimizer,</span><br><span class="line">              loss=&#123;<span class="string">&#x27;y1_output&#x27;</span>: <span class="string">&#x27;mse&#x27;</span>, <span class="string">&#x27;y2_output&#x27;</span>: <span class="string">&#x27;mse&#x27;</span>&#125;,</span><br><span class="line">              metrics=&#123;<span class="string">&#x27;y1_output&#x27;</span>: tf.keras.metrics.RootMeanSquaredError(),</span><br><span class="line">                       <span class="string">&#x27;y2_output&#x27;</span>: tf.keras.metrics.RootMeanSquaredError()&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="Train-Model"><a href="#Train-Model" class="headerlink" title="Train Model"></a>Train Model</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Train the model for 500 epochs</span></span><br><span class="line">history = model.fit(norm_train_X, train_Y,</span><br><span class="line">                    epochs=<span class="number">500</span>, batch_size=<span class="number">10</span>, validation_data=(norm_test_X, test_Y))</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Train on 614 samples, validate on 154 samples</span><br><span class="line">Epoch 1&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 1s 880us&#x2F;sample - loss: 241.9876 - y1_output_loss: 116.6579 - y2_output_loss: 124.4614 - y1_output_root_mean_squared_error: 10.8326 - y2_output_root_mean_squared_error: 11.1644 - val_loss: 342.3358 - val_y1_output_loss: 46.0434 - val_y2_output_loss: 293.8799 - val_y1_output_root_mean_squared_error: 6.7746 - val_y2_output_root_mean_squared_error: 17.2174</span><br><span class="line">Epoch 2&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 150us&#x2F;sample - loss: 54.3954 - y1_output_loss: 15.1331 - y2_output_loss: 38.7442 - y1_output_root_mean_squared_error: 3.9086 - y2_output_root_mean_squared_error: 6.2545 - val_loss: 27.0263 - val_y1_output_loss: 10.3842 - val_y2_output_loss: 16.0284 - val_y1_output_root_mean_squared_error: 3.2322 - val_y2_output_root_mean_squared_error: 4.0717</span><br><span class="line">Epoch 3&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 24.0098 - y1_output_loss: 9.7076 - y2_output_loss: 14.2542 - y1_output_root_mean_squared_error: 3.1176 - y2_output_root_mean_squared_error: 3.7802 - val_loss: 21.3511 - val_y1_output_loss: 8.8073 - val_y2_output_loss: 12.2858 - val_y1_output_root_mean_squared_error: 2.9547 - val_y2_output_root_mean_squared_error: 3.5526</span><br><span class="line">Epoch 4&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 23.5601 - y1_output_loss: 9.4974 - y2_output_loss: 14.1328 - y1_output_root_mean_squared_error: 3.0743 - y2_output_root_mean_squared_error: 3.7562 - val_loss: 36.6856 - val_y1_output_loss: 11.9260 - val_y2_output_loss: 23.6498 - val_y1_output_root_mean_squared_error: 3.4878 - val_y2_output_root_mean_squared_error: 4.9518</span><br><span class="line">Epoch 5&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 130us&#x2F;sample - loss: 21.3631 - y1_output_loss: 8.7533 - y2_output_loss: 12.5072 - y1_output_root_mean_squared_error: 2.9682 - y2_output_root_mean_squared_error: 3.5430 - val_loss: 21.3194 - val_y1_output_loss: 8.7168 - val_y2_output_loss: 12.4049 - val_y1_output_root_mean_squared_error: 2.9187 - val_y2_output_root_mean_squared_error: 3.5778</span><br><span class="line">Epoch 6&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 25.8010 - y1_output_loss: 9.8908 - y2_output_loss: 16.5404 - y1_output_root_mean_squared_error: 3.1023 - y2_output_root_mean_squared_error: 4.0221 - val_loss: 83.8307 - val_y1_output_loss: 22.9777 - val_y2_output_loss: 58.1275 - val_y1_output_root_mean_squared_error: 4.8682 - val_y2_output_root_mean_squared_error: 7.7545</span><br><span class="line">Epoch 7&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 23.0115 - y1_output_loss: 9.0192 - y2_output_loss: 14.0416 - y1_output_root_mean_squared_error: 3.0001 - y2_output_root_mean_squared_error: 3.7431 - val_loss: 53.4258 - val_y1_output_loss: 14.3769 - val_y2_output_loss: 40.3725 - val_y1_output_root_mean_squared_error: 3.6834 - val_y2_output_root_mean_squared_error: 6.3133</span><br><span class="line">Epoch 8&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 123us&#x2F;sample - loss: 23.9234 - y1_output_loss: 9.1898 - y2_output_loss: 14.6691 - y1_output_root_mean_squared_error: 3.0362 - y2_output_root_mean_squared_error: 3.8347 - val_loss: 29.7749 - val_y1_output_loss: 10.1413 - val_y2_output_loss: 18.7535 - val_y1_output_root_mean_squared_error: 3.2154 - val_y2_output_root_mean_squared_error: 4.4087</span><br><span class="line">Epoch 9&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 19.7604 - y1_output_loss: 7.9935 - y2_output_loss: 11.6362 - y1_output_root_mean_squared_error: 2.8379 - y2_output_root_mean_squared_error: 3.4215 - val_loss: 16.7531 - val_y1_output_loss: 7.2342 - val_y2_output_loss: 9.5409 - val_y1_output_root_mean_squared_error: 2.6505 - val_y2_output_root_mean_squared_error: 3.1190</span><br><span class="line">Epoch 10&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 19.5598 - y1_output_loss: 7.8767 - y2_output_loss: 11.5198 - y1_output_root_mean_squared_error: 2.8184 - y2_output_root_mean_squared_error: 3.4083 - val_loss: 16.4281 - val_y1_output_loss: 7.0387 - val_y2_output_loss: 9.8215 - val_y1_output_root_mean_squared_error: 2.5714 - val_y2_output_root_mean_squared_error: 3.1331</span><br><span class="line">Epoch 11&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 129us&#x2F;sample - loss: 19.6290 - y1_output_loss: 7.5725 - y2_output_loss: 12.0235 - y1_output_root_mean_squared_error: 2.7505 - y2_output_root_mean_squared_error: 3.4733 - val_loss: 40.2756 - val_y1_output_loss: 13.3149 - val_y2_output_loss: 25.6309 - val_y1_output_root_mean_squared_error: 3.7009 - val_y2_output_root_mean_squared_error: 5.1555</span><br><span class="line">Epoch 12&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 21.9419 - y1_output_loss: 8.3936 - y2_output_loss: 13.4437 - y1_output_root_mean_squared_error: 2.9098 - y2_output_root_mean_squared_error: 3.6708 - val_loss: 21.7288 - val_y1_output_loss: 7.9593 - val_y2_output_loss: 13.3395 - val_y1_output_root_mean_squared_error: 2.8109 - val_y2_output_root_mean_squared_error: 3.7185</span><br><span class="line">Epoch 13&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 18.9973 - y1_output_loss: 7.3409 - y2_output_loss: 11.4875 - y1_output_root_mean_squared_error: 2.7220 - y2_output_root_mean_squared_error: 3.4041 - val_loss: 15.6554 - val_y1_output_loss: 7.2932 - val_y2_output_loss: 8.8055 - val_y1_output_root_mean_squared_error: 2.6055 - val_y2_output_root_mean_squared_error: 2.9777</span><br><span class="line">Epoch 14&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 129us&#x2F;sample - loss: 20.0011 - y1_output_loss: 7.5194 - y2_output_loss: 12.4589 - y1_output_root_mean_squared_error: 2.7304 - y2_output_root_mean_squared_error: 3.5420 - val_loss: 17.3139 - val_y1_output_loss: 8.8972 - val_y2_output_loss: 8.8230 - val_y1_output_root_mean_squared_error: 2.8937 - val_y2_output_root_mean_squared_error: 2.9901</span><br><span class="line">Epoch 15&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 18.5872 - y1_output_loss: 7.3511 - y2_output_loss: 11.2573 - y1_output_root_mean_squared_error: 2.7134 - y2_output_root_mean_squared_error: 3.3503 - val_loss: 14.3965 - val_y1_output_loss: 6.4488 - val_y2_output_loss: 8.1854 - val_y1_output_root_mean_squared_error: 2.4839 - val_y2_output_root_mean_squared_error: 2.8682</span><br><span class="line">Epoch 16&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 132us&#x2F;sample - loss: 18.1011 - y1_output_loss: 7.2037 - y2_output_loss: 10.9798 - y1_output_root_mean_squared_error: 2.6744 - y2_output_root_mean_squared_error: 3.3089 - val_loss: 25.1466 - val_y1_output_loss: 6.5545 - val_y2_output_loss: 19.2371 - val_y1_output_root_mean_squared_error: 2.4930 - val_y2_output_root_mean_squared_error: 4.3510</span><br><span class="line">Epoch 17&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 17.3756 - y1_output_loss: 6.5463 - y2_output_loss: 10.7518 - y1_output_root_mean_squared_error: 2.5569 - y2_output_root_mean_squared_error: 3.2921 - val_loss: 12.8881 - val_y1_output_loss: 5.8748 - val_y2_output_loss: 7.2618 - val_y1_output_root_mean_squared_error: 2.3523 - val_y2_output_root_mean_squared_error: 2.7120</span><br><span class="line">Epoch 18&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 16.4264 - y1_output_loss: 6.6219 - y2_output_loss: 9.8686 - y1_output_root_mean_squared_error: 2.5587 - y2_output_root_mean_squared_error: 3.1431 - val_loss: 12.6756 - val_y1_output_loss: 5.5439 - val_y2_output_loss: 7.1966 - val_y1_output_root_mean_squared_error: 2.3245 - val_y2_output_root_mean_squared_error: 2.6968</span><br><span class="line">Epoch 19&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 15.5769 - y1_output_loss: 6.0971 - y2_output_loss: 9.3799 - y1_output_root_mean_squared_error: 2.4787 - y2_output_root_mean_squared_error: 3.0713 - val_loss: 19.6618 - val_y1_output_loss: 6.6549 - val_y2_output_loss: 12.5137 - val_y1_output_root_mean_squared_error: 2.5837 - val_y2_output_root_mean_squared_error: 3.6036</span><br><span class="line">Epoch 20&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 16.5633 - y1_output_loss: 6.0433 - y2_output_loss: 10.4711 - y1_output_root_mean_squared_error: 2.4521 - y2_output_root_mean_squared_error: 3.2482 - val_loss: 15.1454 - val_y1_output_loss: 7.5709 - val_y2_output_loss: 8.2130 - val_y1_output_root_mean_squared_error: 2.6444 - val_y2_output_root_mean_squared_error: 2.8553</span><br><span class="line">Epoch 21&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 14.5727 - y1_output_loss: 5.7167 - y2_output_loss: 8.8804 - y1_output_root_mean_squared_error: 2.3904 - y2_output_root_mean_squared_error: 2.9763 - val_loss: 11.3408 - val_y1_output_loss: 4.8469 - val_y2_output_loss: 6.7088 - val_y1_output_root_mean_squared_error: 2.1521 - val_y2_output_root_mean_squared_error: 2.5902</span><br><span class="line">Epoch 22&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 129us&#x2F;sample - loss: 18.0146 - y1_output_loss: 6.4540 - y2_output_loss: 11.4077 - y1_output_root_mean_squared_error: 2.5507 - y2_output_root_mean_squared_error: 3.3924 - val_loss: 19.0444 - val_y1_output_loss: 4.9117 - val_y2_output_loss: 13.7079 - val_y1_output_root_mean_squared_error: 2.1925 - val_y2_output_root_mean_squared_error: 3.7732</span><br><span class="line">Epoch 23&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 130us&#x2F;sample - loss: 14.3041 - y1_output_loss: 5.1734 - y2_output_loss: 9.0328 - y1_output_root_mean_squared_error: 2.2830 - y2_output_root_mean_squared_error: 3.0153 - val_loss: 12.4385 - val_y1_output_loss: 5.2950 - val_y2_output_loss: 7.5699 - val_y1_output_root_mean_squared_error: 2.2444 - val_y2_output_root_mean_squared_error: 2.7205</span><br><span class="line">Epoch 24&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 129us&#x2F;sample - loss: 12.4478 - y1_output_loss: 4.9100 - y2_output_loss: 7.4419 - y1_output_root_mean_squared_error: 2.2227 - y2_output_root_mean_squared_error: 2.7399 - val_loss: 10.1926 - val_y1_output_loss: 4.0682 - val_y2_output_loss: 6.2457 - val_y1_output_root_mean_squared_error: 1.9498 - val_y2_output_root_mean_squared_error: 2.5280</span><br><span class="line">Epoch 25&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 13.1488 - y1_output_loss: 4.9488 - y2_output_loss: 8.0810 - y1_output_root_mean_squared_error: 2.2341 - y2_output_root_mean_squared_error: 2.8561 - val_loss: 15.4670 - val_y1_output_loss: 5.2102 - val_y2_output_loss: 9.9344 - val_y1_output_root_mean_squared_error: 2.2704 - val_y2_output_root_mean_squared_error: 3.2113</span><br><span class="line">Epoch 26&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 11.9281 - y1_output_loss: 4.6278 - y2_output_loss: 7.3246 - y1_output_root_mean_squared_error: 2.1444 - y2_output_root_mean_squared_error: 2.7074 - val_loss: 13.9471 - val_y1_output_loss: 5.3351 - val_y2_output_loss: 8.3511 - val_y1_output_root_mean_squared_error: 2.3028 - val_y2_output_root_mean_squared_error: 2.9401</span><br><span class="line">Epoch 27&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 14.4018 - y1_output_loss: 5.2615 - y2_output_loss: 9.2169 - y1_output_root_mean_squared_error: 2.2818 - y2_output_root_mean_squared_error: 3.0324 - val_loss: 15.8972 - val_y1_output_loss: 5.2732 - val_y2_output_loss: 10.2780 - val_y1_output_root_mean_squared_error: 2.2909 - val_y2_output_root_mean_squared_error: 3.2633</span><br><span class="line">Epoch 28&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 11.9544 - y1_output_loss: 4.4133 - y2_output_loss: 7.4617 - y1_output_root_mean_squared_error: 2.1049 - y2_output_root_mean_squared_error: 2.7429 - val_loss: 9.0665 - val_y1_output_loss: 3.7525 - val_y2_output_loss: 5.4886 - val_y1_output_root_mean_squared_error: 1.8596 - val_y2_output_root_mean_squared_error: 2.3682</span><br><span class="line">Epoch 29&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 13.5573 - y1_output_loss: 4.5802 - y2_output_loss: 9.0095 - y1_output_root_mean_squared_error: 2.1190 - y2_output_root_mean_squared_error: 3.0112 - val_loss: 22.1398 - val_y1_output_loss: 7.8442 - val_y2_output_loss: 13.5987 - val_y1_output_root_mean_squared_error: 2.8343 - val_y2_output_root_mean_squared_error: 3.7559</span><br><span class="line">Epoch 30&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 10.9441 - y1_output_loss: 4.0302 - y2_output_loss: 6.8569 - y1_output_root_mean_squared_error: 2.0157 - y2_output_root_mean_squared_error: 2.6231 - val_loss: 9.8465 - val_y1_output_loss: 3.8845 - val_y2_output_loss: 6.3602 - val_y1_output_root_mean_squared_error: 1.8786 - val_y2_output_root_mean_squared_error: 2.5134</span><br><span class="line">Epoch 31&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 8.7240 - y1_output_loss: 3.3420 - y2_output_loss: 5.3304 - y1_output_root_mean_squared_error: 1.8315 - y2_output_root_mean_squared_error: 2.3172 - val_loss: 8.3031 - val_y1_output_loss: 3.4334 - val_y2_output_loss: 5.2089 - val_y1_output_root_mean_squared_error: 1.7566 - val_y2_output_root_mean_squared_error: 2.2842</span><br><span class="line">Epoch 32&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 9.4100 - y1_output_loss: 3.4157 - y2_output_loss: 5.9219 - y1_output_root_mean_squared_error: 1.8558 - y2_output_root_mean_squared_error: 2.4425 - val_loss: 14.5905 - val_y1_output_loss: 4.9129 - val_y2_output_loss: 10.1887 - val_y1_output_root_mean_squared_error: 2.1164 - val_y2_output_root_mean_squared_error: 3.1798</span><br><span class="line">Epoch 33&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 130us&#x2F;sample - loss: 9.5884 - y1_output_loss: 3.5166 - y2_output_loss: 6.1106 - y1_output_root_mean_squared_error: 1.8766 - y2_output_root_mean_squared_error: 2.4631 - val_loss: 19.8652 - val_y1_output_loss: 6.0660 - val_y2_output_loss: 13.3171 - val_y1_output_root_mean_squared_error: 2.4569 - val_y2_output_root_mean_squared_error: 3.7187</span><br><span class="line">Epoch 34&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 131us&#x2F;sample - loss: 9.8881 - y1_output_loss: 3.4044 - y2_output_loss: 6.4530 - y1_output_root_mean_squared_error: 1.8495 - y2_output_root_mean_squared_error: 2.5431 - val_loss: 11.9173 - val_y1_output_loss: 2.9781 - val_y2_output_loss: 8.8542 - val_y1_output_root_mean_squared_error: 1.6499 - val_y2_output_root_mean_squared_error: 3.0324</span><br><span class="line">Epoch 35&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 130us&#x2F;sample - loss: 8.9141 - y1_output_loss: 3.1435 - y2_output_loss: 5.9099 - y1_output_root_mean_squared_error: 1.7722 - y2_output_root_mean_squared_error: 2.4028 - val_loss: 32.8283 - val_y1_output_loss: 6.5769 - val_y2_output_loss: 26.3554 - val_y1_output_root_mean_squared_error: 2.5109 - val_y2_output_root_mean_squared_error: 5.1501</span><br><span class="line">Epoch 36&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 134us&#x2F;sample - loss: 11.1058 - y1_output_loss: 3.8347 - y2_output_loss: 7.2837 - y1_output_root_mean_squared_error: 1.9513 - y2_output_root_mean_squared_error: 2.7015 - val_loss: 15.4413 - val_y1_output_loss: 5.6776 - val_y2_output_loss: 9.3025 - val_y1_output_root_mean_squared_error: 2.4066 - val_y2_output_root_mean_squared_error: 3.1064</span><br><span class="line">Epoch 37&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 129us&#x2F;sample - loss: 8.8295 - y1_output_loss: 2.9465 - y2_output_loss: 5.8917 - y1_output_root_mean_squared_error: 1.7176 - y2_output_root_mean_squared_error: 2.4248 - val_loss: 13.6092 - val_y1_output_loss: 3.5870 - val_y2_output_loss: 10.3085 - val_y1_output_root_mean_squared_error: 1.8231 - val_y2_output_root_mean_squared_error: 3.2071</span><br><span class="line">Epoch 38&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 10.0865 - y1_output_loss: 3.3839 - y2_output_loss: 6.6588 - y1_output_root_mean_squared_error: 1.8400 - y2_output_root_mean_squared_error: 2.5886 - val_loss: 9.2756 - val_y1_output_loss: 2.7285 - val_y2_output_loss: 6.3880 - val_y1_output_root_mean_squared_error: 1.6316 - val_y2_output_root_mean_squared_error: 2.5717</span><br><span class="line">Epoch 39&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 8.0700 - y1_output_loss: 2.7400 - y2_output_loss: 5.3473 - y1_output_root_mean_squared_error: 1.6470 - y2_output_root_mean_squared_error: 2.3146 - val_loss: 10.5093 - val_y1_output_loss: 3.3468 - val_y2_output_loss: 6.9047 - val_y1_output_root_mean_squared_error: 1.8356 - val_y2_output_root_mean_squared_error: 2.6721</span><br><span class="line">Epoch 40&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 123us&#x2F;sample - loss: 7.9465 - y1_output_loss: 2.6722 - y2_output_loss: 5.2009 - y1_output_root_mean_squared_error: 1.6423 - y2_output_root_mean_squared_error: 2.2911 - val_loss: 6.4117 - val_y1_output_loss: 2.3445 - val_y2_output_loss: 4.1310 - val_y1_output_root_mean_squared_error: 1.4726 - val_y2_output_root_mean_squared_error: 2.0599</span><br><span class="line">Epoch 41&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 123us&#x2F;sample - loss: 10.0504 - y1_output_loss: 3.1611 - y2_output_loss: 6.8107 - y1_output_root_mean_squared_error: 1.7845 - y2_output_root_mean_squared_error: 2.6203 - val_loss: 7.5627 - val_y1_output_loss: 2.3998 - val_y2_output_loss: 5.1674 - val_y1_output_root_mean_squared_error: 1.4907 - val_y2_output_root_mean_squared_error: 2.3110</span><br><span class="line">Epoch 42&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 15.0068 - y1_output_loss: 4.7653 - y2_output_loss: 10.1185 - y1_output_root_mean_squared_error: 2.1927 - y2_output_root_mean_squared_error: 3.1935 - val_loss: 7.9906 - val_y1_output_loss: 2.2771 - val_y2_output_loss: 5.5866 - val_y1_output_root_mean_squared_error: 1.4842 - val_y2_output_root_mean_squared_error: 2.4058</span><br><span class="line">Epoch 43&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 6.5907 - y1_output_loss: 2.1600 - y2_output_loss: 4.4738 - y1_output_root_mean_squared_error: 1.4636 - y2_output_root_mean_squared_error: 2.1092 - val_loss: 25.9760 - val_y1_output_loss: 7.8377 - val_y2_output_loss: 17.2819 - val_y1_output_root_mean_squared_error: 2.8500 - val_y2_output_root_mean_squared_error: 4.2253</span><br><span class="line">Epoch 44&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 8.9507 - y1_output_loss: 2.7987 - y2_output_loss: 6.1346 - y1_output_root_mean_squared_error: 1.6775 - y2_output_root_mean_squared_error: 2.4772 - val_loss: 10.2834 - val_y1_output_loss: 2.8463 - val_y2_output_loss: 7.4555 - val_y1_output_root_mean_squared_error: 1.6441 - val_y2_output_root_mean_squared_error: 2.7532</span><br><span class="line">Epoch 45&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 7.3384 - y1_output_loss: 2.2266 - y2_output_loss: 5.0598 - y1_output_root_mean_squared_error: 1.4981 - y2_output_root_mean_squared_error: 2.2570 - val_loss: 6.6510 - val_y1_output_loss: 2.1945 - val_y2_output_loss: 4.3301 - val_y1_output_root_mean_squared_error: 1.4715 - val_y2_output_root_mean_squared_error: 2.1180</span><br><span class="line">Epoch 46&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 10.8238 - y1_output_loss: 3.4275 - y2_output_loss: 7.3725 - y1_output_root_mean_squared_error: 1.8476 - y2_output_root_mean_squared_error: 2.7222 - val_loss: 13.2108 - val_y1_output_loss: 4.7213 - val_y2_output_loss: 8.4653 - val_y1_output_root_mean_squared_error: 2.1453 - val_y2_output_root_mean_squared_error: 2.9341</span><br><span class="line">Epoch 47&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 9.1796 - y1_output_loss: 2.7956 - y2_output_loss: 6.3143 - y1_output_root_mean_squared_error: 1.6770 - y2_output_root_mean_squared_error: 2.5233 - val_loss: 6.6043 - val_y1_output_loss: 2.2306 - val_y2_output_loss: 4.3567 - val_y1_output_root_mean_squared_error: 1.4557 - val_y2_output_root_mean_squared_error: 2.1178</span><br><span class="line">Epoch 48&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 9.5247 - y1_output_loss: 3.0535 - y2_output_loss: 6.4332 - y1_output_root_mean_squared_error: 1.7529 - y2_output_root_mean_squared_error: 2.5401 - val_loss: 13.2807 - val_y1_output_loss: 3.7760 - val_y2_output_loss: 9.6399 - val_y1_output_root_mean_squared_error: 1.8960 - val_y2_output_root_mean_squared_error: 3.1122</span><br><span class="line">Epoch 49&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 7.6425 - y1_output_loss: 2.3387 - y2_output_loss: 5.3672 - y1_output_root_mean_squared_error: 1.5164 - y2_output_root_mean_squared_error: 2.3115 - val_loss: 12.5400 - val_y1_output_loss: 3.9359 - val_y2_output_loss: 8.6577 - val_y1_output_root_mean_squared_error: 1.9411 - val_y2_output_root_mean_squared_error: 2.9618</span><br><span class="line">Epoch 50&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 6.8990 - y1_output_loss: 2.1999 - y2_output_loss: 4.6907 - y1_output_root_mean_squared_error: 1.4708 - y2_output_root_mean_squared_error: 2.1761 - val_loss: 6.6097 - val_y1_output_loss: 2.2352 - val_y2_output_loss: 4.2138 - val_y1_output_root_mean_squared_error: 1.5013 - val_y2_output_root_mean_squared_error: 2.0871</span><br><span class="line">Epoch 51&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 7.0504 - y1_output_loss: 2.0424 - y2_output_loss: 4.9810 - y1_output_root_mean_squared_error: 1.4280 - y2_output_root_mean_squared_error: 2.2386 - val_loss: 6.7793 - val_y1_output_loss: 2.0399 - val_y2_output_loss: 4.6099 - val_y1_output_root_mean_squared_error: 1.4171 - val_y2_output_root_mean_squared_error: 2.1843</span><br><span class="line">Epoch 52&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 6.4084 - y1_output_loss: 1.9230 - y2_output_loss: 4.5189 - y1_output_root_mean_squared_error: 1.3911 - y2_output_root_mean_squared_error: 2.1150 - val_loss: 6.9138 - val_y1_output_loss: 2.5736 - val_y2_output_loss: 4.3874 - val_y1_output_root_mean_squared_error: 1.5682 - val_y2_output_root_mean_squared_error: 2.1106</span><br><span class="line">Epoch 53&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 6.5235 - y1_output_loss: 1.9977 - y2_output_loss: 4.4895 - y1_output_root_mean_squared_error: 1.4126 - y2_output_root_mean_squared_error: 2.1279 - val_loss: 6.5296 - val_y1_output_loss: 2.1468 - val_y2_output_loss: 4.3201 - val_y1_output_root_mean_squared_error: 1.4474 - val_y2_output_root_mean_squared_error: 2.1058</span><br><span class="line">Epoch 54&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 130us&#x2F;sample - loss: 6.5418 - y1_output_loss: 1.7675 - y2_output_loss: 4.7307 - y1_output_root_mean_squared_error: 1.3349 - y2_output_root_mean_squared_error: 2.1817 - val_loss: 7.5680 - val_y1_output_loss: 1.6740 - val_y2_output_loss: 5.8423 - val_y1_output_root_mean_squared_error: 1.2658 - val_y2_output_root_mean_squared_error: 2.4425</span><br><span class="line">Epoch 55&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 7.8779 - y1_output_loss: 2.4001 - y2_output_loss: 5.4507 - y1_output_root_mean_squared_error: 1.5554 - y2_output_root_mean_squared_error: 2.3364 - val_loss: 8.1220 - val_y1_output_loss: 1.9571 - val_y2_output_loss: 6.0308 - val_y1_output_root_mean_squared_error: 1.3685 - val_y2_output_root_mean_squared_error: 2.4998</span><br><span class="line">Epoch 56&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 6.0547 - y1_output_loss: 1.7629 - y2_output_loss: 4.2546 - y1_output_root_mean_squared_error: 1.3315 - y2_output_root_mean_squared_error: 2.0693 - val_loss: 6.3119 - val_y1_output_loss: 1.9337 - val_y2_output_loss: 4.2750 - val_y1_output_root_mean_squared_error: 1.3721 - val_y2_output_root_mean_squared_error: 2.1046</span><br><span class="line">Epoch 57&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 5.2920 - y1_output_loss: 1.6045 - y2_output_loss: 3.6876 - y1_output_root_mean_squared_error: 1.2688 - y2_output_root_mean_squared_error: 1.9189 - val_loss: 16.5289 - val_y1_output_loss: 3.5370 - val_y2_output_loss: 12.8428 - val_y1_output_root_mean_squared_error: 1.8591 - val_y2_output_root_mean_squared_error: 3.6156</span><br><span class="line">Epoch 58&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 9.0522 - y1_output_loss: 2.6454 - y2_output_loss: 6.4009 - y1_output_root_mean_squared_error: 1.6166 - y2_output_root_mean_squared_error: 2.5375 - val_loss: 5.2004 - val_y1_output_loss: 1.6736 - val_y2_output_loss: 3.4333 - val_y1_output_root_mean_squared_error: 1.2881 - val_y2_output_root_mean_squared_error: 1.8818</span><br><span class="line">Epoch 59&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 6.4812 - y1_output_loss: 2.0898 - y2_output_loss: 4.3522 - y1_output_root_mean_squared_error: 1.4476 - y2_output_root_mean_squared_error: 2.0942 - val_loss: 7.8669 - val_y1_output_loss: 2.2426 - val_y2_output_loss: 5.4384 - val_y1_output_root_mean_squared_error: 1.4992 - val_y2_output_root_mean_squared_error: 2.3705</span><br><span class="line">Epoch 60&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 129us&#x2F;sample - loss: 5.8000 - y1_output_loss: 1.6791 - y2_output_loss: 4.1567 - y1_output_root_mean_squared_error: 1.2945 - y2_output_root_mean_squared_error: 2.0308 - val_loss: 12.1196 - val_y1_output_loss: 3.9972 - val_y2_output_loss: 8.1673 - val_y1_output_root_mean_squared_error: 1.9581 - val_y2_output_root_mean_squared_error: 2.8784</span><br><span class="line">Epoch 61&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 5.3619 - y1_output_loss: 1.6554 - y2_output_loss: 3.7217 - y1_output_root_mean_squared_error: 1.2781 - y2_output_root_mean_squared_error: 1.9309 - val_loss: 5.8804 - val_y1_output_loss: 1.9212 - val_y2_output_loss: 3.8245 - val_y1_output_root_mean_squared_error: 1.3953 - val_y2_output_root_mean_squared_error: 1.9834</span><br><span class="line">Epoch 62&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 5.6420 - y1_output_loss: 1.6158 - y2_output_loss: 3.9837 - y1_output_root_mean_squared_error: 1.2740 - y2_output_root_mean_squared_error: 2.0047 - val_loss: 8.4082 - val_y1_output_loss: 1.9781 - val_y2_output_loss: 6.3578 - val_y1_output_root_mean_squared_error: 1.3773 - val_y2_output_root_mean_squared_error: 2.5517</span><br><span class="line">Epoch 63&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 130us&#x2F;sample - loss: 7.3660 - y1_output_loss: 2.0849 - y2_output_loss: 5.2202 - y1_output_root_mean_squared_error: 1.4494 - y2_output_root_mean_squared_error: 2.2946 - val_loss: 5.9838 - val_y1_output_loss: 1.5990 - val_y2_output_loss: 4.2284 - val_y1_output_root_mean_squared_error: 1.2687 - val_y2_output_root_mean_squared_error: 2.0915</span><br><span class="line">Epoch 64&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 130us&#x2F;sample - loss: 5.4667 - y1_output_loss: 1.5479 - y2_output_loss: 3.8815 - y1_output_root_mean_squared_error: 1.2452 - y2_output_root_mean_squared_error: 1.9789 - val_loss: 8.7299 - val_y1_output_loss: 2.3234 - val_y2_output_loss: 6.1663 - val_y1_output_root_mean_squared_error: 1.5366 - val_y2_output_root_mean_squared_error: 2.5237</span><br><span class="line">Epoch 65&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 5.2355 - y1_output_loss: 1.3135 - y2_output_loss: 3.9038 - y1_output_root_mean_squared_error: 1.1486 - y2_output_root_mean_squared_error: 1.9790 - val_loss: 5.2777 - val_y1_output_loss: 1.7573 - val_y2_output_loss: 3.4775 - val_y1_output_root_mean_squared_error: 1.3001 - val_y2_output_root_mean_squared_error: 1.8941</span><br><span class="line">Epoch 66&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 4.3994 - y1_output_loss: 1.0493 - y2_output_loss: 3.3491 - y1_output_root_mean_squared_error: 1.0255 - y2_output_root_mean_squared_error: 1.8297 - val_loss: 4.9672 - val_y1_output_loss: 1.4347 - val_y2_output_loss: 3.4348 - val_y1_output_root_mean_squared_error: 1.1872 - val_y2_output_root_mean_squared_error: 1.8862</span><br><span class="line">Epoch 67&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 5.6529 - y1_output_loss: 1.5086 - y2_output_loss: 4.1207 - y1_output_root_mean_squared_error: 1.2305 - y2_output_root_mean_squared_error: 2.0344 - val_loss: 7.6788 - val_y1_output_loss: 2.4922 - val_y2_output_loss: 5.1075 - val_y1_output_root_mean_squared_error: 1.5657 - val_y2_output_root_mean_squared_error: 2.2864</span><br><span class="line">Epoch 68&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 130us&#x2F;sample - loss: 4.2417 - y1_output_loss: 1.0474 - y2_output_loss: 3.2071 - y1_output_root_mean_squared_error: 1.0261 - y2_output_root_mean_squared_error: 1.7857 - val_loss: 6.7170 - val_y1_output_loss: 1.9735 - val_y2_output_loss: 4.5591 - val_y1_output_root_mean_squared_error: 1.4141 - val_y2_output_root_mean_squared_error: 2.1720</span><br><span class="line">Epoch 69&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 5.5757 - y1_output_loss: 1.4321 - y2_output_loss: 4.0985 - y1_output_root_mean_squared_error: 1.2013 - y2_output_root_mean_squared_error: 2.0329 - val_loss: 4.1348 - val_y1_output_loss: 1.2313 - val_y2_output_loss: 2.9070 - val_y1_output_root_mean_squared_error: 1.0811 - val_y2_output_root_mean_squared_error: 1.7222</span><br><span class="line">Epoch 70&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 5.0909 - y1_output_loss: 1.3336 - y2_output_loss: 3.7668 - y1_output_root_mean_squared_error: 1.1543 - y2_output_root_mean_squared_error: 1.9387 - val_loss: 3.8878 - val_y1_output_loss: 0.8561 - val_y2_output_loss: 2.9649 - val_y1_output_root_mean_squared_error: 0.9078 - val_y2_output_root_mean_squared_error: 1.7503</span><br><span class="line">Epoch 71&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 131us&#x2F;sample - loss: 4.0199 - y1_output_loss: 0.9888 - y2_output_loss: 2.9925 - y1_output_root_mean_squared_error: 0.9991 - y2_output_root_mean_squared_error: 1.7383 - val_loss: 3.9577 - val_y1_output_loss: 0.9206 - val_y2_output_loss: 2.9535 - val_y1_output_root_mean_squared_error: 0.9528 - val_y2_output_root_mean_squared_error: 1.7464</span><br><span class="line">Epoch 72&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 5.2788 - y1_output_loss: 1.2828 - y2_output_loss: 4.0505 - y1_output_root_mean_squared_error: 1.1365 - y2_output_root_mean_squared_error: 1.9968 - val_loss: 6.1185 - val_y1_output_loss: 1.3930 - val_y2_output_loss: 4.7274 - val_y1_output_root_mean_squared_error: 1.1406 - val_y2_output_root_mean_squared_error: 2.1949</span><br><span class="line">Epoch 73&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 5.7033 - y1_output_loss: 1.4515 - y2_output_loss: 4.2908 - y1_output_root_mean_squared_error: 1.2041 - y2_output_root_mean_squared_error: 2.0624 - val_loss: 4.1168 - val_y1_output_loss: 0.9500 - val_y2_output_loss: 3.1099 - val_y1_output_root_mean_squared_error: 0.9502 - val_y2_output_root_mean_squared_error: 1.7927</span><br><span class="line">Epoch 74&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 3.9573 - y1_output_loss: 0.8388 - y2_output_loss: 3.1015 - y1_output_root_mean_squared_error: 0.9145 - y2_output_root_mean_squared_error: 1.7666 - val_loss: 4.3283 - val_y1_output_loss: 1.0357 - val_y2_output_loss: 3.2268 - val_y1_output_root_mean_squared_error: 1.0099 - val_y2_output_root_mean_squared_error: 1.8189</span><br><span class="line">Epoch 75&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 131us&#x2F;sample - loss: 3.7160 - y1_output_loss: 0.8464 - y2_output_loss: 2.8795 - y1_output_root_mean_squared_error: 0.9215 - y2_output_root_mean_squared_error: 1.6932 - val_loss: 3.2162 - val_y1_output_loss: 0.7494 - val_y2_output_loss: 2.4030 - val_y1_output_root_mean_squared_error: 0.8547 - val_y2_output_root_mean_squared_error: 1.5766</span><br><span class="line">Epoch 76&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 4.6627 - y1_output_loss: 1.0986 - y2_output_loss: 3.5594 - y1_output_root_mean_squared_error: 1.0520 - y2_output_root_mean_squared_error: 1.8857 - val_loss: 5.1448 - val_y1_output_loss: 1.2944 - val_y2_output_loss: 3.8124 - val_y1_output_root_mean_squared_error: 1.1225 - val_y2_output_root_mean_squared_error: 1.9710</span><br><span class="line">Epoch 77&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 3.8723 - y1_output_loss: 0.9115 - y2_output_loss: 2.9499 - y1_output_root_mean_squared_error: 0.9565 - y2_output_root_mean_squared_error: 1.7197 - val_loss: 5.6957 - val_y1_output_loss: 0.7996 - val_y2_output_loss: 4.7816 - val_y1_output_root_mean_squared_error: 0.8943 - val_y2_output_root_mean_squared_error: 2.2127</span><br><span class="line">Epoch 78&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 3.3567 - y1_output_loss: 0.7165 - y2_output_loss: 2.6155 - y1_output_root_mean_squared_error: 0.8498 - y2_output_root_mean_squared_error: 1.6231 - val_loss: 3.2953 - val_y1_output_loss: 0.6867 - val_y2_output_loss: 2.5282 - val_y1_output_root_mean_squared_error: 0.8279 - val_y2_output_root_mean_squared_error: 1.6155</span><br><span class="line">Epoch 79&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 123us&#x2F;sample - loss: 3.8984 - y1_output_loss: 0.9969 - y2_output_loss: 2.8995 - y1_output_root_mean_squared_error: 0.9883 - y2_output_root_mean_squared_error: 1.7093 - val_loss: 7.1013 - val_y1_output_loss: 1.8200 - val_y2_output_loss: 5.0818 - val_y1_output_root_mean_squared_error: 1.3703 - val_y2_output_root_mean_squared_error: 2.2855</span><br><span class="line">Epoch 80&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 3.6655 - y1_output_loss: 0.7353 - y2_output_loss: 2.9600 - y1_output_root_mean_squared_error: 0.8501 - y2_output_root_mean_squared_error: 1.7155 - val_loss: 9.1524 - val_y1_output_loss: 2.4638 - val_y2_output_loss: 6.5217 - val_y1_output_root_mean_squared_error: 1.5591 - val_y2_output_root_mean_squared_error: 2.5926</span><br><span class="line">Epoch 81&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 4.9177 - y1_output_loss: 1.2115 - y2_output_loss: 3.6809 - y1_output_root_mean_squared_error: 1.0975 - y2_output_root_mean_squared_error: 1.9270 - val_loss: 3.6719 - val_y1_output_loss: 1.1244 - val_y2_output_loss: 2.4920 - val_y1_output_root_mean_squared_error: 1.0511 - val_y2_output_root_mean_squared_error: 1.6022</span><br><span class="line">Epoch 82&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 3.8146 - y1_output_loss: 0.9164 - y2_output_loss: 2.8898 - y1_output_root_mean_squared_error: 0.9614 - y2_output_root_mean_squared_error: 1.7001 - val_loss: 6.0732 - val_y1_output_loss: 2.0466 - val_y2_output_loss: 3.9401 - val_y1_output_root_mean_squared_error: 1.4308 - val_y2_output_root_mean_squared_error: 2.0065</span><br><span class="line">Epoch 83&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 3.4295 - y1_output_loss: 0.8306 - y2_output_loss: 2.5938 - y1_output_root_mean_squared_error: 0.9103 - y2_output_root_mean_squared_error: 1.6127 - val_loss: 2.7701 - val_y1_output_loss: 0.5517 - val_y2_output_loss: 2.1501 - val_y1_output_root_mean_squared_error: 0.7476 - val_y2_output_root_mean_squared_error: 1.4870</span><br><span class="line">Epoch 84&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 3.1494 - y1_output_loss: 0.6692 - y2_output_loss: 2.4547 - y1_output_root_mean_squared_error: 0.8204 - y2_output_root_mean_squared_error: 1.5736 - val_loss: 2.9419 - val_y1_output_loss: 0.6430 - val_y2_output_loss: 2.2591 - val_y1_output_root_mean_squared_error: 0.7903 - val_y2_output_root_mean_squared_error: 1.5223</span><br><span class="line">Epoch 85&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 3.0793 - y1_output_loss: 0.7060 - y2_output_loss: 2.3782 - y1_output_root_mean_squared_error: 0.8416 - y2_output_root_mean_squared_error: 1.5398 - val_loss: 3.4807 - val_y1_output_loss: 0.7014 - val_y2_output_loss: 2.6923 - val_y1_output_root_mean_squared_error: 0.8421 - val_y2_output_root_mean_squared_error: 1.6648</span><br><span class="line">Epoch 86&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 3.1212 - y1_output_loss: 0.7312 - y2_output_loss: 2.4217 - y1_output_root_mean_squared_error: 0.8559 - y2_output_root_mean_squared_error: 1.5455 - val_loss: 5.6287 - val_y1_output_loss: 0.8723 - val_y2_output_loss: 4.6419 - val_y1_output_root_mean_squared_error: 0.9373 - val_y2_output_root_mean_squared_error: 2.1795</span><br><span class="line">Epoch 87&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 4.3630 - y1_output_loss: 1.0237 - y2_output_loss: 3.3195 - y1_output_root_mean_squared_error: 1.0151 - y2_output_root_mean_squared_error: 1.8256 - val_loss: 4.8171 - val_y1_output_loss: 0.6700 - val_y2_output_loss: 4.0793 - val_y1_output_root_mean_squared_error: 0.8143 - val_y2_output_root_mean_squared_error: 2.0382</span><br><span class="line">Epoch 88&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 4.5111 - y1_output_loss: 1.1735 - y2_output_loss: 3.3155 - y1_output_root_mean_squared_error: 1.0819 - y2_output_root_mean_squared_error: 1.8278 - val_loss: 3.4904 - val_y1_output_loss: 0.9151 - val_y2_output_loss: 2.4811 - val_y1_output_root_mean_squared_error: 0.9574 - val_y2_output_root_mean_squared_error: 1.6043</span><br><span class="line">Epoch 89&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 130us&#x2F;sample - loss: 4.1747 - y1_output_loss: 1.0324 - y2_output_loss: 3.1061 - y1_output_root_mean_squared_error: 1.0205 - y2_output_root_mean_squared_error: 1.7701 - val_loss: 2.7523 - val_y1_output_loss: 0.6624 - val_y2_output_loss: 2.0392 - val_y1_output_root_mean_squared_error: 0.8197 - val_y2_output_root_mean_squared_error: 1.4424</span><br><span class="line">Epoch 90&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 129us&#x2F;sample - loss: 3.7912 - y1_output_loss: 0.9425 - y2_output_loss: 2.8756 - y1_output_root_mean_squared_error: 0.9727 - y2_output_root_mean_squared_error: 1.6868 - val_loss: 5.0116 - val_y1_output_loss: 1.5687 - val_y2_output_loss: 3.3368 - val_y1_output_root_mean_squared_error: 1.2528 - val_y2_output_root_mean_squared_error: 1.8553</span><br><span class="line">Epoch 91&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 2.9819 - y1_output_loss: 0.7078 - y2_output_loss: 2.2466 - y1_output_root_mean_squared_error: 0.8451 - y2_output_root_mean_squared_error: 1.5059 - val_loss: 2.7481 - val_y1_output_loss: 0.5947 - val_y2_output_loss: 2.0917 - val_y1_output_root_mean_squared_error: 0.7663 - val_y2_output_root_mean_squared_error: 1.4700</span><br><span class="line">Epoch 92&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 3.7613 - y1_output_loss: 0.8468 - y2_output_loss: 2.8948 - y1_output_root_mean_squared_error: 0.9208 - y2_output_root_mean_squared_error: 1.7069 - val_loss: 3.8310 - val_y1_output_loss: 0.9938 - val_y2_output_loss: 2.7515 - val_y1_output_root_mean_squared_error: 0.9921 - val_y2_output_root_mean_squared_error: 1.6872</span><br><span class="line">Epoch 93&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 3.2880 - y1_output_loss: 0.8253 - y2_output_loss: 2.4536 - y1_output_root_mean_squared_error: 0.9020 - y2_output_root_mean_squared_error: 1.5730 - val_loss: 2.7739 - val_y1_output_loss: 0.6637 - val_y2_output_loss: 2.0438 - val_y1_output_root_mean_squared_error: 0.8221 - val_y2_output_root_mean_squared_error: 1.4485</span><br><span class="line">Epoch 94&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 3.0652 - y1_output_loss: 0.7565 - y2_output_loss: 2.2860 - y1_output_root_mean_squared_error: 0.8734 - y2_output_root_mean_squared_error: 1.5174 - val_loss: 2.7838 - val_y1_output_loss: 0.6651 - val_y2_output_loss: 2.0828 - val_y1_output_root_mean_squared_error: 0.8102 - val_y2_output_root_mean_squared_error: 1.4585</span><br><span class="line">Epoch 95&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 2.9922 - y1_output_loss: 0.6877 - y2_output_loss: 2.3307 - y1_output_root_mean_squared_error: 0.8214 - y2_output_root_mean_squared_error: 1.5224 - val_loss: 13.5596 - val_y1_output_loss: 2.9052 - val_y2_output_loss: 10.3789 - val_y1_output_root_mean_squared_error: 1.7364 - val_y2_output_root_mean_squared_error: 3.2472</span><br><span class="line">Epoch 96&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 3.7866 - y1_output_loss: 0.8839 - y2_output_loss: 2.8877 - y1_output_root_mean_squared_error: 0.9399 - y2_output_root_mean_squared_error: 1.7039 - val_loss: 4.5970 - val_y1_output_loss: 1.4957 - val_y2_output_loss: 2.9600 - val_y1_output_root_mean_squared_error: 1.2439 - val_y2_output_root_mean_squared_error: 1.7464</span><br><span class="line">Epoch 97&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 3.6149 - y1_output_loss: 0.8350 - y2_output_loss: 2.7461 - y1_output_root_mean_squared_error: 0.9180 - y2_output_root_mean_squared_error: 1.6650 - val_loss: 3.1404 - val_y1_output_loss: 0.6085 - val_y2_output_loss: 2.4608 - val_y1_output_root_mean_squared_error: 0.7735 - val_y2_output_root_mean_squared_error: 1.5944</span><br><span class="line">Epoch 98&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 4.5351 - y1_output_loss: 1.1275 - y2_output_loss: 3.4059 - y1_output_root_mean_squared_error: 1.0652 - y2_output_root_mean_squared_error: 1.8440 - val_loss: 2.9272 - val_y1_output_loss: 0.7190 - val_y2_output_loss: 2.1365 - val_y1_output_root_mean_squared_error: 0.8496 - val_y2_output_root_mean_squared_error: 1.4851</span><br><span class="line">Epoch 99&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 3.7307 - y1_output_loss: 0.7813 - y2_output_loss: 2.9236 - y1_output_root_mean_squared_error: 0.8856 - y2_output_root_mean_squared_error: 1.7165 - val_loss: 3.2166 - val_y1_output_loss: 0.8639 - val_y2_output_loss: 2.2851 - val_y1_output_root_mean_squared_error: 0.9388 - val_y2_output_root_mean_squared_error: 1.5282</span><br><span class="line">Epoch 100&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 2.9423 - y1_output_loss: 0.6638 - y2_output_loss: 2.2766 - y1_output_root_mean_squared_error: 0.8128 - y2_output_root_mean_squared_error: 1.5105 - val_loss: 3.2848 - val_y1_output_loss: 1.0504 - val_y2_output_loss: 2.1698 - val_y1_output_root_mean_squared_error: 1.0268 - val_y2_output_root_mean_squared_error: 1.4935</span><br><span class="line">Epoch 101&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 3.7457 - y1_output_loss: 0.9889 - y2_output_loss: 2.8337 - y1_output_root_mean_squared_error: 0.9849 - y2_output_root_mean_squared_error: 1.6660 - val_loss: 14.3470 - val_y1_output_loss: 5.5838 - val_y2_output_loss: 8.4473 - val_y1_output_root_mean_squared_error: 2.3841 - val_y2_output_root_mean_squared_error: 2.9433</span><br><span class="line">Epoch 102&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 4.3591 - y1_output_loss: 1.1193 - y2_output_loss: 3.2441 - y1_output_root_mean_squared_error: 1.0607 - y2_output_root_mean_squared_error: 1.7983 - val_loss: 4.4288 - val_y1_output_loss: 0.7524 - val_y2_output_loss: 3.5717 - val_y1_output_root_mean_squared_error: 0.8732 - val_y2_output_root_mean_squared_error: 1.9148</span><br><span class="line">Epoch 103&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 5.3580 - y1_output_loss: 1.4977 - y2_output_loss: 3.8223 - y1_output_root_mean_squared_error: 1.2274 - y2_output_root_mean_squared_error: 1.9625 - val_loss: 3.1637 - val_y1_output_loss: 0.5230 - val_y2_output_loss: 2.5879 - val_y1_output_root_mean_squared_error: 0.7111 - val_y2_output_root_mean_squared_error: 1.6303</span><br><span class="line">Epoch 104&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 2.6085 - y1_output_loss: 0.6369 - y2_output_loss: 1.9571 - y1_output_root_mean_squared_error: 0.7986 - y2_output_root_mean_squared_error: 1.4038 - val_loss: 2.8463 - val_y1_output_loss: 0.6914 - val_y2_output_loss: 2.0831 - val_y1_output_root_mean_squared_error: 0.8291 - val_y2_output_root_mean_squared_error: 1.4693</span><br><span class="line">Epoch 105&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 3.9880 - y1_output_loss: 0.9274 - y2_output_loss: 3.0489 - y1_output_root_mean_squared_error: 0.9655 - y2_output_root_mean_squared_error: 1.7481 - val_loss: 3.2260 - val_y1_output_loss: 0.5082 - val_y2_output_loss: 2.6787 - val_y1_output_root_mean_squared_error: 0.7041 - val_y2_output_root_mean_squared_error: 1.6524</span><br><span class="line">Epoch 106&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 2.8036 - y1_output_loss: 0.6149 - y2_output_loss: 2.1651 - y1_output_root_mean_squared_error: 0.7865 - y2_output_root_mean_squared_error: 1.4782 - val_loss: 2.3192 - val_y1_output_loss: 0.4357 - val_y2_output_loss: 1.8334 - val_y1_output_root_mean_squared_error: 0.6604 - val_y2_output_root_mean_squared_error: 1.3723</span><br><span class="line">Epoch 107&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 2.6295 - y1_output_loss: 0.5962 - y2_output_loss: 2.0260 - y1_output_root_mean_squared_error: 0.7686 - y2_output_root_mean_squared_error: 1.4278 - val_loss: 2.9858 - val_y1_output_loss: 0.5045 - val_y2_output_loss: 2.4308 - val_y1_output_root_mean_squared_error: 0.7010 - val_y2_output_root_mean_squared_error: 1.5794</span><br><span class="line">Epoch 108&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 5.3725 - y1_output_loss: 1.6847 - y2_output_loss: 3.6481 - y1_output_root_mean_squared_error: 1.3010 - y2_output_root_mean_squared_error: 1.9183 - val_loss: 2.7873 - val_y1_output_loss: 0.4620 - val_y2_output_loss: 2.2641 - val_y1_output_root_mean_squared_error: 0.6673 - val_y2_output_root_mean_squared_error: 1.5304</span><br><span class="line">Epoch 109&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 2.7592 - y1_output_loss: 0.5636 - y2_output_loss: 2.1756 - y1_output_root_mean_squared_error: 0.7535 - y2_output_root_mean_squared_error: 1.4803 - val_loss: 2.4568 - val_y1_output_loss: 0.4451 - val_y2_output_loss: 1.9457 - val_y1_output_root_mean_squared_error: 0.6714 - val_y2_output_root_mean_squared_error: 1.4163</span><br><span class="line">Epoch 110&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 2.4127 - y1_output_loss: 0.5712 - y2_output_loss: 1.8257 - y1_output_root_mean_squared_error: 0.7585 - y2_output_root_mean_squared_error: 1.3555 - val_loss: 2.3954 - val_y1_output_loss: 0.5121 - val_y2_output_loss: 1.8285 - val_y1_output_root_mean_squared_error: 0.7124 - val_y2_output_root_mean_squared_error: 1.3740</span><br><span class="line">Epoch 111&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 3.2399 - y1_output_loss: 0.7708 - y2_output_loss: 2.4792 - y1_output_root_mean_squared_error: 0.8794 - y2_output_root_mean_squared_error: 1.5705 - val_loss: 3.3152 - val_y1_output_loss: 0.9363 - val_y2_output_loss: 2.3351 - val_y1_output_root_mean_squared_error: 0.9635 - val_y2_output_root_mean_squared_error: 1.5449</span><br><span class="line">Epoch 112&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 2.5230 - y1_output_loss: 0.5474 - y2_output_loss: 1.9980 - y1_output_root_mean_squared_error: 0.7427 - y2_output_root_mean_squared_error: 1.4040 - val_loss: 5.6955 - val_y1_output_loss: 0.9092 - val_y2_output_loss: 4.6712 - val_y1_output_root_mean_squared_error: 0.9668 - val_y2_output_root_mean_squared_error: 2.1819</span><br><span class="line">Epoch 113&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 2.2906 - y1_output_loss: 0.5434 - y2_output_loss: 1.7275 - y1_output_root_mean_squared_error: 0.7406 - y2_output_root_mean_squared_error: 1.3199 - val_loss: 3.0682 - val_y1_output_loss: 0.5297 - val_y2_output_loss: 2.4723 - val_y1_output_root_mean_squared_error: 0.7256 - val_y2_output_root_mean_squared_error: 1.5943</span><br><span class="line">Epoch 114&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 2.6006 - y1_output_loss: 0.6719 - y2_output_loss: 1.9204 - y1_output_root_mean_squared_error: 0.8227 - y2_output_root_mean_squared_error: 1.3870 - val_loss: 2.8835 - val_y1_output_loss: 0.8278 - val_y2_output_loss: 2.0077 - val_y1_output_root_mean_squared_error: 0.9017 - val_y2_output_root_mean_squared_error: 1.4389</span><br><span class="line">Epoch 115&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 3.3031 - y1_output_loss: 0.6587 - y2_output_loss: 2.6503 - y1_output_root_mean_squared_error: 0.8119 - y2_output_root_mean_squared_error: 1.6260 - val_loss: 5.2804 - val_y1_output_loss: 1.6707 - val_y2_output_loss: 3.4667 - val_y1_output_root_mean_squared_error: 1.3072 - val_y2_output_root_mean_squared_error: 1.8899</span><br><span class="line">Epoch 116&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 4.0135 - y1_output_loss: 0.9656 - y2_output_loss: 3.0209 - y1_output_root_mean_squared_error: 0.9834 - y2_output_root_mean_squared_error: 1.7454 - val_loss: 3.4972 - val_y1_output_loss: 0.7831 - val_y2_output_loss: 2.6205 - val_y1_output_root_mean_squared_error: 0.8857 - val_y2_output_root_mean_squared_error: 1.6470</span><br><span class="line">Epoch 117&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 2.5946 - y1_output_loss: 0.6353 - y2_output_loss: 1.9537 - y1_output_root_mean_squared_error: 0.7953 - y2_output_root_mean_squared_error: 1.4007 - val_loss: 3.5932 - val_y1_output_loss: 0.9162 - val_y2_output_loss: 2.6411 - val_y1_output_root_mean_squared_error: 0.9434 - val_y2_output_root_mean_squared_error: 1.6441</span><br><span class="line">Epoch 118&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 2.2746 - y1_output_loss: 0.5422 - y2_output_loss: 1.7260 - y1_output_root_mean_squared_error: 0.7363 - y2_output_root_mean_squared_error: 1.3162 - val_loss: 3.1994 - val_y1_output_loss: 0.9797 - val_y2_output_loss: 2.2323 - val_y1_output_root_mean_squared_error: 0.9775 - val_y2_output_root_mean_squared_error: 1.4979</span><br><span class="line">Epoch 119&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 2.1383 - y1_output_loss: 0.5004 - y2_output_loss: 1.6333 - y1_output_root_mean_squared_error: 0.7049 - y2_output_root_mean_squared_error: 1.2812 - val_loss: 2.9985 - val_y1_output_loss: 0.7102 - val_y2_output_loss: 2.2197 - val_y1_output_root_mean_squared_error: 0.8540 - val_y2_output_root_mean_squared_error: 1.5063</span><br><span class="line">Epoch 120&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 2.6367 - y1_output_loss: 0.6458 - y2_output_loss: 1.9711 - y1_output_root_mean_squared_error: 0.8044 - y2_output_root_mean_squared_error: 1.4106 - val_loss: 2.4831 - val_y1_output_loss: 0.5070 - val_y2_output_loss: 1.9445 - val_y1_output_root_mean_squared_error: 0.7169 - val_y2_output_root_mean_squared_error: 1.4033</span><br><span class="line">Epoch 121&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 2.4851 - y1_output_loss: 0.5555 - y2_output_loss: 1.9432 - y1_output_root_mean_squared_error: 0.7473 - y2_output_root_mean_squared_error: 1.3880 - val_loss: 3.0885 - val_y1_output_loss: 0.7913 - val_y2_output_loss: 2.2221 - val_y1_output_root_mean_squared_error: 0.8925 - val_y2_output_root_mean_squared_error: 1.5139</span><br><span class="line">Epoch 122&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 3.2907 - y1_output_loss: 0.8414 - y2_output_loss: 2.4389 - y1_output_root_mean_squared_error: 0.9211 - y2_output_root_mean_squared_error: 1.5628 - val_loss: 2.9198 - val_y1_output_loss: 0.6251 - val_y2_output_loss: 2.2255 - val_y1_output_root_mean_squared_error: 0.7951 - val_y2_output_root_mean_squared_error: 1.5125</span><br><span class="line">Epoch 123&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 2.6569 - y1_output_loss: 0.6487 - y2_output_loss: 1.9856 - y1_output_root_mean_squared_error: 0.8091 - y2_output_root_mean_squared_error: 1.4150 - val_loss: 2.5409 - val_y1_output_loss: 0.5694 - val_y2_output_loss: 1.9153 - val_y1_output_root_mean_squared_error: 0.7431 - val_y2_output_root_mean_squared_error: 1.4102</span><br><span class="line">Epoch 124&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 2.7427 - y1_output_loss: 0.6118 - y2_output_loss: 2.1091 - y1_output_root_mean_squared_error: 0.7849 - y2_output_root_mean_squared_error: 1.4583 - val_loss: 5.3474 - val_y1_output_loss: 1.3537 - val_y2_output_loss: 3.8852 - val_y1_output_root_mean_squared_error: 1.1821 - val_y2_output_root_mean_squared_error: 1.9875</span><br><span class="line">Epoch 125&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 1.9368 - y1_output_loss: 0.3973 - y2_output_loss: 1.5291 - y1_output_root_mean_squared_error: 0.6314 - y2_output_root_mean_squared_error: 1.2402 - val_loss: 2.5405 - val_y1_output_loss: 0.7154 - val_y2_output_loss: 1.8118 - val_y1_output_root_mean_squared_error: 0.8352 - val_y2_output_root_mean_squared_error: 1.3576</span><br><span class="line">Epoch 126&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 2.5711 - y1_output_loss: 0.5857 - y2_output_loss: 1.9658 - y1_output_root_mean_squared_error: 0.7664 - y2_output_root_mean_squared_error: 1.4084 - val_loss: 2.9473 - val_y1_output_loss: 0.9183 - val_y2_output_loss: 1.9738 - val_y1_output_root_mean_squared_error: 0.9616 - val_y2_output_root_mean_squared_error: 1.4222</span><br><span class="line">Epoch 127&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 123us&#x2F;sample - loss: 2.3240 - y1_output_loss: 0.5337 - y2_output_loss: 1.7764 - y1_output_root_mean_squared_error: 0.7321 - y2_output_root_mean_squared_error: 1.3372 - val_loss: 2.1105 - val_y1_output_loss: 0.3724 - val_y2_output_loss: 1.6871 - val_y1_output_root_mean_squared_error: 0.6174 - val_y2_output_root_mean_squared_error: 1.3150</span><br><span class="line">Epoch 128&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 3.6567 - y1_output_loss: 0.8800 - y2_output_loss: 2.7428 - y1_output_root_mean_squared_error: 0.9425 - y2_output_root_mean_squared_error: 1.6639 - val_loss: 2.0629 - val_y1_output_loss: 0.4231 - val_y2_output_loss: 1.5907 - val_y1_output_root_mean_squared_error: 0.6542 - val_y2_output_root_mean_squared_error: 1.2786</span><br><span class="line">Epoch 129&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 123us&#x2F;sample - loss: 2.2012 - y1_output_loss: 0.4609 - y2_output_loss: 1.7361 - y1_output_root_mean_squared_error: 0.6802 - y2_output_root_mean_squared_error: 1.3185 - val_loss: 2.1340 - val_y1_output_loss: 0.3702 - val_y2_output_loss: 1.7035 - val_y1_output_root_mean_squared_error: 0.6066 - val_y2_output_root_mean_squared_error: 1.3289</span><br><span class="line">Epoch 130&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 2.1666 - y1_output_loss: 0.4767 - y2_output_loss: 1.6711 - y1_output_root_mean_squared_error: 0.6932 - y2_output_root_mean_squared_error: 1.2985 - val_loss: 2.1520 - val_y1_output_loss: 0.3801 - val_y2_output_loss: 1.7325 - val_y1_output_root_mean_squared_error: 0.6053 - val_y2_output_root_mean_squared_error: 1.3363</span><br><span class="line">Epoch 131&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 123us&#x2F;sample - loss: 1.8277 - y1_output_loss: 0.4356 - y2_output_loss: 1.4210 - y1_output_root_mean_squared_error: 0.6528 - y2_output_root_mean_squared_error: 1.1839 - val_loss: 17.7367 - val_y1_output_loss: 4.7329 - val_y2_output_loss: 12.4797 - val_y1_output_root_mean_squared_error: 2.2161 - val_y2_output_root_mean_squared_error: 3.5813</span><br><span class="line">Epoch 132&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 3.4298 - y1_output_loss: 0.9002 - y2_output_loss: 2.5686 - y1_output_root_mean_squared_error: 0.9452 - y2_output_root_mean_squared_error: 1.5926 - val_loss: 4.3817 - val_y1_output_loss: 1.3535 - val_y2_output_loss: 2.9782 - val_y1_output_root_mean_squared_error: 1.1632 - val_y2_output_root_mean_squared_error: 1.7403</span><br><span class="line">Epoch 133&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 3.0775 - y1_output_loss: 0.7920 - y2_output_loss: 2.2712 - y1_output_root_mean_squared_error: 0.8932 - y2_output_root_mean_squared_error: 1.5099 - val_loss: 2.9696 - val_y1_output_loss: 0.5009 - val_y2_output_loss: 2.4040 - val_y1_output_root_mean_squared_error: 0.7070 - val_y2_output_root_mean_squared_error: 1.5715</span><br><span class="line">Epoch 134&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 2.8412 - y1_output_loss: 0.5918 - y2_output_loss: 2.2311 - y1_output_root_mean_squared_error: 0.7723 - y2_output_root_mean_squared_error: 1.4982 - val_loss: 2.8491 - val_y1_output_loss: 0.5917 - val_y2_output_loss: 2.2013 - val_y1_output_root_mean_squared_error: 0.7720 - val_y2_output_root_mean_squared_error: 1.5011</span><br><span class="line">Epoch 135&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 2.6163 - y1_output_loss: 0.6410 - y2_output_loss: 1.9567 - y1_output_root_mean_squared_error: 0.8015 - y2_output_root_mean_squared_error: 1.4050 - val_loss: 2.1131 - val_y1_output_loss: 0.4307 - val_y2_output_loss: 1.6398 - val_y1_output_root_mean_squared_error: 0.6497 - val_y2_output_root_mean_squared_error: 1.3004</span><br><span class="line">Epoch 136&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 2.0179 - y1_output_loss: 0.4262 - y2_output_loss: 1.5914 - y1_output_root_mean_squared_error: 0.6521 - y2_output_root_mean_squared_error: 1.2620 - val_loss: 5.5096 - val_y1_output_loss: 1.2257 - val_y2_output_loss: 4.1834 - val_y1_output_root_mean_squared_error: 1.1049 - val_y2_output_root_mean_squared_error: 2.0709</span><br><span class="line">Epoch 137&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 2.0399 - y1_output_loss: 0.5183 - y2_output_loss: 1.5087 - y1_output_root_mean_squared_error: 0.7207 - y2_output_root_mean_squared_error: 1.2331 - val_loss: 4.3702 - val_y1_output_loss: 0.5198 - val_y2_output_loss: 3.7677 - val_y1_output_root_mean_squared_error: 0.7300 - val_y2_output_root_mean_squared_error: 1.9589</span><br><span class="line">Epoch 138&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 2.4336 - y1_output_loss: 0.5562 - y2_output_loss: 1.8663 - y1_output_root_mean_squared_error: 0.7460 - y2_output_root_mean_squared_error: 1.3701 - val_loss: 4.4433 - val_y1_output_loss: 1.5721 - val_y2_output_loss: 2.7677 - val_y1_output_root_mean_squared_error: 1.2720 - val_y2_output_root_mean_squared_error: 1.6809</span><br><span class="line">Epoch 139&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 130us&#x2F;sample - loss: 1.8450 - y1_output_loss: 0.4158 - y2_output_loss: 1.4284 - y1_output_root_mean_squared_error: 0.6441 - y2_output_root_mean_squared_error: 1.1959 - val_loss: 3.6927 - val_y1_output_loss: 0.6804 - val_y2_output_loss: 2.9271 - val_y1_output_root_mean_squared_error: 0.8392 - val_y2_output_root_mean_squared_error: 1.7287</span><br><span class="line">Epoch 140&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 130us&#x2F;sample - loss: 2.4801 - y1_output_loss: 0.5633 - y2_output_loss: 1.8972 - y1_output_root_mean_squared_error: 0.7538 - y2_output_root_mean_squared_error: 1.3827 - val_loss: 2.1846 - val_y1_output_loss: 0.4804 - val_y2_output_loss: 1.6568 - val_y1_output_root_mean_squared_error: 0.6927 - val_y2_output_root_mean_squared_error: 1.3057</span><br><span class="line">Epoch 141&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 129us&#x2F;sample - loss: 2.1644 - y1_output_loss: 0.4974 - y2_output_loss: 1.7106 - y1_output_root_mean_squared_error: 0.7077 - y2_output_root_mean_squared_error: 1.2898 - val_loss: 5.4394 - val_y1_output_loss: 0.4601 - val_y2_output_loss: 4.9193 - val_y1_output_root_mean_squared_error: 0.6638 - val_y2_output_root_mean_squared_error: 2.2358</span><br><span class="line">Epoch 142&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 2.2697 - y1_output_loss: 0.5015 - y2_output_loss: 1.7589 - y1_output_root_mean_squared_error: 0.7093 - y2_output_root_mean_squared_error: 1.3292 - val_loss: 2.7382 - val_y1_output_loss: 0.4664 - val_y2_output_loss: 2.2241 - val_y1_output_root_mean_squared_error: 0.6710 - val_y2_output_root_mean_squared_error: 1.5126</span><br><span class="line">Epoch 143&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 4.9674 - y1_output_loss: 1.3473 - y2_output_loss: 3.5766 - y1_output_root_mean_squared_error: 1.1657 - y2_output_root_mean_squared_error: 1.8996 - val_loss: 2.0794 - val_y1_output_loss: 0.4397 - val_y2_output_loss: 1.5796 - val_y1_output_root_mean_squared_error: 0.6728 - val_y2_output_root_mean_squared_error: 1.2754</span><br><span class="line">Epoch 144&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 1.8016 - y1_output_loss: 0.3766 - y2_output_loss: 1.4441 - y1_output_root_mean_squared_error: 0.6099 - y2_output_root_mean_squared_error: 1.1957 - val_loss: 2.1433 - val_y1_output_loss: 0.4255 - val_y2_output_loss: 1.7060 - val_y1_output_root_mean_squared_error: 0.6348 - val_y2_output_root_mean_squared_error: 1.3192</span><br><span class="line">Epoch 145&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 2.3512 - y1_output_loss: 0.4867 - y2_output_loss: 1.8443 - y1_output_root_mean_squared_error: 0.7005 - y2_output_root_mean_squared_error: 1.3640 - val_loss: 2.1934 - val_y1_output_loss: 0.3809 - val_y2_output_loss: 1.7760 - val_y1_output_root_mean_squared_error: 0.6093 - val_y2_output_root_mean_squared_error: 1.3499</span><br><span class="line">Epoch 146&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 2.6773 - y1_output_loss: 0.5296 - y2_output_loss: 2.1236 - y1_output_root_mean_squared_error: 0.7309 - y2_output_root_mean_squared_error: 1.4639 - val_loss: 1.8536 - val_y1_output_loss: 0.3315 - val_y2_output_loss: 1.4738 - val_y1_output_root_mean_squared_error: 0.5736 - val_y2_output_root_mean_squared_error: 1.2347</span><br><span class="line">Epoch 147&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 4.1936 - y1_output_loss: 1.4042 - y2_output_loss: 3.7321 - y1_output_root_mean_squared_error: 1.0270 - y2_output_root_mean_squared_error: 1.7717 - val_loss: 201.8944 - val_y1_output_loss: 64.7751 - val_y2_output_loss: 131.7571 - val_y1_output_root_mean_squared_error: 8.1820 - val_y2_output_root_mean_squared_error: 11.6168</span><br><span class="line">Epoch 148&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 18.8603 - y1_output_loss: 6.4366 - y2_output_loss: 12.2556 - y1_output_root_mean_squared_error: 2.5485 - y2_output_root_mean_squared_error: 3.5165 - val_loss: 2.3160 - val_y1_output_loss: 0.4644 - val_y2_output_loss: 1.7945 - val_y1_output_root_mean_squared_error: 0.6838 - val_y2_output_root_mean_squared_error: 1.3596</span><br><span class="line">Epoch 149&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 1.9724 - y1_output_loss: 0.4885 - y2_output_loss: 1.4724 - y1_output_root_mean_squared_error: 0.7022 - y2_output_root_mean_squared_error: 1.2163 - val_loss: 1.9816 - val_y1_output_loss: 0.3444 - val_y2_output_loss: 1.6048 - val_y1_output_root_mean_squared_error: 0.5732 - val_y2_output_root_mean_squared_error: 1.2857</span><br><span class="line">Epoch 150&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 2.4481 - y1_output_loss: 0.5327 - y2_output_loss: 1.9170 - y1_output_root_mean_squared_error: 0.7261 - y2_output_root_mean_squared_error: 1.3859 - val_loss: 2.9164 - val_y1_output_loss: 0.8048 - val_y2_output_loss: 2.0447 - val_y1_output_root_mean_squared_error: 0.8927 - val_y2_output_root_mean_squared_error: 1.4558</span><br><span class="line">Epoch 151&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 2.0279 - y1_output_loss: 0.3977 - y2_output_loss: 1.6302 - y1_output_root_mean_squared_error: 0.6306 - y2_output_root_mean_squared_error: 1.2768 - val_loss: 1.8554 - val_y1_output_loss: 0.3486 - val_y2_output_loss: 1.4757 - val_y1_output_root_mean_squared_error: 0.5850 - val_y2_output_root_mean_squared_error: 1.2301</span><br><span class="line">Epoch 152&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 129us&#x2F;sample - loss: 1.8083 - y1_output_loss: 0.3799 - y2_output_loss: 1.4336 - y1_output_root_mean_squared_error: 0.6167 - y2_output_root_mean_squared_error: 1.1950 - val_loss: 3.4343 - val_y1_output_loss: 0.4487 - val_y2_output_loss: 2.8932 - val_y1_output_root_mean_squared_error: 0.6750 - val_y2_output_root_mean_squared_error: 1.7259</span><br><span class="line">Epoch 153&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 1.6338 - y1_output_loss: 0.3082 - y2_output_loss: 1.3103 - y1_output_root_mean_squared_error: 0.5576 - y2_output_root_mean_squared_error: 1.1501 - val_loss: 2.2626 - val_y1_output_loss: 0.3657 - val_y2_output_loss: 1.8465 - val_y1_output_root_mean_squared_error: 0.6001 - val_y2_output_root_mean_squared_error: 1.3793</span><br><span class="line">Epoch 154&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 1.7627 - y1_output_loss: 0.3608 - y2_output_loss: 1.3870 - y1_output_root_mean_squared_error: 0.6029 - y2_output_root_mean_squared_error: 1.1829 - val_loss: 2.1478 - val_y1_output_loss: 0.3348 - val_y2_output_loss: 1.7492 - val_y1_output_root_mean_squared_error: 0.5779 - val_y2_output_root_mean_squared_error: 1.3468</span><br><span class="line">Epoch 155&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 1.7728 - y1_output_loss: 0.4172 - y2_output_loss: 1.3526 - y1_output_root_mean_squared_error: 0.6469 - y2_output_root_mean_squared_error: 1.1637 - val_loss: 2.0538 - val_y1_output_loss: 0.4127 - val_y2_output_loss: 1.6087 - val_y1_output_root_mean_squared_error: 0.6512 - val_y2_output_root_mean_squared_error: 1.2766</span><br><span class="line">Epoch 156&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 2.7096 - y1_output_loss: 0.7193 - y2_output_loss: 2.0881 - y1_output_root_mean_squared_error: 0.8436 - y2_output_root_mean_squared_error: 1.4135 - val_loss: 5.4706 - val_y1_output_loss: 1.1381 - val_y2_output_loss: 4.2956 - val_y1_output_root_mean_squared_error: 1.0546 - val_y2_output_root_mean_squared_error: 2.0877</span><br><span class="line">Epoch 157&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 2.0771 - y1_output_loss: 0.4157 - y2_output_loss: 1.6765 - y1_output_root_mean_squared_error: 0.6473 - y2_output_root_mean_squared_error: 1.2877 - val_loss: 5.3942 - val_y1_output_loss: 0.6254 - val_y2_output_loss: 4.6364 - val_y1_output_root_mean_squared_error: 0.7918 - val_y2_output_root_mean_squared_error: 2.1834</span><br><span class="line">Epoch 158&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 1.9456 - y1_output_loss: 0.3636 - y2_output_loss: 1.6126 - y1_output_root_mean_squared_error: 0.6029 - y2_output_root_mean_squared_error: 1.2578 - val_loss: 4.9613 - val_y1_output_loss: 0.6620 - val_y2_output_loss: 4.1739 - val_y1_output_root_mean_squared_error: 0.8203 - val_y2_output_root_mean_squared_error: 2.0708</span><br><span class="line">Epoch 159&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 2.1389 - y1_output_loss: 0.4768 - y2_output_loss: 1.6436 - y1_output_root_mean_squared_error: 0.6938 - y2_output_root_mean_squared_error: 1.2875 - val_loss: 2.0170 - val_y1_output_loss: 0.4035 - val_y2_output_loss: 1.5804 - val_y1_output_root_mean_squared_error: 0.6287 - val_y2_output_root_mean_squared_error: 1.2735</span><br><span class="line">Epoch 160&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 1.9899 - y1_output_loss: 0.4208 - y2_output_loss: 1.5586 - y1_output_root_mean_squared_error: 0.6510 - y2_output_root_mean_squared_error: 1.2514 - val_loss: 1.7125 - val_y1_output_loss: 0.2879 - val_y2_output_loss: 1.3768 - val_y1_output_root_mean_squared_error: 0.5365 - val_y2_output_root_mean_squared_error: 1.1936</span><br><span class="line">Epoch 161&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 1.9091 - y1_output_loss: 0.4872 - y2_output_loss: 1.4214 - y1_output_root_mean_squared_error: 0.6986 - y2_output_root_mean_squared_error: 1.1921 - val_loss: 2.5078 - val_y1_output_loss: 0.5521 - val_y2_output_loss: 1.8764 - val_y1_output_root_mean_squared_error: 0.7493 - val_y2_output_root_mean_squared_error: 1.3951</span><br><span class="line">Epoch 162&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 129us&#x2F;sample - loss: 1.7781 - y1_output_loss: 0.3950 - y2_output_loss: 1.3783 - y1_output_root_mean_squared_error: 0.6287 - y2_output_root_mean_squared_error: 1.1760 - val_loss: 1.7752 - val_y1_output_loss: 0.3104 - val_y2_output_loss: 1.4252 - val_y1_output_root_mean_squared_error: 0.5538 - val_y2_output_root_mean_squared_error: 1.2118</span><br><span class="line">Epoch 163&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 131us&#x2F;sample - loss: 1.6236 - y1_output_loss: 0.3085 - y2_output_loss: 1.3126 - y1_output_root_mean_squared_error: 0.5567 - y2_output_root_mean_squared_error: 1.1462 - val_loss: 3.0888 - val_y1_output_loss: 0.3150 - val_y2_output_loss: 2.7317 - val_y1_output_root_mean_squared_error: 0.5523 - val_y2_output_root_mean_squared_error: 1.6685</span><br><span class="line">Epoch 164&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 2.1379 - y1_output_loss: 0.3975 - y2_output_loss: 1.7299 - y1_output_root_mean_squared_error: 0.6307 - y2_output_root_mean_squared_error: 1.3191 - val_loss: 1.8519 - val_y1_output_loss: 0.3228 - val_y2_output_loss: 1.4910 - val_y1_output_root_mean_squared_error: 0.5707 - val_y2_output_root_mean_squared_error: 1.2354</span><br><span class="line">Epoch 165&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 134us&#x2F;sample - loss: 1.7058 - y1_output_loss: 0.3446 - y2_output_loss: 1.3710 - y1_output_root_mean_squared_error: 0.5851 - y2_output_root_mean_squared_error: 1.1677 - val_loss: 6.4144 - val_y1_output_loss: 1.6215 - val_y2_output_loss: 4.7379 - val_y1_output_root_mean_squared_error: 1.2644 - val_y2_output_root_mean_squared_error: 2.1945</span><br><span class="line">Epoch 166&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 145us&#x2F;sample - loss: 1.5520 - y1_output_loss: 0.3239 - y2_output_loss: 1.2506 - y1_output_root_mean_squared_error: 0.5656 - y2_output_root_mean_squared_error: 1.1100 - val_loss: 3.3376 - val_y1_output_loss: 0.6627 - val_y2_output_loss: 2.6827 - val_y1_output_root_mean_squared_error: 0.8181 - val_y2_output_root_mean_squared_error: 1.6335</span><br><span class="line">Epoch 167&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 1.4240 - y1_output_loss: 0.2518 - y2_output_loss: 1.1706 - y1_output_root_mean_squared_error: 0.5035 - y2_output_root_mean_squared_error: 1.0819 - val_loss: 1.9427 - val_y1_output_loss: 0.2686 - val_y2_output_loss: 1.6193 - val_y1_output_root_mean_squared_error: 0.5146 - val_y2_output_root_mean_squared_error: 1.2953</span><br><span class="line">Epoch 168&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 130us&#x2F;sample - loss: 1.5872 - y1_output_loss: 0.3355 - y2_output_loss: 1.2425 - y1_output_root_mean_squared_error: 0.5803 - y2_output_root_mean_squared_error: 1.1182 - val_loss: 1.7449 - val_y1_output_loss: 0.3358 - val_y2_output_loss: 1.3646 - val_y1_output_root_mean_squared_error: 0.5862 - val_y2_output_root_mean_squared_error: 1.1838</span><br><span class="line">Epoch 169&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 132us&#x2F;sample - loss: 1.5463 - y1_output_loss: 0.3548 - y2_output_loss: 1.2211 - y1_output_root_mean_squared_error: 0.5925 - y2_output_root_mean_squared_error: 1.0933 - val_loss: 2.7176 - val_y1_output_loss: 0.3782 - val_y2_output_loss: 2.3416 - val_y1_output_root_mean_squared_error: 0.6216 - val_y2_output_root_mean_squared_error: 1.5268</span><br><span class="line">Epoch 170&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 139us&#x2F;sample - loss: 1.6071 - y1_output_loss: 0.3512 - y2_output_loss: 1.2465 - y1_output_root_mean_squared_error: 0.5915 - y2_output_root_mean_squared_error: 1.1213 - val_loss: 1.7229 - val_y1_output_loss: 0.3508 - val_y2_output_loss: 1.3385 - val_y1_output_root_mean_squared_error: 0.5986 - val_y2_output_root_mean_squared_error: 1.1682</span><br><span class="line">Epoch 171&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 1.4140 - y1_output_loss: 0.2833 - y2_output_loss: 1.1492 - y1_output_root_mean_squared_error: 0.5340 - y2_output_root_mean_squared_error: 1.0624 - val_loss: 4.5731 - val_y1_output_loss: 0.3792 - val_y2_output_loss: 4.1104 - val_y1_output_root_mean_squared_error: 0.6074 - val_y2_output_root_mean_squared_error: 2.0504</span><br><span class="line">Epoch 172&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 1.9802 - y1_output_loss: 0.3419 - y2_output_loss: 1.6317 - y1_output_root_mean_squared_error: 0.5855 - y2_output_root_mean_squared_error: 1.2796 - val_loss: 2.3996 - val_y1_output_loss: 0.3824 - val_y2_output_loss: 1.9609 - val_y1_output_root_mean_squared_error: 0.6125 - val_y2_output_root_mean_squared_error: 1.4228</span><br><span class="line">Epoch 173&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 130us&#x2F;sample - loss: 1.5633 - y1_output_loss: 0.3153 - y2_output_loss: 1.2518 - y1_output_root_mean_squared_error: 0.5579 - y2_output_root_mean_squared_error: 1.1189 - val_loss: 3.0058 - val_y1_output_loss: 0.5146 - val_y2_output_loss: 2.4062 - val_y1_output_root_mean_squared_error: 0.7204 - val_y2_output_root_mean_squared_error: 1.5770</span><br><span class="line">Epoch 174&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 136us&#x2F;sample - loss: 1.3218 - y1_output_loss: 0.2760 - y2_output_loss: 1.0416 - y1_output_root_mean_squared_error: 0.5264 - y2_output_root_mean_squared_error: 1.0221 - val_loss: 1.7672 - val_y1_output_loss: 0.3971 - val_y2_output_loss: 1.3321 - val_y1_output_root_mean_squared_error: 0.6302 - val_y2_output_root_mean_squared_error: 1.1705</span><br><span class="line">Epoch 175&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 130us&#x2F;sample - loss: 1.6846 - y1_output_loss: 0.2993 - y2_output_loss: 1.3840 - y1_output_root_mean_squared_error: 0.5483 - y2_output_root_mean_squared_error: 1.1764 - val_loss: 1.9863 - val_y1_output_loss: 0.4500 - val_y2_output_loss: 1.5399 - val_y1_output_root_mean_squared_error: 0.6605 - val_y2_output_root_mean_squared_error: 1.2450</span><br><span class="line">Epoch 176&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 1.2731 - y1_output_loss: 0.2890 - y2_output_loss: 0.9911 - y1_output_root_mean_squared_error: 0.5400 - y2_output_root_mean_squared_error: 0.9907 - val_loss: 1.6746 - val_y1_output_loss: 0.3094 - val_y2_output_loss: 1.3304 - val_y1_output_root_mean_squared_error: 0.5511 - val_y2_output_root_mean_squared_error: 1.1709</span><br><span class="line">Epoch 177&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 1.4450 - y1_output_loss: 0.2979 - y2_output_loss: 1.1413 - y1_output_root_mean_squared_error: 0.5483 - y2_output_root_mean_squared_error: 1.0698 - val_loss: 1.9717 - val_y1_output_loss: 0.3581 - val_y2_output_loss: 1.5742 - val_y1_output_root_mean_squared_error: 0.5916 - val_y2_output_root_mean_squared_error: 1.2735</span><br><span class="line">Epoch 178&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 132us&#x2F;sample - loss: 1.5866 - y1_output_loss: 0.2986 - y2_output_loss: 1.3070 - y1_output_root_mean_squared_error: 0.5490 - y2_output_root_mean_squared_error: 1.1337 - val_loss: 3.6153 - val_y1_output_loss: 0.3120 - val_y2_output_loss: 3.2293 - val_y1_output_root_mean_squared_error: 0.5533 - val_y2_output_root_mean_squared_error: 1.8191</span><br><span class="line">Epoch 179&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 129us&#x2F;sample - loss: 1.6942 - y1_output_loss: 0.3240 - y2_output_loss: 1.3608 - y1_output_root_mean_squared_error: 0.5707 - y2_output_root_mean_squared_error: 1.1698 - val_loss: 1.9108 - val_y1_output_loss: 0.3175 - val_y2_output_loss: 1.5527 - val_y1_output_root_mean_squared_error: 0.5618 - val_y2_output_root_mean_squared_error: 1.2630</span><br><span class="line">Epoch 180&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 130us&#x2F;sample - loss: 1.5454 - y1_output_loss: 0.2797 - y2_output_loss: 1.2598 - y1_output_root_mean_squared_error: 0.5247 - y2_output_root_mean_squared_error: 1.1270 - val_loss: 2.0836 - val_y1_output_loss: 0.4954 - val_y2_output_loss: 1.5354 - val_y1_output_root_mean_squared_error: 0.7073 - val_y2_output_root_mean_squared_error: 1.2583</span><br><span class="line">Epoch 181&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 130us&#x2F;sample - loss: 1.3132 - y1_output_loss: 0.2565 - y2_output_loss: 1.0539 - y1_output_root_mean_squared_error: 0.5073 - y2_output_root_mean_squared_error: 1.0275 - val_loss: 1.9060 - val_y1_output_loss: 0.3849 - val_y2_output_loss: 1.4984 - val_y1_output_root_mean_squared_error: 0.6129 - val_y2_output_root_mean_squared_error: 1.2371</span><br><span class="line">Epoch 182&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 133us&#x2F;sample - loss: 1.8543 - y1_output_loss: 0.3042 - y2_output_loss: 1.5490 - y1_output_root_mean_squared_error: 0.5538 - y2_output_root_mean_squared_error: 1.2440 - val_loss: 2.8585 - val_y1_output_loss: 0.2531 - val_y2_output_loss: 2.5583 - val_y1_output_root_mean_squared_error: 0.4933 - val_y2_output_root_mean_squared_error: 1.6171</span><br><span class="line">Epoch 183&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 129us&#x2F;sample - loss: 1.5573 - y1_output_loss: 0.3556 - y2_output_loss: 1.2077 - y1_output_root_mean_squared_error: 0.5931 - y2_output_root_mean_squared_error: 1.0980 - val_loss: 2.3180 - val_y1_output_loss: 0.3930 - val_y2_output_loss: 1.8882 - val_y1_output_root_mean_squared_error: 0.6129 - val_y2_output_root_mean_squared_error: 1.3937</span><br><span class="line">Epoch 184&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 130us&#x2F;sample - loss: 1.6738 - y1_output_loss: 0.3106 - y2_output_loss: 1.3598 - y1_output_root_mean_squared_error: 0.5539 - y2_output_root_mean_squared_error: 1.1692 - val_loss: 2.3384 - val_y1_output_loss: 0.7111 - val_y2_output_loss: 1.6178 - val_y1_output_root_mean_squared_error: 0.8356 - val_y2_output_root_mean_squared_error: 1.2807</span><br><span class="line">Epoch 185&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 132us&#x2F;sample - loss: 1.4286 - y1_output_loss: 0.2943 - y2_output_loss: 1.1314 - y1_output_root_mean_squared_error: 0.5422 - y2_output_root_mean_squared_error: 1.0652 - val_loss: 2.1179 - val_y1_output_loss: 0.2939 - val_y2_output_loss: 1.7837 - val_y1_output_root_mean_squared_error: 0.5425 - val_y2_output_root_mean_squared_error: 1.3504</span><br><span class="line">Epoch 186&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 129us&#x2F;sample - loss: 1.2580 - y1_output_loss: 0.2618 - y2_output_loss: 0.9888 - y1_output_root_mean_squared_error: 0.5130 - y2_output_root_mean_squared_error: 0.9974 - val_loss: 1.6665 - val_y1_output_loss: 0.3084 - val_y2_output_loss: 1.3561 - val_y1_output_root_mean_squared_error: 0.5407 - val_y2_output_root_mean_squared_error: 1.1722</span><br><span class="line">Epoch 187&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 132us&#x2F;sample - loss: 1.4602 - y1_output_loss: 0.2781 - y2_output_loss: 1.1799 - y1_output_root_mean_squared_error: 0.5270 - y2_output_root_mean_squared_error: 1.0874 - val_loss: 1.8110 - val_y1_output_loss: 0.3426 - val_y2_output_loss: 1.4182 - val_y1_output_root_mean_squared_error: 0.5865 - val_y2_output_root_mean_squared_error: 1.2112</span><br><span class="line">Epoch 188&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 136us&#x2F;sample - loss: 1.5475 - y1_output_loss: 0.3007 - y2_output_loss: 1.2389 - y1_output_root_mean_squared_error: 0.5482 - y2_output_root_mean_squared_error: 1.1167 - val_loss: 1.7102 - val_y1_output_loss: 0.3134 - val_y2_output_loss: 1.3671 - val_y1_output_root_mean_squared_error: 0.5651 - val_y2_output_root_mean_squared_error: 1.1793</span><br><span class="line">Epoch 189&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 129us&#x2F;sample - loss: 1.2106 - y1_output_loss: 0.2831 - y2_output_loss: 0.9231 - y1_output_root_mean_squared_error: 0.5315 - y2_output_root_mean_squared_error: 0.9634 - val_loss: 2.2888 - val_y1_output_loss: 0.3404 - val_y2_output_loss: 1.8912 - val_y1_output_root_mean_squared_error: 0.5774 - val_y2_output_root_mean_squared_error: 1.3983</span><br><span class="line">Epoch 190&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 1.3904 - y1_output_loss: 0.3132 - y2_output_loss: 1.0898 - y1_output_root_mean_squared_error: 0.5608 - y2_output_root_mean_squared_error: 1.0372 - val_loss: 1.5518 - val_y1_output_loss: 0.3055 - val_y2_output_loss: 1.2129 - val_y1_output_root_mean_squared_error: 0.5452 - val_y2_output_root_mean_squared_error: 1.1201</span><br><span class="line">Epoch 191&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 1.3137 - y1_output_loss: 0.2771 - y2_output_loss: 1.0442 - y1_output_root_mean_squared_error: 0.5264 - y2_output_root_mean_squared_error: 1.0182 - val_loss: 2.4711 - val_y1_output_loss: 0.3605 - val_y2_output_loss: 2.0519 - val_y1_output_root_mean_squared_error: 0.6085 - val_y2_output_root_mean_squared_error: 1.4494</span><br><span class="line">Epoch 192&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 130us&#x2F;sample - loss: 1.7305 - y1_output_loss: 0.3318 - y2_output_loss: 1.3946 - y1_output_root_mean_squared_error: 0.5749 - y2_output_root_mean_squared_error: 1.1832 - val_loss: 2.9357 - val_y1_output_loss: 0.5741 - val_y2_output_loss: 2.3683 - val_y1_output_root_mean_squared_error: 0.7479 - val_y2_output_root_mean_squared_error: 1.5415</span><br><span class="line">Epoch 193&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 132us&#x2F;sample - loss: 1.3774 - y1_output_loss: 0.2904 - y2_output_loss: 1.1020 - y1_output_root_mean_squared_error: 0.5383 - y2_output_root_mean_squared_error: 1.0429 - val_loss: 3.5545 - val_y1_output_loss: 0.5270 - val_y2_output_loss: 2.9553 - val_y1_output_root_mean_squared_error: 0.7175 - val_y2_output_root_mean_squared_error: 1.7435</span><br><span class="line">Epoch 194&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 1.6545 - y1_output_loss: 0.2941 - y2_output_loss: 1.3615 - y1_output_root_mean_squared_error: 0.5446 - y2_output_root_mean_squared_error: 1.1653 - val_loss: 2.4353 - val_y1_output_loss: 0.2863 - val_y2_output_loss: 2.1064 - val_y1_output_root_mean_squared_error: 0.5407 - val_y2_output_root_mean_squared_error: 1.4639</span><br><span class="line">Epoch 195&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 1.4820 - y1_output_loss: 0.3384 - y2_output_loss: 1.1822 - y1_output_root_mean_squared_error: 0.5790 - y2_output_root_mean_squared_error: 1.0708 - val_loss: 2.4045 - val_y1_output_loss: 0.6991 - val_y2_output_loss: 1.6916 - val_y1_output_root_mean_squared_error: 0.8375 - val_y2_output_root_mean_squared_error: 1.3050</span><br><span class="line">Epoch 196&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 123us&#x2F;sample - loss: 1.3751 - y1_output_loss: 0.2833 - y2_output_loss: 1.0899 - y1_output_root_mean_squared_error: 0.5343 - y2_output_root_mean_squared_error: 1.0438 - val_loss: 1.4411 - val_y1_output_loss: 0.2450 - val_y2_output_loss: 1.1987 - val_y1_output_root_mean_squared_error: 0.4976 - val_y2_output_root_mean_squared_error: 1.0925</span><br><span class="line">Epoch 197&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 2.1709 - y1_output_loss: 0.5052 - y2_output_loss: 1.6498 - y1_output_root_mean_squared_error: 0.7134 - y2_output_root_mean_squared_error: 1.2892 - val_loss: 1.7432 - val_y1_output_loss: 0.4026 - val_y2_output_loss: 1.2972 - val_y1_output_root_mean_squared_error: 0.6425 - val_y2_output_root_mean_squared_error: 1.1534</span><br><span class="line">Epoch 198&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 1.4809 - y1_output_loss: 0.2906 - y2_output_loss: 1.1817 - y1_output_root_mean_squared_error: 0.5404 - y2_output_root_mean_squared_error: 1.0903 - val_loss: 1.5117 - val_y1_output_loss: 0.2984 - val_y2_output_loss: 1.1962 - val_y1_output_root_mean_squared_error: 0.5436 - val_y2_output_root_mean_squared_error: 1.1028</span><br><span class="line">Epoch 199&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 1.1756 - y1_output_loss: 0.2559 - y2_output_loss: 0.9150 - y1_output_root_mean_squared_error: 0.5029 - y2_output_root_mean_squared_error: 0.9606 - val_loss: 1.3989 - val_y1_output_loss: 0.2343 - val_y2_output_loss: 1.1314 - val_y1_output_root_mean_squared_error: 0.4858 - val_y2_output_root_mean_squared_error: 1.0784</span><br><span class="line">Epoch 200&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 1.4061 - y1_output_loss: 0.2978 - y2_output_loss: 1.1105 - y1_output_root_mean_squared_error: 0.5344 - y2_output_root_mean_squared_error: 1.0586 - val_loss: 1.4930 - val_y1_output_loss: 0.2934 - val_y2_output_loss: 1.1858 - val_y1_output_root_mean_squared_error: 0.5333 - val_y2_output_root_mean_squared_error: 1.0994</span><br><span class="line">Epoch 201&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 1.2984 - y1_output_loss: 0.2773 - y2_output_loss: 1.0312 - y1_output_root_mean_squared_error: 0.5233 - y2_output_root_mean_squared_error: 1.0122 - val_loss: 4.7525 - val_y1_output_loss: 0.8954 - val_y2_output_loss: 3.8133 - val_y1_output_root_mean_squared_error: 0.9574 - val_y2_output_root_mean_squared_error: 1.9585</span><br><span class="line">Epoch 202&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 1.5078 - y1_output_loss: 0.3284 - y2_output_loss: 1.1680 - y1_output_root_mean_squared_error: 0.5748 - y2_output_root_mean_squared_error: 1.0851 - val_loss: 1.5736 - val_y1_output_loss: 0.2502 - val_y2_output_loss: 1.2860 - val_y1_output_root_mean_squared_error: 0.5060 - val_y2_output_root_mean_squared_error: 1.1479</span><br><span class="line">Epoch 203&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 123us&#x2F;sample - loss: 1.3926 - y1_output_loss: 0.2491 - y2_output_loss: 1.1395 - y1_output_root_mean_squared_error: 0.4997 - y2_output_root_mean_squared_error: 1.0691 - val_loss: 1.6235 - val_y1_output_loss: 0.2648 - val_y2_output_loss: 1.3190 - val_y1_output_root_mean_squared_error: 0.5116 - val_y2_output_root_mean_squared_error: 1.1670</span><br><span class="line">Epoch 204&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 123us&#x2F;sample - loss: 1.3969 - y1_output_loss: 0.3213 - y2_output_loss: 1.0661 - y1_output_root_mean_squared_error: 0.5679 - y2_output_root_mean_squared_error: 1.0365 - val_loss: 1.5706 - val_y1_output_loss: 0.2627 - val_y2_output_loss: 1.2806 - val_y1_output_root_mean_squared_error: 0.5112 - val_y2_output_root_mean_squared_error: 1.1442</span><br><span class="line">Epoch 205&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 1.1250 - y1_output_loss: 0.2486 - y2_output_loss: 0.8880 - y1_output_root_mean_squared_error: 0.4986 - y2_output_root_mean_squared_error: 0.9362 - val_loss: 1.5576 - val_y1_output_loss: 0.2790 - val_y2_output_loss: 1.2440 - val_y1_output_root_mean_squared_error: 0.5261 - val_y2_output_root_mean_squared_error: 1.1317</span><br><span class="line">Epoch 206&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 1.3929 - y1_output_loss: 0.2689 - y2_output_loss: 1.1252 - y1_output_root_mean_squared_error: 0.5177 - y2_output_root_mean_squared_error: 1.0606 - val_loss: 1.6144 - val_y1_output_loss: 0.2564 - val_y2_output_loss: 1.3134 - val_y1_output_root_mean_squared_error: 0.5053 - val_y2_output_root_mean_squared_error: 1.1658</span><br><span class="line">Epoch 207&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 1.1305 - y1_output_loss: 0.2326 - y2_output_loss: 0.9028 - y1_output_root_mean_squared_error: 0.4821 - y2_output_root_mean_squared_error: 0.9476 - val_loss: 4.2890 - val_y1_output_loss: 0.9203 - val_y2_output_loss: 3.3045 - val_y1_output_root_mean_squared_error: 0.9683 - val_y2_output_root_mean_squared_error: 1.8307</span><br><span class="line">Epoch 208&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 1.5209 - y1_output_loss: 0.2901 - y2_output_loss: 1.2193 - y1_output_root_mean_squared_error: 0.5404 - y2_output_root_mean_squared_error: 1.1085 - val_loss: 1.4497 - val_y1_output_loss: 0.2263 - val_y2_output_loss: 1.1798 - val_y1_output_root_mean_squared_error: 0.4797 - val_y2_output_root_mean_squared_error: 1.1043</span><br><span class="line">Epoch 209&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 132us&#x2F;sample - loss: 1.2019 - y1_output_loss: 0.2395 - y2_output_loss: 0.9606 - y1_output_root_mean_squared_error: 0.4874 - y2_output_root_mean_squared_error: 0.9820 - val_loss: 2.9111 - val_y1_output_loss: 0.5328 - val_y2_output_loss: 2.3114 - val_y1_output_root_mean_squared_error: 0.7255 - val_y2_output_root_mean_squared_error: 1.5443</span><br><span class="line">Epoch 210&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 1.7077 - y1_output_loss: 0.3489 - y2_output_loss: 1.3546 - y1_output_root_mean_squared_error: 0.5909 - y2_output_root_mean_squared_error: 1.1656 - val_loss: 2.5006 - val_y1_output_loss: 0.4394 - val_y2_output_loss: 2.0054 - val_y1_output_root_mean_squared_error: 0.6713 - val_y2_output_root_mean_squared_error: 1.4318</span><br><span class="line">Epoch 211&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 1.3263 - y1_output_loss: 0.2765 - y2_output_loss: 1.0405 - y1_output_root_mean_squared_error: 0.5264 - y2_output_root_mean_squared_error: 1.0243 - val_loss: 2.1927 - val_y1_output_loss: 0.2578 - val_y2_output_loss: 1.8801 - val_y1_output_root_mean_squared_error: 0.5073 - val_y2_output_root_mean_squared_error: 1.3912</span><br><span class="line">Epoch 212&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 1.3685 - y1_output_loss: 0.2822 - y2_output_loss: 1.0749 - y1_output_root_mean_squared_error: 0.5333 - y2_output_root_mean_squared_error: 1.0412 - val_loss: 1.4046 - val_y1_output_loss: 0.2026 - val_y2_output_loss: 1.1669 - val_y1_output_root_mean_squared_error: 0.4464 - val_y2_output_root_mean_squared_error: 1.0979</span><br><span class="line">Epoch 213&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 1.2866 - y1_output_loss: 0.2396 - y2_output_loss: 1.0362 - y1_output_root_mean_squared_error: 0.4910 - y2_output_root_mean_squared_error: 1.0225 - val_loss: 3.8957 - val_y1_output_loss: 0.5791 - val_y2_output_loss: 3.2054 - val_y1_output_root_mean_squared_error: 0.7638 - val_y2_output_root_mean_squared_error: 1.8200</span><br><span class="line">Epoch 214&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 1.1427 - y1_output_loss: 0.2147 - y2_output_loss: 0.9185 - y1_output_root_mean_squared_error: 0.4653 - y2_output_root_mean_squared_error: 0.9624 - val_loss: 1.6318 - val_y1_output_loss: 0.3228 - val_y2_output_loss: 1.3043 - val_y1_output_root_mean_squared_error: 0.5685 - val_y2_output_root_mean_squared_error: 1.1439</span><br><span class="line">Epoch 215&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 1.3902 - y1_output_loss: 0.2817 - y2_output_loss: 1.0981 - y1_output_root_mean_squared_error: 0.5324 - y2_output_root_mean_squared_error: 1.0520 - val_loss: 1.4890 - val_y1_output_loss: 0.2285 - val_y2_output_loss: 1.2141 - val_y1_output_root_mean_squared_error: 0.4852 - val_y2_output_root_mean_squared_error: 1.1196</span><br><span class="line">Epoch 216&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 1.1179 - y1_output_loss: 0.2264 - y2_output_loss: 0.8882 - y1_output_root_mean_squared_error: 0.4761 - y2_output_root_mean_squared_error: 0.9440 - val_loss: 1.6985 - val_y1_output_loss: 0.2971 - val_y2_output_loss: 1.3630 - val_y1_output_root_mean_squared_error: 0.5416 - val_y2_output_root_mean_squared_error: 1.1854</span><br><span class="line">Epoch 217&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 1.5175 - y1_output_loss: 0.3651 - y2_output_loss: 1.1554 - y1_output_root_mean_squared_error: 0.6056 - y2_output_root_mean_squared_error: 1.0727 - val_loss: 2.9234 - val_y1_output_loss: 0.3706 - val_y2_output_loss: 2.4885 - val_y1_output_root_mean_squared_error: 0.6147 - val_y2_output_root_mean_squared_error: 1.5955</span><br><span class="line">Epoch 218&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 1.3317 - y1_output_loss: 0.2933 - y2_output_loss: 1.0273 - y1_output_root_mean_squared_error: 0.5440 - y2_output_root_mean_squared_error: 1.0177 - val_loss: 1.4300 - val_y1_output_loss: 0.2318 - val_y2_output_loss: 1.1604 - val_y1_output_root_mean_squared_error: 0.4813 - val_y2_output_root_mean_squared_error: 1.0947</span><br><span class="line">Epoch 219&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 1.1299 - y1_output_loss: 0.2337 - y2_output_loss: 0.8904 - y1_output_root_mean_squared_error: 0.4833 - y2_output_root_mean_squared_error: 0.9467 - val_loss: 2.1317 - val_y1_output_loss: 0.3438 - val_y2_output_loss: 1.7535 - val_y1_output_root_mean_squared_error: 0.5746 - val_y2_output_root_mean_squared_error: 1.3422</span><br><span class="line">Epoch 220&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 1.1036 - y1_output_loss: 0.1876 - y2_output_loss: 0.9270 - y1_output_root_mean_squared_error: 0.4315 - y2_output_root_mean_squared_error: 0.9578 - val_loss: 3.9407 - val_y1_output_loss: 0.3155 - val_y2_output_loss: 3.5702 - val_y1_output_root_mean_squared_error: 0.5476 - val_y2_output_root_mean_squared_error: 1.9081</span><br><span class="line">Epoch 221&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 1.1167 - y1_output_loss: 0.2146 - y2_output_loss: 0.9492 - y1_output_root_mean_squared_error: 0.4628 - y2_output_root_mean_squared_error: 0.9500 - val_loss: 3.7817 - val_y1_output_loss: 0.5417 - val_y2_output_loss: 3.2315 - val_y1_output_root_mean_squared_error: 0.7225 - val_y2_output_root_mean_squared_error: 1.8055</span><br><span class="line">Epoch 222&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 1.4276 - y1_output_loss: 0.3056 - y2_output_loss: 1.1115 - y1_output_root_mean_squared_error: 0.5553 - y2_output_root_mean_squared_error: 1.0579 - val_loss: 1.4796 - val_y1_output_loss: 0.2478 - val_y2_output_loss: 1.1918 - val_y1_output_root_mean_squared_error: 0.4973 - val_y2_output_root_mean_squared_error: 1.1101</span><br><span class="line">Epoch 223&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 1.0705 - y1_output_loss: 0.2084 - y2_output_loss: 0.8594 - y1_output_root_mean_squared_error: 0.4559 - y2_output_root_mean_squared_error: 0.9288 - val_loss: 1.7110 - val_y1_output_loss: 0.2755 - val_y2_output_loss: 1.3995 - val_y1_output_root_mean_squared_error: 0.5271 - val_y2_output_root_mean_squared_error: 1.1971</span><br><span class="line">Epoch 224&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 1.2818 - y1_output_loss: 0.2389 - y2_output_loss: 1.0478 - y1_output_root_mean_squared_error: 0.4859 - y2_output_root_mean_squared_error: 1.0226 - val_loss: 2.1446 - val_y1_output_loss: 0.4453 - val_y2_output_loss: 1.6784 - val_y1_output_root_mean_squared_error: 0.6597 - val_y2_output_root_mean_squared_error: 1.3074</span><br><span class="line">Epoch 225&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 1.4369 - y1_output_loss: 0.2671 - y2_output_loss: 1.1634 - y1_output_root_mean_squared_error: 0.5139 - y2_output_root_mean_squared_error: 1.0830 - val_loss: 2.0400 - val_y1_output_loss: 0.4707 - val_y2_output_loss: 1.5454 - val_y1_output_root_mean_squared_error: 0.6913 - val_y2_output_root_mean_squared_error: 1.2498</span><br><span class="line">Epoch 226&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 1.0997 - y1_output_loss: 0.2306 - y2_output_loss: 0.8620 - y1_output_root_mean_squared_error: 0.4811 - y2_output_root_mean_squared_error: 0.9318 - val_loss: 1.3157 - val_y1_output_loss: 0.2030 - val_y2_output_loss: 1.0796 - val_y1_output_root_mean_squared_error: 0.4524 - val_y2_output_root_mean_squared_error: 1.0540</span><br><span class="line">Epoch 227&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 123us&#x2F;sample - loss: 1.2086 - y1_output_loss: 0.2274 - y2_output_loss: 0.9799 - y1_output_root_mean_squared_error: 0.4775 - y2_output_root_mean_squared_error: 0.9902 - val_loss: 2.0781 - val_y1_output_loss: 0.2574 - val_y2_output_loss: 1.8016 - val_y1_output_root_mean_squared_error: 0.5019 - val_y2_output_root_mean_squared_error: 1.3513</span><br><span class="line">Epoch 228&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 122us&#x2F;sample - loss: 1.3447 - y1_output_loss: 0.2494 - y2_output_loss: 1.0866 - y1_output_root_mean_squared_error: 0.5006 - y2_output_root_mean_squared_error: 1.0460 - val_loss: 1.7339 - val_y1_output_loss: 0.2178 - val_y2_output_loss: 1.4745 - val_y1_output_root_mean_squared_error: 0.4641 - val_y2_output_root_mean_squared_error: 1.2323</span><br><span class="line">Epoch 229&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 123us&#x2F;sample - loss: 1.5455 - y1_output_loss: 0.3416 - y2_output_loss: 1.3480 - y1_output_root_mean_squared_error: 0.5513 - y2_output_root_mean_squared_error: 1.1142 - val_loss: 12.1543 - val_y1_output_loss: 2.3967 - val_y2_output_loss: 9.3861 - val_y1_output_root_mean_squared_error: 1.5703 - val_y2_output_root_mean_squared_error: 3.1126</span><br><span class="line">Epoch 230&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 2.3632 - y1_output_loss: 0.4271 - y2_output_loss: 1.9155 - y1_output_root_mean_squared_error: 0.6559 - y2_output_root_mean_squared_error: 1.3903 - val_loss: 1.5599 - val_y1_output_loss: 0.2490 - val_y2_output_loss: 1.2785 - val_y1_output_root_mean_squared_error: 0.5025 - val_y2_output_root_mean_squared_error: 1.1434</span><br><span class="line">Epoch 231&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 123us&#x2F;sample - loss: 1.0867 - y1_output_loss: 0.2323 - y2_output_loss: 0.9364 - y1_output_root_mean_squared_error: 0.4802 - y2_output_root_mean_squared_error: 0.9252 - val_loss: 17.5845 - val_y1_output_loss: 2.0200 - val_y2_output_loss: 15.2386 - val_y1_output_root_mean_squared_error: 1.4421 - val_y2_output_root_mean_squared_error: 3.9376</span><br><span class="line">Epoch 232&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 1.4805 - y1_output_loss: 0.2877 - y2_output_loss: 1.1889 - y1_output_root_mean_squared_error: 0.5385 - y2_output_root_mean_squared_error: 1.0911 - val_loss: 1.5373 - val_y1_output_loss: 0.2667 - val_y2_output_loss: 1.2307 - val_y1_output_root_mean_squared_error: 0.5186 - val_y2_output_root_mean_squared_error: 1.1262</span><br><span class="line">Epoch 233&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 123us&#x2F;sample - loss: 0.8825 - y1_output_loss: 0.1883 - y2_output_loss: 0.6909 - y1_output_root_mean_squared_error: 0.4324 - y2_output_root_mean_squared_error: 0.8340 - val_loss: 1.7107 - val_y1_output_loss: 0.3101 - val_y2_output_loss: 1.3589 - val_y1_output_root_mean_squared_error: 0.5516 - val_y2_output_root_mean_squared_error: 1.1860</span><br><span class="line">Epoch 234&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 1.0054 - y1_output_loss: 0.2160 - y2_output_loss: 0.8162 - y1_output_root_mean_squared_error: 0.4613 - y2_output_root_mean_squared_error: 0.8903 - val_loss: 3.2860 - val_y1_output_loss: 0.9366 - val_y2_output_loss: 2.2742 - val_y1_output_root_mean_squared_error: 0.9840 - val_y2_output_root_mean_squared_error: 1.5224</span><br><span class="line">Epoch 235&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 1.0136 - y1_output_loss: 0.2421 - y2_output_loss: 0.7668 - y1_output_root_mean_squared_error: 0.4942 - y2_output_root_mean_squared_error: 0.8771 - val_loss: 1.4117 - val_y1_output_loss: 0.2098 - val_y2_output_loss: 1.1662 - val_y1_output_root_mean_squared_error: 0.4525 - val_y2_output_root_mean_squared_error: 1.0986</span><br><span class="line">Epoch 236&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 1.6224 - y1_output_loss: 0.2966 - y2_output_loss: 1.3403 - y1_output_root_mean_squared_error: 0.5434 - y2_output_root_mean_squared_error: 1.1520 - val_loss: 8.7280 - val_y1_output_loss: 1.3179 - val_y2_output_loss: 7.2198 - val_y1_output_root_mean_squared_error: 1.1549 - val_y2_output_root_mean_squared_error: 2.7192</span><br><span class="line">Epoch 237&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 130us&#x2F;sample - loss: 1.6138 - y1_output_loss: 0.3277 - y2_output_loss: 1.2727 - y1_output_root_mean_squared_error: 0.5745 - y2_output_root_mean_squared_error: 1.1330 - val_loss: 1.4521 - val_y1_output_loss: 0.1787 - val_y2_output_loss: 1.2417 - val_y1_output_root_mean_squared_error: 0.4166 - val_y2_output_root_mean_squared_error: 1.1307</span><br><span class="line">Epoch 238&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 130us&#x2F;sample - loss: 1.0720 - y1_output_loss: 0.2052 - y2_output_loss: 0.8621 - y1_output_root_mean_squared_error: 0.4541 - y2_output_root_mean_squared_error: 0.9305 - val_loss: 1.5388 - val_y1_output_loss: 0.1681 - val_y2_output_loss: 1.3224 - val_y1_output_root_mean_squared_error: 0.4109 - val_y2_output_root_mean_squared_error: 1.1704</span><br><span class="line">Epoch 239&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 130us&#x2F;sample - loss: 1.2362 - y1_output_loss: 0.2135 - y2_output_loss: 1.0177 - y1_output_root_mean_squared_error: 0.4638 - y2_output_root_mean_squared_error: 1.0105 - val_loss: 1.8754 - val_y1_output_loss: 0.3206 - val_y2_output_loss: 1.5384 - val_y1_output_root_mean_squared_error: 0.5526 - val_y2_output_root_mean_squared_error: 1.2530</span><br><span class="line">Epoch 240&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 130us&#x2F;sample - loss: 1.5053 - y1_output_loss: 0.2669 - y2_output_loss: 1.2271 - y1_output_root_mean_squared_error: 0.5190 - y2_output_root_mean_squared_error: 1.1117 - val_loss: 1.3465 - val_y1_output_loss: 0.2352 - val_y2_output_loss: 1.0901 - val_y1_output_root_mean_squared_error: 0.4809 - val_y2_output_root_mean_squared_error: 1.0560</span><br><span class="line">Epoch 241&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 131us&#x2F;sample - loss: 1.1889 - y1_output_loss: 0.2384 - y2_output_loss: 0.9435 - y1_output_root_mean_squared_error: 0.4903 - y2_output_root_mean_squared_error: 0.9739 - val_loss: 1.4477 - val_y1_output_loss: 0.2293 - val_y2_output_loss: 1.1929 - val_y1_output_root_mean_squared_error: 0.4653 - val_y2_output_root_mean_squared_error: 1.1096</span><br><span class="line">Epoch 242&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 131us&#x2F;sample - loss: 1.0434 - y1_output_loss: 0.2416 - y2_output_loss: 0.7956 - y1_output_root_mean_squared_error: 0.4919 - y2_output_root_mean_squared_error: 0.8952 - val_loss: 1.2783 - val_y1_output_loss: 0.1838 - val_y2_output_loss: 1.0679 - val_y1_output_root_mean_squared_error: 0.4239 - val_y2_output_root_mean_squared_error: 1.0482</span><br><span class="line">Epoch 243&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 130us&#x2F;sample - loss: 1.0510 - y1_output_loss: 0.1933 - y2_output_loss: 0.8736 - y1_output_root_mean_squared_error: 0.4409 - y2_output_root_mean_squared_error: 0.9255 - val_loss: 3.4229 - val_y1_output_loss: 0.3937 - val_y2_output_loss: 2.9480 - val_y1_output_root_mean_squared_error: 0.6303 - val_y2_output_root_mean_squared_error: 1.7394</span><br><span class="line">Epoch 244&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 129us&#x2F;sample - loss: 1.0197 - y1_output_loss: 0.2053 - y2_output_loss: 0.8071 - y1_output_root_mean_squared_error: 0.4540 - y2_output_root_mean_squared_error: 0.9020 - val_loss: 1.2537 - val_y1_output_loss: 0.1703 - val_y2_output_loss: 1.0547 - val_y1_output_root_mean_squared_error: 0.4068 - val_y2_output_root_mean_squared_error: 1.0432</span><br><span class="line">Epoch 245&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 130us&#x2F;sample - loss: 1.1478 - y1_output_loss: 0.2251 - y2_output_loss: 0.9160 - y1_output_root_mean_squared_error: 0.4764 - y2_output_root_mean_squared_error: 0.9596 - val_loss: 1.6822 - val_y1_output_loss: 0.2134 - val_y2_output_loss: 1.4312 - val_y1_output_root_mean_squared_error: 0.4568 - val_y2_output_root_mean_squared_error: 1.2139</span><br><span class="line">Epoch 246&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 129us&#x2F;sample - loss: 1.0185 - y1_output_loss: 0.2070 - y2_output_loss: 0.8094 - y1_output_root_mean_squared_error: 0.4540 - y2_output_root_mean_squared_error: 0.9013 - val_loss: 2.3430 - val_y1_output_loss: 0.2277 - val_y2_output_loss: 2.0557 - val_y1_output_root_mean_squared_error: 0.4766 - val_y2_output_root_mean_squared_error: 1.4546</span><br><span class="line">Epoch 247&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 131us&#x2F;sample - loss: 0.9003 - y1_output_loss: 0.1818 - y2_output_loss: 0.7169 - y1_output_root_mean_squared_error: 0.4256 - y2_output_root_mean_squared_error: 0.8480 - val_loss: 1.6309 - val_y1_output_loss: 0.3286 - val_y2_output_loss: 1.2609 - val_y1_output_root_mean_squared_error: 0.5792 - val_y2_output_root_mean_squared_error: 1.1381</span><br><span class="line">Epoch 248&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 131us&#x2F;sample - loss: 0.9980 - y1_output_loss: 0.2183 - y2_output_loss: 0.7711 - y1_output_root_mean_squared_error: 0.4691 - y2_output_root_mean_squared_error: 0.8820 - val_loss: 1.3113 - val_y1_output_loss: 0.2547 - val_y2_output_loss: 1.0283 - val_y1_output_root_mean_squared_error: 0.5121 - val_y2_output_root_mean_squared_error: 1.0243</span><br><span class="line">Epoch 249&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 129us&#x2F;sample - loss: 1.0006 - y1_output_loss: 0.2136 - y2_output_loss: 0.7812 - y1_output_root_mean_squared_error: 0.4627 - y2_output_root_mean_squared_error: 0.8869 - val_loss: 1.5956 - val_y1_output_loss: 0.2672 - val_y2_output_loss: 1.3124 - val_y1_output_root_mean_squared_error: 0.5041 - val_y2_output_root_mean_squared_error: 1.1582</span><br><span class="line">Epoch 250&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 130us&#x2F;sample - loss: 1.7990 - y1_output_loss: 0.3094 - y2_output_loss: 1.4801 - y1_output_root_mean_squared_error: 0.5575 - y2_output_root_mean_squared_error: 1.2199 - val_loss: 1.2103 - val_y1_output_loss: 0.1845 - val_y2_output_loss: 0.9976 - val_y1_output_root_mean_squared_error: 0.4253 - val_y2_output_root_mean_squared_error: 1.0146</span><br><span class="line">Epoch 251&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 131us&#x2F;sample - loss: 1.1048 - y1_output_loss: 0.2414 - y2_output_loss: 0.8706 - y1_output_root_mean_squared_error: 0.4921 - y2_output_root_mean_squared_error: 0.9288 - val_loss: 2.2270 - val_y1_output_loss: 0.4022 - val_y2_output_loss: 1.7697 - val_y1_output_root_mean_squared_error: 0.6373 - val_y2_output_root_mean_squared_error: 1.3494</span><br><span class="line">Epoch 252&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 1.0427 - y1_output_loss: 0.2267 - y2_output_loss: 0.8480 - y1_output_root_mean_squared_error: 0.4747 - y2_output_root_mean_squared_error: 0.9040 - val_loss: 6.7173 - val_y1_output_loss: 0.7771 - val_y2_output_loss: 5.7745 - val_y1_output_root_mean_squared_error: 0.8978 - val_y2_output_root_mean_squared_error: 2.4313</span><br><span class="line">Epoch 253&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 1.0538 - y1_output_loss: 0.2242 - y2_output_loss: 0.8271 - y1_output_root_mean_squared_error: 0.4748 - y2_output_root_mean_squared_error: 0.9102 - val_loss: 1.2856 - val_y1_output_loss: 0.1961 - val_y2_output_loss: 1.0673 - val_y1_output_root_mean_squared_error: 0.4398 - val_y2_output_root_mean_squared_error: 1.0451</span><br><span class="line">Epoch 254&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 1.4349 - y1_output_loss: 0.2866 - y2_output_loss: 1.1416 - y1_output_root_mean_squared_error: 0.5375 - y2_output_root_mean_squared_error: 1.0705 - val_loss: 1.1138 - val_y1_output_loss: 0.1916 - val_y2_output_loss: 0.9115 - val_y1_output_root_mean_squared_error: 0.4320 - val_y2_output_root_mean_squared_error: 0.9629</span><br><span class="line">Epoch 255&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 1.2409 - y1_output_loss: 0.2600 - y2_output_loss: 0.9736 - y1_output_root_mean_squared_error: 0.5115 - y2_output_root_mean_squared_error: 0.9896 - val_loss: 2.0142 - val_y1_output_loss: 0.2898 - val_y2_output_loss: 1.7147 - val_y1_output_root_mean_squared_error: 0.5329 - val_y2_output_root_mean_squared_error: 1.3154</span><br><span class="line">Epoch 256&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 1.0387 - y1_output_loss: 0.2098 - y2_output_loss: 0.8215 - y1_output_root_mean_squared_error: 0.4584 - y2_output_root_mean_squared_error: 0.9103 - val_loss: 1.3049 - val_y1_output_loss: 0.2523 - val_y2_output_loss: 1.0232 - val_y1_output_root_mean_squared_error: 0.4964 - val_y2_output_root_mean_squared_error: 1.0289</span><br><span class="line">Epoch 257&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 1.0582 - y1_output_loss: 0.1969 - y2_output_loss: 0.8859 - y1_output_root_mean_squared_error: 0.4445 - y2_output_root_mean_squared_error: 0.9277 - val_loss: 4.0275 - val_y1_output_loss: 0.3281 - val_y2_output_loss: 3.6141 - val_y1_output_root_mean_squared_error: 0.5808 - val_y2_output_root_mean_squared_error: 1.9210</span><br><span class="line">Epoch 258&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.9614 - y1_output_loss: 0.1863 - y2_output_loss: 0.7737 - y1_output_root_mean_squared_error: 0.4308 - y2_output_root_mean_squared_error: 0.8808 - val_loss: 1.4466 - val_y1_output_loss: 0.2728 - val_y2_output_loss: 1.1326 - val_y1_output_root_mean_squared_error: 0.5273 - val_y2_output_root_mean_squared_error: 1.0810</span><br><span class="line">Epoch 259&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 130us&#x2F;sample - loss: 1.2704 - y1_output_loss: 0.2704 - y2_output_loss: 0.9978 - y1_output_root_mean_squared_error: 0.5212 - y2_output_root_mean_squared_error: 0.9994 - val_loss: 1.8277 - val_y1_output_loss: 0.2496 - val_y2_output_loss: 1.5625 - val_y1_output_root_mean_squared_error: 0.4935 - val_y2_output_root_mean_squared_error: 1.2586</span><br><span class="line">Epoch 260&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 131us&#x2F;sample - loss: 1.3921 - y1_output_loss: 0.2539 - y2_output_loss: 1.1378 - y1_output_root_mean_squared_error: 0.5046 - y2_output_root_mean_squared_error: 1.0665 - val_loss: 1.5941 - val_y1_output_loss: 0.2459 - val_y2_output_loss: 1.3042 - val_y1_output_root_mean_squared_error: 0.4993 - val_y2_output_root_mean_squared_error: 1.1597</span><br><span class="line">Epoch 261&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 0.9784 - y1_output_loss: 0.1805 - y2_output_loss: 0.7907 - y1_output_root_mean_squared_error: 0.4248 - y2_output_root_mean_squared_error: 0.8933 - val_loss: 1.2559 - val_y1_output_loss: 0.2574 - val_y2_output_loss: 0.9759 - val_y1_output_root_mean_squared_error: 0.5018 - val_y2_output_root_mean_squared_error: 1.0021</span><br><span class="line">Epoch 262&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.9180 - y1_output_loss: 0.2063 - y2_output_loss: 0.7048 - y1_output_root_mean_squared_error: 0.4552 - y2_output_root_mean_squared_error: 0.8431 - val_loss: 1.1417 - val_y1_output_loss: 0.1578 - val_y2_output_loss: 0.9564 - val_y1_output_root_mean_squared_error: 0.3992 - val_y2_output_root_mean_squared_error: 0.9911</span><br><span class="line">Epoch 263&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 0.8139 - y1_output_loss: 0.1745 - y2_output_loss: 0.6385 - y1_output_root_mean_squared_error: 0.4170 - y2_output_root_mean_squared_error: 0.8000 - val_loss: 1.9593 - val_y1_output_loss: 0.2081 - val_y2_output_loss: 1.7038 - val_y1_output_root_mean_squared_error: 0.4525 - val_y2_output_root_mean_squared_error: 1.3246</span><br><span class="line">Epoch 264&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.9562 - y1_output_loss: 0.2084 - y2_output_loss: 0.7436 - y1_output_root_mean_squared_error: 0.4570 - y2_output_root_mean_squared_error: 0.8645 - val_loss: 1.2748 - val_y1_output_loss: 0.1942 - val_y2_output_loss: 1.0519 - val_y1_output_root_mean_squared_error: 0.4359 - val_y2_output_root_mean_squared_error: 1.0416</span><br><span class="line">Epoch 265&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.8633 - y1_output_loss: 0.1842 - y2_output_loss: 0.6726 - y1_output_root_mean_squared_error: 0.4305 - y2_output_root_mean_squared_error: 0.8234 - val_loss: 1.1983 - val_y1_output_loss: 0.2639 - val_y2_output_loss: 0.9199 - val_y1_output_root_mean_squared_error: 0.5067 - val_y2_output_root_mean_squared_error: 0.9703</span><br><span class="line">Epoch 266&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.8122 - y1_output_loss: 0.1761 - y2_output_loss: 0.6433 - y1_output_root_mean_squared_error: 0.4189 - y2_output_root_mean_squared_error: 0.7980 - val_loss: 1.7626 - val_y1_output_loss: 0.2682 - val_y2_output_loss: 1.4663 - val_y1_output_root_mean_squared_error: 0.5109 - val_y2_output_root_mean_squared_error: 1.2254</span><br><span class="line">Epoch 267&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 0.9750 - y1_output_loss: 0.2114 - y2_output_loss: 0.7749 - y1_output_root_mean_squared_error: 0.4592 - y2_output_root_mean_squared_error: 0.8742 - val_loss: 1.9991 - val_y1_output_loss: 0.2921 - val_y2_output_loss: 1.6732 - val_y1_output_root_mean_squared_error: 0.5394 - val_y2_output_root_mean_squared_error: 1.3070</span><br><span class="line">Epoch 268&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 0.9996 - y1_output_loss: 0.2267 - y2_output_loss: 0.7663 - y1_output_root_mean_squared_error: 0.4775 - y2_output_root_mean_squared_error: 0.8784 - val_loss: 1.2722 - val_y1_output_loss: 0.2452 - val_y2_output_loss: 0.9922 - val_y1_output_root_mean_squared_error: 0.4984 - val_y2_output_root_mean_squared_error: 1.0118</span><br><span class="line">Epoch 269&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 129us&#x2F;sample - loss: 1.0805 - y1_output_loss: 0.2264 - y2_output_loss: 0.8569 - y1_output_root_mean_squared_error: 0.4755 - y2_output_root_mean_squared_error: 0.9243 - val_loss: 1.8244 - val_y1_output_loss: 0.2528 - val_y2_output_loss: 1.5373 - val_y1_output_root_mean_squared_error: 0.4982 - val_y2_output_root_mean_squared_error: 1.2555</span><br><span class="line">Epoch 270&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 0.9791 - y1_output_loss: 0.1973 - y2_output_loss: 0.7803 - y1_output_root_mean_squared_error: 0.4454 - y2_output_root_mean_squared_error: 0.8836 - val_loss: 1.2704 - val_y1_output_loss: 0.2117 - val_y2_output_loss: 1.0267 - val_y1_output_root_mean_squared_error: 0.4564 - val_y2_output_root_mean_squared_error: 1.0306</span><br><span class="line">Epoch 271&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 129us&#x2F;sample - loss: 1.0743 - y1_output_loss: 0.2364 - y2_output_loss: 0.8347 - y1_output_root_mean_squared_error: 0.4874 - y2_output_root_mean_squared_error: 0.9147 - val_loss: 1.1412 - val_y1_output_loss: 0.1681 - val_y2_output_loss: 0.9470 - val_y1_output_root_mean_squared_error: 0.4086 - val_y2_output_root_mean_squared_error: 0.9871</span><br><span class="line">Epoch 272&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 1.0275 - y1_output_loss: 0.2127 - y2_output_loss: 0.8077 - y1_output_root_mean_squared_error: 0.4626 - y2_output_root_mean_squared_error: 0.9020 - val_loss: 1.3108 - val_y1_output_loss: 0.1747 - val_y2_output_loss: 1.1006 - val_y1_output_root_mean_squared_error: 0.4181 - val_y2_output_root_mean_squared_error: 1.0659</span><br><span class="line">Epoch 273&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 1.1273 - y1_output_loss: 0.2250 - y2_output_loss: 0.9082 - y1_output_root_mean_squared_error: 0.4754 - y2_output_root_mean_squared_error: 0.9494 - val_loss: 2.4644 - val_y1_output_loss: 0.2596 - val_y2_output_loss: 2.1649 - val_y1_output_root_mean_squared_error: 0.5057 - val_y2_output_root_mean_squared_error: 1.4861</span><br><span class="line">Epoch 274&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 1.0068 - y1_output_loss: 0.2302 - y2_output_loss: 0.8082 - y1_output_root_mean_squared_error: 0.4794 - y2_output_root_mean_squared_error: 0.8814 - val_loss: 6.5169 - val_y1_output_loss: 1.0043 - val_y2_output_loss: 5.3466 - val_y1_output_root_mean_squared_error: 1.0199 - val_y2_output_root_mean_squared_error: 2.3402</span><br><span class="line">Epoch 275&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 129us&#x2F;sample - loss: 2.2453 - y1_output_loss: 0.5398 - y2_output_loss: 1.7008 - y1_output_root_mean_squared_error: 0.7284 - y2_output_root_mean_squared_error: 1.3095 - val_loss: 1.5777 - val_y1_output_loss: 0.3498 - val_y2_output_loss: 1.1990 - val_y1_output_root_mean_squared_error: 0.5878 - val_y2_output_root_mean_squared_error: 1.1101</span><br><span class="line">Epoch 276&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 130us&#x2F;sample - loss: 0.9872 - y1_output_loss: 0.1972 - y2_output_loss: 0.7840 - y1_output_root_mean_squared_error: 0.4457 - y2_output_root_mean_squared_error: 0.8880 - val_loss: 1.2931 - val_y1_output_loss: 0.1838 - val_y2_output_loss: 1.0852 - val_y1_output_root_mean_squared_error: 0.4201 - val_y2_output_root_mean_squared_error: 1.0567</span><br><span class="line">Epoch 277&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 135us&#x2F;sample - loss: 0.8026 - y1_output_loss: 0.1930 - y2_output_loss: 0.6073 - y1_output_root_mean_squared_error: 0.4401 - y2_output_root_mean_squared_error: 0.7803 - val_loss: 1.4738 - val_y1_output_loss: 0.1892 - val_y2_output_loss: 1.2468 - val_y1_output_root_mean_squared_error: 0.4341 - val_y2_output_root_mean_squared_error: 1.1337</span><br><span class="line">Epoch 278&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 134us&#x2F;sample - loss: 1.2166 - y1_output_loss: 0.2219 - y2_output_loss: 0.9864 - y1_output_root_mean_squared_error: 0.4716 - y2_output_root_mean_squared_error: 0.9971 - val_loss: 1.1863 - val_y1_output_loss: 0.2029 - val_y2_output_loss: 0.9598 - val_y1_output_root_mean_squared_error: 0.4497 - val_y2_output_root_mean_squared_error: 0.9920</span><br><span class="line">Epoch 279&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 131us&#x2F;sample - loss: 1.1259 - y1_output_loss: 0.2329 - y2_output_loss: 0.8906 - y1_output_root_mean_squared_error: 0.4836 - y2_output_root_mean_squared_error: 0.9445 - val_loss: 1.7216 - val_y1_output_loss: 0.2776 - val_y2_output_loss: 1.3972 - val_y1_output_root_mean_squared_error: 0.5336 - val_y2_output_root_mean_squared_error: 1.1987</span><br><span class="line">Epoch 280&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 1.0008 - y1_output_loss: 0.2078 - y2_output_loss: 0.7910 - y1_output_root_mean_squared_error: 0.4570 - y2_output_root_mean_squared_error: 0.8899 - val_loss: 1.2768 - val_y1_output_loss: 0.1992 - val_y2_output_loss: 1.0435 - val_y1_output_root_mean_squared_error: 0.4532 - val_y2_output_root_mean_squared_error: 1.0351</span><br><span class="line">Epoch 281&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.8005 - y1_output_loss: 0.1625 - y2_output_loss: 0.6321 - y1_output_root_mean_squared_error: 0.4043 - y2_output_root_mean_squared_error: 0.7981 - val_loss: 1.0048 - val_y1_output_loss: 0.1506 - val_y2_output_loss: 0.8302 - val_y1_output_root_mean_squared_error: 0.3922 - val_y2_output_root_mean_squared_error: 0.9225</span><br><span class="line">Epoch 282&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 1.1621 - y1_output_loss: 0.2493 - y2_output_loss: 0.9065 - y1_output_root_mean_squared_error: 0.5006 - y2_output_root_mean_squared_error: 0.9547 - val_loss: 1.0288 - val_y1_output_loss: 0.1469 - val_y2_output_loss: 0.8555 - val_y1_output_root_mean_squared_error: 0.3817 - val_y2_output_root_mean_squared_error: 0.9397</span><br><span class="line">Epoch 283&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.7301 - y1_output_loss: 0.1614 - y2_output_loss: 0.5649 - y1_output_root_mean_squared_error: 0.4028 - y2_output_root_mean_squared_error: 0.7535 - val_loss: 1.1552 - val_y1_output_loss: 0.1753 - val_y2_output_loss: 0.9654 - val_y1_output_root_mean_squared_error: 0.4077 - val_y2_output_root_mean_squared_error: 0.9945</span><br><span class="line">Epoch 284&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 1.0465 - y1_output_loss: 0.2125 - y2_output_loss: 0.8278 - y1_output_root_mean_squared_error: 0.4616 - y2_output_root_mean_squared_error: 0.9129 - val_loss: 1.2932 - val_y1_output_loss: 0.2132 - val_y2_output_loss: 1.0571 - val_y1_output_root_mean_squared_error: 0.4624 - val_y2_output_root_mean_squared_error: 1.0390</span><br><span class="line">Epoch 285&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 0.9519 - y1_output_loss: 0.1939 - y2_output_loss: 0.7602 - y1_output_root_mean_squared_error: 0.4414 - y2_output_root_mean_squared_error: 0.8701 - val_loss: 1.2227 - val_y1_output_loss: 0.2669 - val_y2_output_loss: 0.9327 - val_y1_output_root_mean_squared_error: 0.5126 - val_y2_output_root_mean_squared_error: 0.9798</span><br><span class="line">Epoch 286&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 0.8982 - y1_output_loss: 0.1822 - y2_output_loss: 0.7087 - y1_output_root_mean_squared_error: 0.4285 - y2_output_root_mean_squared_error: 0.8454 - val_loss: 1.1079 - val_y1_output_loss: 0.1486 - val_y2_output_loss: 0.9334 - val_y1_output_root_mean_squared_error: 0.3821 - val_y2_output_root_mean_squared_error: 0.9807</span><br><span class="line">Epoch 287&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 0.8273 - y1_output_loss: 0.1831 - y2_output_loss: 0.6715 - y1_output_root_mean_squared_error: 0.4186 - y2_output_root_mean_squared_error: 0.8076 - val_loss: 2.6938 - val_y1_output_loss: 0.4615 - val_y2_output_loss: 2.2133 - val_y1_output_root_mean_squared_error: 0.6877 - val_y2_output_root_mean_squared_error: 1.4903</span><br><span class="line">Epoch 288&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 0.8981 - y1_output_loss: 0.1868 - y2_output_loss: 0.7105 - y1_output_root_mean_squared_error: 0.4320 - y2_output_root_mean_squared_error: 0.8435 - val_loss: 1.3153 - val_y1_output_loss: 0.2301 - val_y2_output_loss: 1.0796 - val_y1_output_root_mean_squared_error: 0.4706 - val_y2_output_root_mean_squared_error: 1.0459</span><br><span class="line">Epoch 289&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 0.8101 - y1_output_loss: 0.1736 - y2_output_loss: 0.6342 - y1_output_root_mean_squared_error: 0.4178 - y2_output_root_mean_squared_error: 0.7972 - val_loss: 1.1649 - val_y1_output_loss: 0.1776 - val_y2_output_loss: 0.9514 - val_y1_output_root_mean_squared_error: 0.4262 - val_y2_output_root_mean_squared_error: 0.9916</span><br><span class="line">Epoch 290&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 130us&#x2F;sample - loss: 0.9966 - y1_output_loss: 0.2193 - y2_output_loss: 0.7966 - y1_output_root_mean_squared_error: 0.4657 - y2_output_root_mean_squared_error: 0.8830 - val_loss: 4.7004 - val_y1_output_loss: 0.9540 - val_y2_output_loss: 3.6704 - val_y1_output_root_mean_squared_error: 0.9914 - val_y2_output_root_mean_squared_error: 1.9281</span><br><span class="line">Epoch 291&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 132us&#x2F;sample - loss: 0.8390 - y1_output_loss: 0.1866 - y2_output_loss: 0.6658 - y1_output_root_mean_squared_error: 0.4332 - y2_output_root_mean_squared_error: 0.8071 - val_loss: 3.9435 - val_y1_output_loss: 0.2447 - val_y2_output_loss: 3.6457 - val_y1_output_root_mean_squared_error: 0.4919 - val_y2_output_root_mean_squared_error: 1.9239</span><br><span class="line">Epoch 292&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 0.8926 - y1_output_loss: 0.1850 - y2_output_loss: 0.7080 - y1_output_root_mean_squared_error: 0.4279 - y2_output_root_mean_squared_error: 0.8423 - val_loss: 1.1229 - val_y1_output_loss: 0.1887 - val_y2_output_loss: 0.9045 - val_y1_output_root_mean_squared_error: 0.4334 - val_y2_output_root_mean_squared_error: 0.9670</span><br><span class="line">Epoch 293&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 0.8555 - y1_output_loss: 0.2029 - y2_output_loss: 0.6450 - y1_output_root_mean_squared_error: 0.4520 - y2_output_root_mean_squared_error: 0.8069 - val_loss: 1.3699 - val_y1_output_loss: 0.1985 - val_y2_output_loss: 1.1360 - val_y1_output_root_mean_squared_error: 0.4466 - val_y2_output_root_mean_squared_error: 1.0819</span><br><span class="line">Epoch 294&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 0.8864 - y1_output_loss: 0.1683 - y2_output_loss: 0.7131 - y1_output_root_mean_squared_error: 0.4115 - y2_output_root_mean_squared_error: 0.8468 - val_loss: 1.4606 - val_y1_output_loss: 0.2319 - val_y2_output_loss: 1.1882 - val_y1_output_root_mean_squared_error: 0.4876 - val_y2_output_root_mean_squared_error: 1.1058</span><br><span class="line">Epoch 295&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 1.0358 - y1_output_loss: 0.2065 - y2_output_loss: 0.8215 - y1_output_root_mean_squared_error: 0.4555 - y2_output_root_mean_squared_error: 0.9101 - val_loss: 1.0732 - val_y1_output_loss: 0.1830 - val_y2_output_loss: 0.8658 - val_y1_output_root_mean_squared_error: 0.4327 - val_y2_output_root_mean_squared_error: 0.9413</span><br><span class="line">Epoch 296&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 132us&#x2F;sample - loss: 0.7333 - y1_output_loss: 0.1584 - y2_output_loss: 0.5717 - y1_output_root_mean_squared_error: 0.3997 - y2_output_root_mean_squared_error: 0.7573 - val_loss: 1.2789 - val_y1_output_loss: 0.2588 - val_y2_output_loss: 0.9986 - val_y1_output_root_mean_squared_error: 0.5051 - val_y2_output_root_mean_squared_error: 1.0118</span><br><span class="line">Epoch 297&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 0.7998 - y1_output_loss: 0.1865 - y2_output_loss: 0.6159 - y1_output_root_mean_squared_error: 0.4327 - y2_output_root_mean_squared_error: 0.7827 - val_loss: 1.2475 - val_y1_output_loss: 0.2100 - val_y2_output_loss: 1.0000 - val_y1_output_root_mean_squared_error: 0.4605 - val_y2_output_root_mean_squared_error: 1.0176</span><br><span class="line">Epoch 298&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 1.0707 - y1_output_loss: 0.2019 - y2_output_loss: 0.8629 - y1_output_root_mean_squared_error: 0.4505 - y2_output_root_mean_squared_error: 0.9315 - val_loss: 1.5126 - val_y1_output_loss: 0.3170 - val_y2_output_loss: 1.1568 - val_y1_output_root_mean_squared_error: 0.5671 - val_y2_output_root_mean_squared_error: 1.0913</span><br><span class="line">Epoch 299&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 0.9426 - y1_output_loss: 0.1964 - y2_output_loss: 0.7439 - y1_output_root_mean_squared_error: 0.4382 - y2_output_root_mean_squared_error: 0.8663 - val_loss: 1.1083 - val_y1_output_loss: 0.2374 - val_y2_output_loss: 0.8481 - val_y1_output_root_mean_squared_error: 0.4922 - val_y2_output_root_mean_squared_error: 0.9306</span><br><span class="line">Epoch 300&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.9717 - y1_output_loss: 0.1971 - y2_output_loss: 0.7691 - y1_output_root_mean_squared_error: 0.4436 - y2_output_root_mean_squared_error: 0.8803 - val_loss: 1.2885 - val_y1_output_loss: 0.2867 - val_y2_output_loss: 0.9953 - val_y1_output_root_mean_squared_error: 0.5161 - val_y2_output_root_mean_squared_error: 1.0110</span><br><span class="line">Epoch 301&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.7281 - y1_output_loss: 0.1582 - y2_output_loss: 0.5671 - y1_output_root_mean_squared_error: 0.3984 - y2_output_root_mean_squared_error: 0.7545 - val_loss: 1.3697 - val_y1_output_loss: 0.2110 - val_y2_output_loss: 1.1235 - val_y1_output_root_mean_squared_error: 0.4599 - val_y2_output_root_mean_squared_error: 1.0762</span><br><span class="line">Epoch 302&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.9846 - y1_output_loss: 0.1957 - y2_output_loss: 0.7833 - y1_output_root_mean_squared_error: 0.4417 - y2_output_root_mean_squared_error: 0.8885 - val_loss: 1.6872 - val_y1_output_loss: 0.2980 - val_y2_output_loss: 1.3592 - val_y1_output_root_mean_squared_error: 0.5398 - val_y2_output_root_mean_squared_error: 1.1814</span><br><span class="line">Epoch 303&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.7336 - y1_output_loss: 0.1729 - y2_output_loss: 0.5555 - y1_output_root_mean_squared_error: 0.4170 - y2_output_root_mean_squared_error: 0.7481 - val_loss: 1.0648 - val_y1_output_loss: 0.1640 - val_y2_output_loss: 0.8724 - val_y1_output_root_mean_squared_error: 0.4025 - val_y2_output_root_mean_squared_error: 0.9502</span><br><span class="line">Epoch 304&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.8140 - y1_output_loss: 0.1618 - y2_output_loss: 0.6507 - y1_output_root_mean_squared_error: 0.4012 - y2_output_root_mean_squared_error: 0.8081 - val_loss: 1.8555 - val_y1_output_loss: 0.3717 - val_y2_output_loss: 1.4321 - val_y1_output_root_mean_squared_error: 0.6133 - val_y2_output_root_mean_squared_error: 1.2163</span><br><span class="line">Epoch 305&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 0.7770 - y1_output_loss: 0.1882 - y2_output_loss: 0.5909 - y1_output_root_mean_squared_error: 0.4346 - y2_output_root_mean_squared_error: 0.7669 - val_loss: 2.9794 - val_y1_output_loss: 0.5707 - val_y2_output_loss: 2.3461 - val_y1_output_root_mean_squared_error: 0.7550 - val_y2_output_root_mean_squared_error: 1.5522</span><br><span class="line">Epoch 306&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 130us&#x2F;sample - loss: 0.8880 - y1_output_loss: 0.1829 - y2_output_loss: 0.7143 - y1_output_root_mean_squared_error: 0.4234 - y2_output_root_mean_squared_error: 0.8419 - val_loss: 1.5653 - val_y1_output_loss: 0.4065 - val_y2_output_loss: 1.1156 - val_y1_output_root_mean_squared_error: 0.6480 - val_y2_output_root_mean_squared_error: 1.0702</span><br><span class="line">Epoch 307&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 0.8577 - y1_output_loss: 0.1790 - y2_output_loss: 0.6746 - y1_output_root_mean_squared_error: 0.4238 - y2_output_root_mean_squared_error: 0.8235 - val_loss: 1.1070 - val_y1_output_loss: 0.2233 - val_y2_output_loss: 0.8574 - val_y1_output_root_mean_squared_error: 0.4783 - val_y2_output_root_mean_squared_error: 0.9371</span><br><span class="line">Epoch 308&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 0.8276 - y1_output_loss: 0.1869 - y2_output_loss: 0.6350 - y1_output_root_mean_squared_error: 0.4325 - y2_output_root_mean_squared_error: 0.8003 - val_loss: 1.2487 - val_y1_output_loss: 0.2729 - val_y2_output_loss: 0.9593 - val_y1_output_root_mean_squared_error: 0.5139 - val_y2_output_root_mean_squared_error: 0.9923</span><br><span class="line">Epoch 309&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.8341 - y1_output_loss: 0.1809 - y2_output_loss: 0.6545 - y1_output_root_mean_squared_error: 0.4245 - y2_output_root_mean_squared_error: 0.8087 - val_loss: 1.9479 - val_y1_output_loss: 0.3675 - val_y2_output_loss: 1.5431 - val_y1_output_root_mean_squared_error: 0.6068 - val_y2_output_root_mean_squared_error: 1.2569</span><br><span class="line">Epoch 310&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 0.8469 - y1_output_loss: 0.1903 - y2_output_loss: 0.6536 - y1_output_root_mean_squared_error: 0.4371 - y2_output_root_mean_squared_error: 0.8098 - val_loss: 1.1317 - val_y1_output_loss: 0.1764 - val_y2_output_loss: 0.9318 - val_y1_output_root_mean_squared_error: 0.4136 - val_y2_output_root_mean_squared_error: 0.9801</span><br><span class="line">Epoch 311&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 0.8232 - y1_output_loss: 0.1826 - y2_output_loss: 0.6605 - y1_output_root_mean_squared_error: 0.4259 - y2_output_root_mean_squared_error: 0.8011 - val_loss: 3.3088 - val_y1_output_loss: 0.3410 - val_y2_output_loss: 2.8849 - val_y1_output_root_mean_squared_error: 0.5828 - val_y2_output_root_mean_squared_error: 1.7231</span><br><span class="line">Epoch 312&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 1.0720 - y1_output_loss: 0.2458 - y2_output_loss: 0.8219 - y1_output_root_mean_squared_error: 0.4978 - y2_output_root_mean_squared_error: 0.9078 - val_loss: 1.3226 - val_y1_output_loss: 0.1883 - val_y2_output_loss: 1.0963 - val_y1_output_root_mean_squared_error: 0.4342 - val_y2_output_root_mean_squared_error: 1.0649</span><br><span class="line">Epoch 313&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.6940 - y1_output_loss: 0.1556 - y2_output_loss: 0.5474 - y1_output_root_mean_squared_error: 0.3934 - y2_output_root_mean_squared_error: 0.7344 - val_loss: 2.2723 - val_y1_output_loss: 0.1872 - val_y2_output_loss: 2.0407 - val_y1_output_root_mean_squared_error: 0.4268 - val_y2_output_root_mean_squared_error: 1.4457</span><br><span class="line">Epoch 314&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 129us&#x2F;sample - loss: 0.8320 - y1_output_loss: 0.1867 - y2_output_loss: 0.6641 - y1_output_root_mean_squared_error: 0.4327 - y2_output_root_mean_squared_error: 0.8030 - val_loss: 3.2207 - val_y1_output_loss: 0.2773 - val_y2_output_loss: 2.8862 - val_y1_output_root_mean_squared_error: 0.5227 - val_y2_output_root_mean_squared_error: 1.7168</span><br><span class="line">Epoch 315&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 0.7698 - y1_output_loss: 0.1560 - y2_output_loss: 0.6105 - y1_output_root_mean_squared_error: 0.3957 - y2_output_root_mean_squared_error: 0.7831 - val_loss: 2.0122 - val_y1_output_loss: 0.2588 - val_y2_output_loss: 1.7173 - val_y1_output_root_mean_squared_error: 0.5061 - val_y2_output_root_mean_squared_error: 1.3252</span><br><span class="line">Epoch 316&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 130us&#x2F;sample - loss: 0.8135 - y1_output_loss: 0.1568 - y2_output_loss: 0.6599 - y1_output_root_mean_squared_error: 0.3975 - y2_output_root_mean_squared_error: 0.8096 - val_loss: 1.1236 - val_y1_output_loss: 0.2360 - val_y2_output_loss: 0.8584 - val_y1_output_root_mean_squared_error: 0.4902 - val_y2_output_root_mean_squared_error: 0.9398</span><br><span class="line">Epoch 317&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 0.6440 - y1_output_loss: 0.1487 - y2_output_loss: 0.4924 - y1_output_root_mean_squared_error: 0.3863 - y2_output_root_mean_squared_error: 0.7034 - val_loss: 1.1060 - val_y1_output_loss: 0.1926 - val_y2_output_loss: 0.8919 - val_y1_output_root_mean_squared_error: 0.4341 - val_y2_output_root_mean_squared_error: 0.9579</span><br><span class="line">Epoch 318&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.6171 - y1_output_loss: 0.1498 - y2_output_loss: 0.4672 - y1_output_root_mean_squared_error: 0.3845 - y2_output_root_mean_squared_error: 0.6850 - val_loss: 1.4489 - val_y1_output_loss: 0.3890 - val_y2_output_loss: 1.0487 - val_y1_output_root_mean_squared_error: 0.6120 - val_y2_output_root_mean_squared_error: 1.0365</span><br><span class="line">Epoch 319&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.7854 - y1_output_loss: 0.1753 - y2_output_loss: 0.6227 - y1_output_root_mean_squared_error: 0.4198 - y2_output_root_mean_squared_error: 0.7805 - val_loss: 1.2912 - val_y1_output_loss: 0.2213 - val_y2_output_loss: 1.0391 - val_y1_output_root_mean_squared_error: 0.4689 - val_y2_output_root_mean_squared_error: 1.0351</span><br><span class="line">Epoch 320&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 130us&#x2F;sample - loss: 0.7021 - y1_output_loss: 0.1635 - y2_output_loss: 0.5400 - y1_output_root_mean_squared_error: 0.4049 - y2_output_root_mean_squared_error: 0.7336 - val_loss: 1.3775 - val_y1_output_loss: 0.2423 - val_y2_output_loss: 1.1111 - val_y1_output_root_mean_squared_error: 0.4929 - val_y2_output_root_mean_squared_error: 1.0652</span><br><span class="line">Epoch 321&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 0.8323 - y1_output_loss: 0.1869 - y2_output_loss: 0.6422 - y1_output_root_mean_squared_error: 0.4327 - y2_output_root_mean_squared_error: 0.8032 - val_loss: 0.9199 - val_y1_output_loss: 0.1592 - val_y2_output_loss: 0.7380 - val_y1_output_root_mean_squared_error: 0.3981 - val_y2_output_root_mean_squared_error: 0.8726</span><br><span class="line">Epoch 322&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 0.7086 - y1_output_loss: 0.1655 - y2_output_loss: 0.5406 - y1_output_root_mean_squared_error: 0.4070 - y2_output_root_mean_squared_error: 0.7369 - val_loss: 0.9767 - val_y1_output_loss: 0.1996 - val_y2_output_loss: 0.7670 - val_y1_output_root_mean_squared_error: 0.4337 - val_y2_output_root_mean_squared_error: 0.8880</span><br><span class="line">Epoch 323&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 0.6555 - y1_output_loss: 0.1507 - y2_output_loss: 0.4988 - y1_output_root_mean_squared_error: 0.3898 - y2_output_root_mean_squared_error: 0.7096 - val_loss: 1.1595 - val_y1_output_loss: 0.1688 - val_y2_output_loss: 0.9574 - val_y1_output_root_mean_squared_error: 0.4107 - val_y2_output_root_mean_squared_error: 0.9954</span><br><span class="line">Epoch 324&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 1.0005 - y1_output_loss: 0.2021 - y2_output_loss: 0.7911 - y1_output_root_mean_squared_error: 0.4513 - y2_output_root_mean_squared_error: 0.8926 - val_loss: 0.9493 - val_y1_output_loss: 0.1753 - val_y2_output_loss: 0.7498 - val_y1_output_root_mean_squared_error: 0.4225 - val_y2_output_root_mean_squared_error: 0.8779</span><br><span class="line">Epoch 325&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 129us&#x2F;sample - loss: 0.5788 - y1_output_loss: 0.1515 - y2_output_loss: 0.4299 - y1_output_root_mean_squared_error: 0.3893 - y2_output_root_mean_squared_error: 0.6536 - val_loss: 1.4659 - val_y1_output_loss: 0.1633 - val_y2_output_loss: 1.2786 - val_y1_output_root_mean_squared_error: 0.3980 - val_y2_output_root_mean_squared_error: 1.1435</span><br><span class="line">Epoch 326&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 0.8731 - y1_output_loss: 0.1800 - y2_output_loss: 0.6914 - y1_output_root_mean_squared_error: 0.4249 - y2_output_root_mean_squared_error: 0.8322 - val_loss: 1.3492 - val_y1_output_loss: 0.1715 - val_y2_output_loss: 1.1435 - val_y1_output_root_mean_squared_error: 0.4132 - val_y2_output_root_mean_squared_error: 1.0856</span><br><span class="line">Epoch 327&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 0.9711 - y1_output_loss: 0.1857 - y2_output_loss: 0.7783 - y1_output_root_mean_squared_error: 0.4325 - y2_output_root_mean_squared_error: 0.8855 - val_loss: 0.9085 - val_y1_output_loss: 0.1418 - val_y2_output_loss: 0.7434 - val_y1_output_root_mean_squared_error: 0.3744 - val_y2_output_root_mean_squared_error: 0.8766</span><br><span class="line">Epoch 328&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.6604 - y1_output_loss: 0.1573 - y2_output_loss: 0.5008 - y1_output_root_mean_squared_error: 0.3960 - y2_output_root_mean_squared_error: 0.7096 - val_loss: 1.0329 - val_y1_output_loss: 0.1877 - val_y2_output_loss: 0.8180 - val_y1_output_root_mean_squared_error: 0.4358 - val_y2_output_root_mean_squared_error: 0.9181</span><br><span class="line">Epoch 329&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 0.7277 - y1_output_loss: 0.1686 - y2_output_loss: 0.5562 - y1_output_root_mean_squared_error: 0.4124 - y2_output_root_mean_squared_error: 0.7467 - val_loss: 1.2218 - val_y1_output_loss: 0.2504 - val_y2_output_loss: 0.9624 - val_y1_output_root_mean_squared_error: 0.4922 - val_y2_output_root_mean_squared_error: 0.9897</span><br><span class="line">Epoch 330&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 129us&#x2F;sample - loss: 0.6737 - y1_output_loss: 0.1528 - y2_output_loss: 0.5181 - y1_output_root_mean_squared_error: 0.3916 - y2_output_root_mean_squared_error: 0.7213 - val_loss: 0.9150 - val_y1_output_loss: 0.1505 - val_y2_output_loss: 0.7415 - val_y1_output_root_mean_squared_error: 0.3897 - val_y2_output_root_mean_squared_error: 0.8736</span><br><span class="line">Epoch 331&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 0.9360 - y1_output_loss: 0.2249 - y2_output_loss: 0.7035 - y1_output_root_mean_squared_error: 0.4760 - y2_output_root_mean_squared_error: 0.8422 - val_loss: 0.9410 - val_y1_output_loss: 0.1651 - val_y2_output_loss: 0.7504 - val_y1_output_root_mean_squared_error: 0.4081 - val_y2_output_root_mean_squared_error: 0.8800</span><br><span class="line">Epoch 332&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 0.7827 - y1_output_loss: 0.1585 - y2_output_loss: 0.6192 - y1_output_root_mean_squared_error: 0.3997 - y2_output_root_mean_squared_error: 0.7893 - val_loss: 1.2724 - val_y1_output_loss: 0.2366 - val_y2_output_loss: 1.0144 - val_y1_output_root_mean_squared_error: 0.4770 - val_y2_output_root_mean_squared_error: 1.0222</span><br><span class="line">Epoch 333&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 129us&#x2F;sample - loss: 0.6543 - y1_output_loss: 0.1560 - y2_output_loss: 0.4971 - y1_output_root_mean_squared_error: 0.3937 - y2_output_root_mean_squared_error: 0.7066 - val_loss: 1.3503 - val_y1_output_loss: 0.3060 - val_y2_output_loss: 1.0079 - val_y1_output_root_mean_squared_error: 0.5614 - val_y2_output_root_mean_squared_error: 1.0174</span><br><span class="line">Epoch 334&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 129us&#x2F;sample - loss: 0.5996 - y1_output_loss: 0.1526 - y2_output_loss: 0.4466 - y1_output_root_mean_squared_error: 0.3914 - y2_output_root_mean_squared_error: 0.6681 - val_loss: 1.6662 - val_y1_output_loss: 0.2401 - val_y2_output_loss: 1.4082 - val_y1_output_root_mean_squared_error: 0.4849 - val_y2_output_root_mean_squared_error: 1.1963</span><br><span class="line">Epoch 335&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 0.7863 - y1_output_loss: 0.1683 - y2_output_loss: 0.6179 - y1_output_root_mean_squared_error: 0.4094 - y2_output_root_mean_squared_error: 0.7865 - val_loss: 1.6715 - val_y1_output_loss: 0.3497 - val_y2_output_loss: 1.2815 - val_y1_output_root_mean_squared_error: 0.6003 - val_y2_output_root_mean_squared_error: 1.1451</span><br><span class="line">Epoch 336&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 1.6309 - y1_output_loss: 0.3496 - y2_output_loss: 1.2704 - y1_output_root_mean_squared_error: 0.5924 - y2_output_root_mean_squared_error: 1.1313 - val_loss: 1.1689 - val_y1_output_loss: 0.2101 - val_y2_output_loss: 0.9366 - val_y1_output_root_mean_squared_error: 0.4557 - val_y2_output_root_mean_squared_error: 0.9804</span><br><span class="line">Epoch 337&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.7696 - y1_output_loss: 0.1853 - y2_output_loss: 0.5781 - y1_output_root_mean_squared_error: 0.4320 - y2_output_root_mean_squared_error: 0.7635 - val_loss: 1.0266 - val_y1_output_loss: 0.1456 - val_y2_output_loss: 0.8608 - val_y1_output_root_mean_squared_error: 0.3743 - val_y2_output_root_mean_squared_error: 0.9416</span><br><span class="line">Epoch 338&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 0.8781 - y1_output_loss: 0.1789 - y2_output_loss: 0.6955 - y1_output_root_mean_squared_error: 0.4237 - y2_output_root_mean_squared_error: 0.8358 - val_loss: 1.1781 - val_y1_output_loss: 0.2439 - val_y2_output_loss: 0.9032 - val_y1_output_root_mean_squared_error: 0.4958 - val_y2_output_root_mean_squared_error: 0.9655</span><br><span class="line">Epoch 339&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 0.7124 - y1_output_loss: 0.1558 - y2_output_loss: 0.5530 - y1_output_root_mean_squared_error: 0.3949 - y2_output_root_mean_squared_error: 0.7460 - val_loss: 1.1935 - val_y1_output_loss: 0.2527 - val_y2_output_loss: 0.9062 - val_y1_output_root_mean_squared_error: 0.5046 - val_y2_output_root_mean_squared_error: 0.9689</span><br><span class="line">Epoch 340&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.6402 - y1_output_loss: 0.1517 - y2_output_loss: 0.4851 - y1_output_root_mean_squared_error: 0.3890 - y2_output_root_mean_squared_error: 0.6992 - val_loss: 0.9242 - val_y1_output_loss: 0.1516 - val_y2_output_loss: 0.7478 - val_y1_output_root_mean_squared_error: 0.3929 - val_y2_output_root_mean_squared_error: 0.8774</span><br><span class="line">Epoch 341&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 0.7840 - y1_output_loss: 0.1781 - y2_output_loss: 0.6029 - y1_output_root_mean_squared_error: 0.4210 - y2_output_root_mean_squared_error: 0.7789 - val_loss: 0.9450 - val_y1_output_loss: 0.1820 - val_y2_output_loss: 0.7502 - val_y1_output_root_mean_squared_error: 0.4167 - val_y2_output_root_mean_squared_error: 0.8783</span><br><span class="line">Epoch 342&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 0.7228 - y1_output_loss: 0.1770 - y2_output_loss: 0.5650 - y1_output_root_mean_squared_error: 0.4216 - y2_output_root_mean_squared_error: 0.7383 - val_loss: 1.9110 - val_y1_output_loss: 0.4213 - val_y2_output_loss: 1.4604 - val_y1_output_root_mean_squared_error: 0.6486 - val_y2_output_root_mean_squared_error: 1.2208</span><br><span class="line">Epoch 343&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.6441 - y1_output_loss: 0.1542 - y2_output_loss: 0.4898 - y1_output_root_mean_squared_error: 0.3923 - y2_output_root_mean_squared_error: 0.7001 - val_loss: 1.0753 - val_y1_output_loss: 0.2280 - val_y2_output_loss: 0.8260 - val_y1_output_root_mean_squared_error: 0.4790 - val_y2_output_root_mean_squared_error: 0.9197</span><br><span class="line">Epoch 344&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 0.5974 - y1_output_loss: 0.1447 - y2_output_loss: 0.4491 - y1_output_root_mean_squared_error: 0.3809 - y2_output_root_mean_squared_error: 0.6726 - val_loss: 0.8805 - val_y1_output_loss: 0.1445 - val_y2_output_loss: 0.7136 - val_y1_output_root_mean_squared_error: 0.3740 - val_y2_output_root_mean_squared_error: 0.8606</span><br><span class="line">Epoch 345&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.6617 - y1_output_loss: 0.1528 - y2_output_loss: 0.5036 - y1_output_root_mean_squared_error: 0.3925 - y2_output_root_mean_squared_error: 0.7125 - val_loss: 1.4191 - val_y1_output_loss: 0.2602 - val_y2_output_loss: 1.1299 - val_y1_output_root_mean_squared_error: 0.5182 - val_y2_output_root_mean_squared_error: 1.0727</span><br><span class="line">Epoch 346&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.7411 - y1_output_loss: 0.1502 - y2_output_loss: 0.5964 - y1_output_root_mean_squared_error: 0.3884 - y2_output_root_mean_squared_error: 0.7682 - val_loss: 2.5562 - val_y1_output_loss: 0.2056 - val_y2_output_loss: 2.3115 - val_y1_output_root_mean_squared_error: 0.4512 - val_y2_output_root_mean_squared_error: 1.5338</span><br><span class="line">Epoch 347&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 129us&#x2F;sample - loss: 0.8719 - y1_output_loss: 0.1878 - y2_output_loss: 0.6812 - y1_output_root_mean_squared_error: 0.4338 - y2_output_root_mean_squared_error: 0.8268 - val_loss: 1.2814 - val_y1_output_loss: 0.2406 - val_y2_output_loss: 1.0323 - val_y1_output_root_mean_squared_error: 0.4889 - val_y2_output_root_mean_squared_error: 1.0210</span><br><span class="line">Epoch 348&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.9484 - y1_output_loss: 0.2112 - y2_output_loss: 0.7451 - y1_output_root_mean_squared_error: 0.4459 - y2_output_root_mean_squared_error: 0.8658 - val_loss: 1.5067 - val_y1_output_loss: 0.5212 - val_y2_output_loss: 0.9913 - val_y1_output_root_mean_squared_error: 0.7093 - val_y2_output_root_mean_squared_error: 1.0018</span><br><span class="line">Epoch 349&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 0.5819 - y1_output_loss: 0.1371 - y2_output_loss: 0.4459 - y1_output_root_mean_squared_error: 0.3703 - y2_output_root_mean_squared_error: 0.6670 - val_loss: 0.9625 - val_y1_output_loss: 0.2005 - val_y2_output_loss: 0.7372 - val_y1_output_root_mean_squared_error: 0.4499 - val_y2_output_root_mean_squared_error: 0.8718</span><br><span class="line">Epoch 350&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 129us&#x2F;sample - loss: 0.6519 - y1_output_loss: 0.1493 - y2_output_loss: 0.4998 - y1_output_root_mean_squared_error: 0.3874 - y2_output_root_mean_squared_error: 0.7084 - val_loss: 1.6220 - val_y1_output_loss: 0.2355 - val_y2_output_loss: 1.3486 - val_y1_output_root_mean_squared_error: 0.4924 - val_y2_output_root_mean_squared_error: 1.1746</span><br><span class="line">Epoch 351&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 0.6408 - y1_output_loss: 0.1510 - y2_output_loss: 0.4843 - y1_output_root_mean_squared_error: 0.3901 - y2_output_root_mean_squared_error: 0.6990 - val_loss: 0.7954 - val_y1_output_loss: 0.1474 - val_y2_output_loss: 0.6311 - val_y1_output_root_mean_squared_error: 0.3803 - val_y2_output_root_mean_squared_error: 0.8067</span><br><span class="line">Epoch 352&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 0.7111 - y1_output_loss: 0.1837 - y2_output_loss: 0.5351 - y1_output_root_mean_squared_error: 0.4143 - y2_output_root_mean_squared_error: 0.7344 - val_loss: 1.3685 - val_y1_output_loss: 0.2864 - val_y2_output_loss: 1.0635 - val_y1_output_root_mean_squared_error: 0.5258 - val_y2_output_root_mean_squared_error: 1.0450</span><br><span class="line">Epoch 353&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 143us&#x2F;sample - loss: 0.6332 - y1_output_loss: 0.1519 - y2_output_loss: 0.4792 - y1_output_root_mean_squared_error: 0.3912 - y2_output_root_mean_squared_error: 0.6929 - val_loss: 0.9624 - val_y1_output_loss: 0.1686 - val_y2_output_loss: 0.7779 - val_y1_output_root_mean_squared_error: 0.4048 - val_y2_output_root_mean_squared_error: 0.8936</span><br><span class="line">Epoch 354&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 0.5404 - y1_output_loss: 0.1588 - y2_output_loss: 0.3786 - y1_output_root_mean_squared_error: 0.4002 - y2_output_root_mean_squared_error: 0.6166 - val_loss: 0.8316 - val_y1_output_loss: 0.1596 - val_y2_output_loss: 0.6624 - val_y1_output_root_mean_squared_error: 0.3869 - val_y2_output_root_mean_squared_error: 0.8258</span><br><span class="line">Epoch 355&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 0.6553 - y1_output_loss: 0.1674 - y2_output_loss: 0.4854 - y1_output_root_mean_squared_error: 0.4103 - y2_output_root_mean_squared_error: 0.6979 - val_loss: 1.1018 - val_y1_output_loss: 0.1735 - val_y2_output_loss: 0.9093 - val_y1_output_root_mean_squared_error: 0.4142 - val_y2_output_root_mean_squared_error: 0.9645</span><br><span class="line">Epoch 356&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 0.6039 - y1_output_loss: 0.1539 - y2_output_loss: 0.4463 - y1_output_root_mean_squared_error: 0.3933 - y2_output_root_mean_squared_error: 0.6703 - val_loss: 0.9195 - val_y1_output_loss: 0.1621 - val_y2_output_loss: 0.7320 - val_y1_output_root_mean_squared_error: 0.4071 - val_y2_output_root_mean_squared_error: 0.8682</span><br><span class="line">Epoch 357&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 0.7453 - y1_output_loss: 0.1667 - y2_output_loss: 0.5750 - y1_output_root_mean_squared_error: 0.4089 - y2_output_root_mean_squared_error: 0.7603 - val_loss: 0.9560 - val_y1_output_loss: 0.1805 - val_y2_output_loss: 0.7566 - val_y1_output_root_mean_squared_error: 0.4192 - val_y2_output_root_mean_squared_error: 0.8833</span><br><span class="line">Epoch 358&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 0.6407 - y1_output_loss: 0.1548 - y2_output_loss: 0.4910 - y1_output_root_mean_squared_error: 0.3934 - y2_output_root_mean_squared_error: 0.6970 - val_loss: 1.0727 - val_y1_output_loss: 0.2024 - val_y2_output_loss: 0.8418 - val_y1_output_root_mean_squared_error: 0.4506 - val_y2_output_root_mean_squared_error: 0.9325</span><br><span class="line">Epoch 359&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 130us&#x2F;sample - loss: 0.7114 - y1_output_loss: 0.1696 - y2_output_loss: 0.5444 - y1_output_root_mean_squared_error: 0.4114 - y2_output_root_mean_squared_error: 0.7363 - val_loss: 2.3368 - val_y1_output_loss: 0.5002 - val_y2_output_loss: 1.7640 - val_y1_output_root_mean_squared_error: 0.7196 - val_y2_output_root_mean_squared_error: 1.3487</span><br><span class="line">Epoch 360&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 130us&#x2F;sample - loss: 0.5273 - y1_output_loss: 0.1522 - y2_output_loss: 0.3718 - y1_output_root_mean_squared_error: 0.3910 - y2_output_root_mean_squared_error: 0.6119 - val_loss: 1.0586 - val_y1_output_loss: 0.2245 - val_y2_output_loss: 0.8126 - val_y1_output_root_mean_squared_error: 0.4704 - val_y2_output_root_mean_squared_error: 0.9151</span><br><span class="line">Epoch 361&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 0.7108 - y1_output_loss: 0.1707 - y2_output_loss: 0.5367 - y1_output_root_mean_squared_error: 0.4142 - y2_output_root_mean_squared_error: 0.7343 - val_loss: 1.4369 - val_y1_output_loss: 0.3029 - val_y2_output_loss: 1.0936 - val_y1_output_root_mean_squared_error: 0.5555 - val_y2_output_root_mean_squared_error: 1.0622</span><br><span class="line">Epoch 362&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 139us&#x2F;sample - loss: 0.6066 - y1_output_loss: 0.1516 - y2_output_loss: 0.4601 - y1_output_root_mean_squared_error: 0.3829 - y2_output_root_mean_squared_error: 0.6782 - val_loss: 1.2705 - val_y1_output_loss: 0.2464 - val_y2_output_loss: 0.9967 - val_y1_output_root_mean_squared_error: 0.5018 - val_y2_output_root_mean_squared_error: 1.0093</span><br><span class="line">Epoch 363&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 130us&#x2F;sample - loss: 0.8357 - y1_output_loss: 0.1794 - y2_output_loss: 0.6502 - y1_output_root_mean_squared_error: 0.4248 - y2_output_root_mean_squared_error: 0.8094 - val_loss: 0.9788 - val_y1_output_loss: 0.2239 - val_y2_output_loss: 0.7397 - val_y1_output_root_mean_squared_error: 0.4649 - val_y2_output_root_mean_squared_error: 0.8733</span><br><span class="line">Epoch 364&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 0.6539 - y1_output_loss: 0.1474 - y2_output_loss: 0.5018 - y1_output_root_mean_squared_error: 0.3845 - y2_output_root_mean_squared_error: 0.7114 - val_loss: 1.1947 - val_y1_output_loss: 0.2620 - val_y2_output_loss: 0.9025 - val_y1_output_root_mean_squared_error: 0.5178 - val_y2_output_root_mean_squared_error: 0.9626</span><br><span class="line">Epoch 365&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 0.6947 - y1_output_loss: 0.1858 - y2_output_loss: 0.5102 - y1_output_root_mean_squared_error: 0.4265 - y2_output_root_mean_squared_error: 0.7161 - val_loss: 1.3691 - val_y1_output_loss: 0.3894 - val_y2_output_loss: 0.9372 - val_y1_output_root_mean_squared_error: 0.6324 - val_y2_output_root_mean_squared_error: 0.9845</span><br><span class="line">Epoch 366&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 0.5754 - y1_output_loss: 0.1568 - y2_output_loss: 0.4141 - y1_output_root_mean_squared_error: 0.3973 - y2_output_root_mean_squared_error: 0.6462 - val_loss: 0.8205 - val_y1_output_loss: 0.1462 - val_y2_output_loss: 0.6550 - val_y1_output_root_mean_squared_error: 0.3785 - val_y2_output_root_mean_squared_error: 0.8229</span><br><span class="line">Epoch 367&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 132us&#x2F;sample - loss: 0.5085 - y1_output_loss: 0.1348 - y2_output_loss: 0.3724 - y1_output_root_mean_squared_error: 0.3687 - y2_output_root_mean_squared_error: 0.6103 - val_loss: 1.2465 - val_y1_output_loss: 0.1624 - val_y2_output_loss: 1.0517 - val_y1_output_root_mean_squared_error: 0.4042 - val_y2_output_root_mean_squared_error: 1.0407</span><br><span class="line">Epoch 368&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.5728 - y1_output_loss: 0.1423 - y2_output_loss: 0.4267 - y1_output_root_mean_squared_error: 0.3777 - y2_output_root_mean_squared_error: 0.6558 - val_loss: 0.7274 - val_y1_output_loss: 0.1368 - val_y2_output_loss: 0.5755 - val_y1_output_root_mean_squared_error: 0.3667 - val_y2_output_root_mean_squared_error: 0.7700</span><br><span class="line">Epoch 369&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 0.6235 - y1_output_loss: 0.1527 - y2_output_loss: 0.4706 - y1_output_root_mean_squared_error: 0.3896 - y2_output_root_mean_squared_error: 0.6868 - val_loss: 0.8327 - val_y1_output_loss: 0.1469 - val_y2_output_loss: 0.6765 - val_y1_output_root_mean_squared_error: 0.3718 - val_y2_output_root_mean_squared_error: 0.8333</span><br><span class="line">Epoch 370&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.6348 - y1_output_loss: 0.1492 - y2_output_loss: 0.4887 - y1_output_root_mean_squared_error: 0.3876 - y2_output_root_mean_squared_error: 0.6961 - val_loss: 2.8769 - val_y1_output_loss: 0.2013 - val_y2_output_loss: 2.6070 - val_y1_output_root_mean_squared_error: 0.4449 - val_y2_output_root_mean_squared_error: 1.6368</span><br><span class="line">Epoch 371&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 0.7574 - y1_output_loss: 0.1547 - y2_output_loss: 0.6023 - y1_output_root_mean_squared_error: 0.3925 - y2_output_root_mean_squared_error: 0.7767 - val_loss: 0.8931 - val_y1_output_loss: 0.1438 - val_y2_output_loss: 0.7235 - val_y1_output_root_mean_squared_error: 0.3798 - val_y2_output_root_mean_squared_error: 0.8654</span><br><span class="line">Epoch 372&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 132us&#x2F;sample - loss: 0.5465 - y1_output_loss: 0.1381 - y2_output_loss: 0.4136 - y1_output_root_mean_squared_error: 0.3709 - y2_output_root_mean_squared_error: 0.6395 - val_loss: 1.1772 - val_y1_output_loss: 0.2332 - val_y2_output_loss: 0.9128 - val_y1_output_root_mean_squared_error: 0.4910 - val_y2_output_root_mean_squared_error: 0.9675</span><br><span class="line">Epoch 373&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.5714 - y1_output_loss: 0.1510 - y2_output_loss: 0.4181 - y1_output_root_mean_squared_error: 0.3891 - y2_output_root_mean_squared_error: 0.6481 - val_loss: 1.2464 - val_y1_output_loss: 0.2290 - val_y2_output_loss: 0.9817 - val_y1_output_root_mean_squared_error: 0.4834 - val_y2_output_root_mean_squared_error: 1.0064</span><br><span class="line">Epoch 374&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 133us&#x2F;sample - loss: 0.5772 - y1_output_loss: 0.1431 - y2_output_loss: 0.4322 - y1_output_root_mean_squared_error: 0.3793 - y2_output_root_mean_squared_error: 0.6583 - val_loss: 1.1362 - val_y1_output_loss: 0.1537 - val_y2_output_loss: 0.9812 - val_y1_output_root_mean_squared_error: 0.3750 - val_y2_output_root_mean_squared_error: 0.9978</span><br><span class="line">Epoch 375&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 0.7678 - y1_output_loss: 0.1697 - y2_output_loss: 0.5945 - y1_output_root_mean_squared_error: 0.4122 - y2_output_root_mean_squared_error: 0.7732 - val_loss: 1.0004 - val_y1_output_loss: 0.1807 - val_y2_output_loss: 0.8080 - val_y1_output_root_mean_squared_error: 0.4256 - val_y2_output_root_mean_squared_error: 0.9051</span><br><span class="line">Epoch 376&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 137us&#x2F;sample - loss: 0.5820 - y1_output_loss: 0.1383 - y2_output_loss: 0.4401 - y1_output_root_mean_squared_error: 0.3724 - y2_output_root_mean_squared_error: 0.6658 - val_loss: 0.8723 - val_y1_output_loss: 0.1555 - val_y2_output_loss: 0.7004 - val_y1_output_root_mean_squared_error: 0.3923 - val_y2_output_root_mean_squared_error: 0.8476</span><br><span class="line">Epoch 377&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 0.5823 - y1_output_loss: 0.1359 - y2_output_loss: 0.4417 - y1_output_root_mean_squared_error: 0.3699 - y2_output_root_mean_squared_error: 0.6675 - val_loss: 0.8687 - val_y1_output_loss: 0.1321 - val_y2_output_loss: 0.7168 - val_y1_output_root_mean_squared_error: 0.3636 - val_y2_output_root_mean_squared_error: 0.8582</span><br><span class="line">Epoch 378&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 134us&#x2F;sample - loss: 0.7508 - y1_output_loss: 0.1839 - y2_output_loss: 0.5646 - y1_output_root_mean_squared_error: 0.4277 - y2_output_root_mean_squared_error: 0.7536 - val_loss: 1.3188 - val_y1_output_loss: 0.3315 - val_y2_output_loss: 0.9485 - val_y1_output_root_mean_squared_error: 0.5858 - val_y2_output_root_mean_squared_error: 0.9877</span><br><span class="line">Epoch 379&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 0.6383 - y1_output_loss: 0.1794 - y2_output_loss: 0.4700 - y1_output_root_mean_squared_error: 0.4185 - y2_output_root_mean_squared_error: 0.6806 - val_loss: 1.4670 - val_y1_output_loss: 0.2293 - val_y2_output_loss: 1.2010 - val_y1_output_root_mean_squared_error: 0.4824 - val_y2_output_root_mean_squared_error: 1.1110</span><br><span class="line">Epoch 380&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 0.5954 - y1_output_loss: 0.1577 - y2_output_loss: 0.4331 - y1_output_root_mean_squared_error: 0.3986 - y2_output_root_mean_squared_error: 0.6606 - val_loss: 0.8580 - val_y1_output_loss: 0.1492 - val_y2_output_loss: 0.6959 - val_y1_output_root_mean_squared_error: 0.3840 - val_y2_output_root_mean_squared_error: 0.8429</span><br><span class="line">Epoch 381&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 131us&#x2F;sample - loss: 0.6900 - y1_output_loss: 0.1474 - y2_output_loss: 0.5367 - y1_output_root_mean_squared_error: 0.3849 - y2_output_root_mean_squared_error: 0.7361 - val_loss: 0.8740 - val_y1_output_loss: 0.1449 - val_y2_output_loss: 0.7092 - val_y1_output_root_mean_squared_error: 0.3760 - val_y2_output_root_mean_squared_error: 0.8559</span><br><span class="line">Epoch 382&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 130us&#x2F;sample - loss: 0.5396 - y1_output_loss: 0.1396 - y2_output_loss: 0.3979 - y1_output_root_mean_squared_error: 0.3738 - y2_output_root_mean_squared_error: 0.6324 - val_loss: 0.8340 - val_y1_output_loss: 0.1399 - val_y2_output_loss: 0.6801 - val_y1_output_root_mean_squared_error: 0.3710 - val_y2_output_root_mean_squared_error: 0.8345</span><br><span class="line">Epoch 383&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 0.5884 - y1_output_loss: 0.1409 - y2_output_loss: 0.4499 - y1_output_root_mean_squared_error: 0.3761 - y2_output_root_mean_squared_error: 0.6686 - val_loss: 1.3867 - val_y1_output_loss: 0.3079 - val_y2_output_loss: 1.0501 - val_y1_output_root_mean_squared_error: 0.5584 - val_y2_output_root_mean_squared_error: 1.0368</span><br><span class="line">Epoch 384&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 137us&#x2F;sample - loss: 0.5640 - y1_output_loss: 0.1413 - y2_output_loss: 0.4209 - y1_output_root_mean_squared_error: 0.3768 - y2_output_root_mean_squared_error: 0.6497 - val_loss: 0.9512 - val_y1_output_loss: 0.1913 - val_y2_output_loss: 0.7487 - val_y1_output_root_mean_squared_error: 0.4343 - val_y2_output_root_mean_squared_error: 0.8732</span><br><span class="line">Epoch 385&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 151us&#x2F;sample - loss: 0.5025 - y1_output_loss: 0.1284 - y2_output_loss: 0.3725 - y1_output_root_mean_squared_error: 0.3585 - y2_output_root_mean_squared_error: 0.6115 - val_loss: 0.7303 - val_y1_output_loss: 0.1499 - val_y2_output_loss: 0.5674 - val_y1_output_root_mean_squared_error: 0.3833 - val_y2_output_root_mean_squared_error: 0.7638</span><br><span class="line">Epoch 386&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 0.5921 - y1_output_loss: 0.1451 - y2_output_loss: 0.4420 - y1_output_root_mean_squared_error: 0.3823 - y2_output_root_mean_squared_error: 0.6678 - val_loss: 0.8643 - val_y1_output_loss: 0.1423 - val_y2_output_loss: 0.7123 - val_y1_output_root_mean_squared_error: 0.3697 - val_y2_output_root_mean_squared_error: 0.8530</span><br><span class="line">Epoch 387&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 0.7489 - y1_output_loss: 0.1702 - y2_output_loss: 0.5887 - y1_output_root_mean_squared_error: 0.4103 - y2_output_root_mean_squared_error: 0.7619 - val_loss: 1.7695 - val_y1_output_loss: 0.3899 - val_y2_output_loss: 1.3360 - val_y1_output_root_mean_squared_error: 0.6293 - val_y2_output_root_mean_squared_error: 1.1719</span><br><span class="line">Epoch 388&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 0.6489 - y1_output_loss: 0.1487 - y2_output_loss: 0.4950 - y1_output_root_mean_squared_error: 0.3875 - y2_output_root_mean_squared_error: 0.7062 - val_loss: 0.7150 - val_y1_output_loss: 0.1401 - val_y2_output_loss: 0.5582 - val_y1_output_root_mean_squared_error: 0.3703 - val_y2_output_root_mean_squared_error: 0.7602</span><br><span class="line">Epoch 389&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 141us&#x2F;sample - loss: 0.5023 - y1_output_loss: 0.1424 - y2_output_loss: 0.3577 - y1_output_root_mean_squared_error: 0.3790 - y2_output_root_mean_squared_error: 0.5988 - val_loss: 1.8406 - val_y1_output_loss: 0.4631 - val_y2_output_loss: 1.3280 - val_y1_output_root_mean_squared_error: 0.6893 - val_y2_output_root_mean_squared_error: 1.1685</span><br><span class="line">Epoch 390&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 0.7166 - y1_output_loss: 0.1845 - y2_output_loss: 0.5271 - y1_output_root_mean_squared_error: 0.4312 - y2_output_root_mean_squared_error: 0.7285 - val_loss: 0.7880 - val_y1_output_loss: 0.1511 - val_y2_output_loss: 0.6226 - val_y1_output_root_mean_squared_error: 0.3794 - val_y2_output_root_mean_squared_error: 0.8025</span><br><span class="line">Epoch 391&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.4799 - y1_output_loss: 0.1384 - y2_output_loss: 0.3439 - y1_output_root_mean_squared_error: 0.3730 - y2_output_root_mean_squared_error: 0.5838 - val_loss: 1.1863 - val_y1_output_loss: 0.1455 - val_y2_output_loss: 1.0162 - val_y1_output_root_mean_squared_error: 0.3809 - val_y2_output_root_mean_squared_error: 1.0204</span><br><span class="line">Epoch 392&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.6560 - y1_output_loss: 0.1907 - y2_output_loss: 0.4619 - y1_output_root_mean_squared_error: 0.4378 - y2_output_root_mean_squared_error: 0.6814 - val_loss: 0.8472 - val_y1_output_loss: 0.1929 - val_y2_output_loss: 0.6314 - val_y1_output_root_mean_squared_error: 0.4411 - val_y2_output_root_mean_squared_error: 0.8079</span><br><span class="line">Epoch 393&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 0.6367 - y1_output_loss: 0.1812 - y2_output_loss: 0.4530 - y1_output_root_mean_squared_error: 0.4265 - y2_output_root_mean_squared_error: 0.6744 - val_loss: 0.8282 - val_y1_output_loss: 0.1574 - val_y2_output_loss: 0.6520 - val_y1_output_root_mean_squared_error: 0.3944 - val_y2_output_root_mean_squared_error: 0.8201</span><br><span class="line">Epoch 394&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 132us&#x2F;sample - loss: 0.4695 - y1_output_loss: 0.1385 - y2_output_loss: 0.3298 - y1_output_root_mean_squared_error: 0.3730 - y2_output_root_mean_squared_error: 0.5748 - val_loss: 1.0064 - val_y1_output_loss: 0.1497 - val_y2_output_loss: 0.8367 - val_y1_output_root_mean_squared_error: 0.3855 - val_y2_output_root_mean_squared_error: 0.9262</span><br><span class="line">Epoch 395&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.6088 - y1_output_loss: 0.1480 - y2_output_loss: 0.4578 - y1_output_root_mean_squared_error: 0.3859 - y2_output_root_mean_squared_error: 0.6781 - val_loss: 0.7297 - val_y1_output_loss: 0.1280 - val_y2_output_loss: 0.5840 - val_y1_output_root_mean_squared_error: 0.3555 - val_y2_output_root_mean_squared_error: 0.7767</span><br><span class="line">Epoch 396&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.5088 - y1_output_loss: 0.1393 - y2_output_loss: 0.3708 - y1_output_root_mean_squared_error: 0.3737 - y2_output_root_mean_squared_error: 0.6076 - val_loss: 1.6580 - val_y1_output_loss: 0.3065 - val_y2_output_loss: 1.3194 - val_y1_output_root_mean_squared_error: 0.5546 - val_y2_output_root_mean_squared_error: 1.1620</span><br><span class="line">Epoch 397&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 0.4972 - y1_output_loss: 0.1310 - y2_output_loss: 0.3654 - y1_output_root_mean_squared_error: 0.3616 - y2_output_root_mean_squared_error: 0.6053 - val_loss: 0.9143 - val_y1_output_loss: 0.1373 - val_y2_output_loss: 0.7590 - val_y1_output_root_mean_squared_error: 0.3632 - val_y2_output_root_mean_squared_error: 0.8845</span><br><span class="line">Epoch 398&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 130us&#x2F;sample - loss: 0.5723 - y1_output_loss: 0.1388 - y2_output_loss: 0.4359 - y1_output_root_mean_squared_error: 0.3732 - y2_output_root_mean_squared_error: 0.6580 - val_loss: 1.0790 - val_y1_output_loss: 0.1976 - val_y2_output_loss: 0.8574 - val_y1_output_root_mean_squared_error: 0.4419 - val_y2_output_root_mean_squared_error: 0.9401</span><br><span class="line">Epoch 399&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.6584 - y1_output_loss: 0.1574 - y2_output_loss: 0.4966 - y1_output_root_mean_squared_error: 0.3984 - y2_output_root_mean_squared_error: 0.7069 - val_loss: 0.8045 - val_y1_output_loss: 0.1632 - val_y2_output_loss: 0.6252 - val_y1_output_root_mean_squared_error: 0.3999 - val_y2_output_root_mean_squared_error: 0.8029</span><br><span class="line">Epoch 400&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 0.5886 - y1_output_loss: 0.1562 - y2_output_loss: 0.4315 - y1_output_root_mean_squared_error: 0.3930 - y2_output_root_mean_squared_error: 0.6589 - val_loss: 0.8580 - val_y1_output_loss: 0.2102 - val_y2_output_loss: 0.6290 - val_y1_output_root_mean_squared_error: 0.4565 - val_y2_output_root_mean_squared_error: 0.8060</span><br><span class="line">Epoch 401&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.7923 - y1_output_loss: 0.1854 - y2_output_loss: 0.6048 - y1_output_root_mean_squared_error: 0.4318 - y2_output_root_mean_squared_error: 0.7783 - val_loss: 0.8249 - val_y1_output_loss: 0.1283 - val_y2_output_loss: 0.6788 - val_y1_output_root_mean_squared_error: 0.3600 - val_y2_output_root_mean_squared_error: 0.8338</span><br><span class="line">Epoch 402&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 0.5892 - y1_output_loss: 0.1520 - y2_output_loss: 0.4361 - y1_output_root_mean_squared_error: 0.3900 - y2_output_root_mean_squared_error: 0.6612 - val_loss: 0.8231 - val_y1_output_loss: 0.1533 - val_y2_output_loss: 0.6620 - val_y1_output_root_mean_squared_error: 0.3819 - val_y2_output_root_mean_squared_error: 0.8229</span><br><span class="line">Epoch 403&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.5032 - y1_output_loss: 0.1427 - y2_output_loss: 0.3620 - y1_output_root_mean_squared_error: 0.3786 - y2_output_root_mean_squared_error: 0.5999 - val_loss: 1.2375 - val_y1_output_loss: 0.1307 - val_y2_output_loss: 1.0805 - val_y1_output_root_mean_squared_error: 0.3622 - val_y2_output_root_mean_squared_error: 1.0518</span><br><span class="line">Epoch 404&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 0.5066 - y1_output_loss: 0.1328 - y2_output_loss: 0.3707 - y1_output_root_mean_squared_error: 0.3655 - y2_output_root_mean_squared_error: 0.6108 - val_loss: 0.7686 - val_y1_output_loss: 0.1401 - val_y2_output_loss: 0.6095 - val_y1_output_root_mean_squared_error: 0.3690 - val_y2_output_root_mean_squared_error: 0.7953</span><br><span class="line">Epoch 405&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.4686 - y1_output_loss: 0.1470 - y2_output_loss: 0.3224 - y1_output_root_mean_squared_error: 0.3838 - y2_output_root_mean_squared_error: 0.5668 - val_loss: 0.8585 - val_y1_output_loss: 0.1420 - val_y2_output_loss: 0.7004 - val_y1_output_root_mean_squared_error: 0.3735 - val_y2_output_root_mean_squared_error: 0.8480</span><br><span class="line">Epoch 406&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 0.4718 - y1_output_loss: 0.1322 - y2_output_loss: 0.3371 - y1_output_root_mean_squared_error: 0.3637 - y2_output_root_mean_squared_error: 0.5827 - val_loss: 0.7821 - val_y1_output_loss: 0.1648 - val_y2_output_loss: 0.6012 - val_y1_output_root_mean_squared_error: 0.4004 - val_y2_output_root_mean_squared_error: 0.7885</span><br><span class="line">Epoch 407&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 0.5081 - y1_output_loss: 0.1384 - y2_output_loss: 0.3704 - y1_output_root_mean_squared_error: 0.3721 - y2_output_root_mean_squared_error: 0.6080 - val_loss: 1.0420 - val_y1_output_loss: 0.1708 - val_y2_output_loss: 0.8663 - val_y1_output_root_mean_squared_error: 0.3970 - val_y2_output_root_mean_squared_error: 0.9405</span><br><span class="line">Epoch 408&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.6098 - y1_output_loss: 0.1621 - y2_output_loss: 0.4452 - y1_output_root_mean_squared_error: 0.4044 - y2_output_root_mean_squared_error: 0.6680 - val_loss: 0.8237 - val_y1_output_loss: 0.1434 - val_y2_output_loss: 0.6594 - val_y1_output_root_mean_squared_error: 0.3789 - val_y2_output_root_mean_squared_error: 0.8247</span><br><span class="line">Epoch 409&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.5729 - y1_output_loss: 0.1427 - y2_output_loss: 0.4261 - y1_output_root_mean_squared_error: 0.3783 - y2_output_root_mean_squared_error: 0.6556 - val_loss: 0.9215 - val_y1_output_loss: 0.2036 - val_y2_output_loss: 0.6912 - val_y1_output_root_mean_squared_error: 0.4563 - val_y2_output_root_mean_squared_error: 0.8446</span><br><span class="line">Epoch 410&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 0.5142 - y1_output_loss: 0.1291 - y2_output_loss: 0.3829 - y1_output_root_mean_squared_error: 0.3581 - y2_output_root_mean_squared_error: 0.6213 - val_loss: 0.8220 - val_y1_output_loss: 0.1362 - val_y2_output_loss: 0.6704 - val_y1_output_root_mean_squared_error: 0.3626 - val_y2_output_root_mean_squared_error: 0.8310</span><br><span class="line">Epoch 411&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 0.8410 - y1_output_loss: 0.1974 - y2_output_loss: 0.6415 - y1_output_root_mean_squared_error: 0.4443 - y2_output_root_mean_squared_error: 0.8023 - val_loss: 1.6356 - val_y1_output_loss: 0.2598 - val_y2_output_loss: 1.3686 - val_y1_output_root_mean_squared_error: 0.5042 - val_y2_output_root_mean_squared_error: 1.1753</span><br><span class="line">Epoch 412&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 129us&#x2F;sample - loss: 0.6250 - y1_output_loss: 0.1444 - y2_output_loss: 0.4763 - y1_output_root_mean_squared_error: 0.3813 - y2_output_root_mean_squared_error: 0.6926 - val_loss: 0.7005 - val_y1_output_loss: 0.1302 - val_y2_output_loss: 0.5548 - val_y1_output_root_mean_squared_error: 0.3558 - val_y2_output_root_mean_squared_error: 0.7575</span><br><span class="line">Epoch 413&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 0.4727 - y1_output_loss: 0.1420 - y2_output_loss: 0.3340 - y1_output_root_mean_squared_error: 0.3780 - y2_output_root_mean_squared_error: 0.5743 - val_loss: 0.7655 - val_y1_output_loss: 0.1391 - val_y2_output_loss: 0.6107 - val_y1_output_root_mean_squared_error: 0.3665 - val_y2_output_root_mean_squared_error: 0.7945</span><br><span class="line">Epoch 414&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 0.6073 - y1_output_loss: 0.1435 - y2_output_loss: 0.4592 - y1_output_root_mean_squared_error: 0.3802 - y2_output_root_mean_squared_error: 0.6802 - val_loss: 0.7864 - val_y1_output_loss: 0.1570 - val_y2_output_loss: 0.6149 - val_y1_output_root_mean_squared_error: 0.3873 - val_y2_output_root_mean_squared_error: 0.7977</span><br><span class="line">Epoch 415&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 131us&#x2F;sample - loss: 0.4313 - y1_output_loss: 0.1232 - y2_output_loss: 0.3065 - y1_output_root_mean_squared_error: 0.3501 - y2_output_root_mean_squared_error: 0.5556 - val_loss: 0.7912 - val_y1_output_loss: 0.2099 - val_y2_output_loss: 0.5726 - val_y1_output_root_mean_squared_error: 0.4504 - val_y2_output_root_mean_squared_error: 0.7670</span><br><span class="line">Epoch 416&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 129us&#x2F;sample - loss: 0.4653 - y1_output_loss: 0.1251 - y2_output_loss: 0.3416 - y1_output_root_mean_squared_error: 0.3530 - y2_output_root_mean_squared_error: 0.5836 - val_loss: 1.5190 - val_y1_output_loss: 0.3066 - val_y2_output_loss: 1.1706 - val_y1_output_root_mean_squared_error: 0.5634 - val_y2_output_root_mean_squared_error: 1.0962</span><br><span class="line">Epoch 417&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 131us&#x2F;sample - loss: 0.7017 - y1_output_loss: 0.1574 - y2_output_loss: 0.5453 - y1_output_root_mean_squared_error: 0.3956 - y2_output_root_mean_squared_error: 0.7384 - val_loss: 0.7192 - val_y1_output_loss: 0.1426 - val_y2_output_loss: 0.5635 - val_y1_output_root_mean_squared_error: 0.3756 - val_y2_output_root_mean_squared_error: 0.7604</span><br><span class="line">Epoch 418&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 0.7934 - y1_output_loss: 0.1920 - y2_output_loss: 0.5955 - y1_output_root_mean_squared_error: 0.4396 - y2_output_root_mean_squared_error: 0.7747 - val_loss: 0.8008 - val_y1_output_loss: 0.1277 - val_y2_output_loss: 0.6605 - val_y1_output_root_mean_squared_error: 0.3503 - val_y2_output_root_mean_squared_error: 0.8235</span><br><span class="line">Epoch 419&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 129us&#x2F;sample - loss: 0.4948 - y1_output_loss: 0.1381 - y2_output_loss: 0.3579 - y1_output_root_mean_squared_error: 0.3714 - y2_output_root_mean_squared_error: 0.5974 - val_loss: 1.1235 - val_y1_output_loss: 0.1572 - val_y2_output_loss: 0.9450 - val_y1_output_root_mean_squared_error: 0.3897 - val_y2_output_root_mean_squared_error: 0.9857</span><br><span class="line">Epoch 420&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 129us&#x2F;sample - loss: 0.4000 - y1_output_loss: 0.1169 - y2_output_loss: 0.2893 - y1_output_root_mean_squared_error: 0.3430 - y2_output_root_mean_squared_error: 0.5313 - val_loss: 1.1410 - val_y1_output_loss: 0.1338 - val_y2_output_loss: 0.9812 - val_y1_output_root_mean_squared_error: 0.3614 - val_y2_output_root_mean_squared_error: 1.0052</span><br><span class="line">Epoch 421&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 0.5423 - y1_output_loss: 0.1375 - y2_output_loss: 0.4079 - y1_output_root_mean_squared_error: 0.3696 - y2_output_root_mean_squared_error: 0.6369 - val_loss: 0.9854 - val_y1_output_loss: 0.2296 - val_y2_output_loss: 0.7419 - val_y1_output_root_mean_squared_error: 0.4696 - val_y2_output_root_mean_squared_error: 0.8745</span><br><span class="line">Epoch 422&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.4896 - y1_output_loss: 0.1361 - y2_output_loss: 0.3553 - y1_output_root_mean_squared_error: 0.3686 - y2_output_root_mean_squared_error: 0.5948 - val_loss: 0.7862 - val_y1_output_loss: 0.1644 - val_y2_output_loss: 0.6072 - val_y1_output_root_mean_squared_error: 0.4028 - val_y2_output_root_mean_squared_error: 0.7899</span><br><span class="line">Epoch 423&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 0.5026 - y1_output_loss: 0.1387 - y2_output_loss: 0.3621 - y1_output_root_mean_squared_error: 0.3728 - y2_output_root_mean_squared_error: 0.6030 - val_loss: 1.9500 - val_y1_output_loss: 0.2904 - val_y2_output_loss: 1.6460 - val_y1_output_root_mean_squared_error: 0.5317 - val_y2_output_root_mean_squared_error: 1.2912</span><br><span class="line">Epoch 424&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 0.4643 - y1_output_loss: 0.1230 - y2_output_loss: 0.3386 - y1_output_root_mean_squared_error: 0.3512 - y2_output_root_mean_squared_error: 0.5839 - val_loss: 0.8500 - val_y1_output_loss: 0.2045 - val_y2_output_loss: 0.6287 - val_y1_output_root_mean_squared_error: 0.4471 - val_y2_output_root_mean_squared_error: 0.8063</span><br><span class="line">Epoch 425&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 0.4045 - y1_output_loss: 0.1265 - y2_output_loss: 0.2759 - y1_output_root_mean_squared_error: 0.3571 - y2_output_root_mean_squared_error: 0.5262 - val_loss: 1.4624 - val_y1_output_loss: 0.3059 - val_y2_output_loss: 1.1244 - val_y1_output_root_mean_squared_error: 0.5502 - val_y2_output_root_mean_squared_error: 1.0769</span><br><span class="line">Epoch 426&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 0.6233 - y1_output_loss: 0.1552 - y2_output_loss: 0.4672 - y1_output_root_mean_squared_error: 0.3908 - y2_output_root_mean_squared_error: 0.6860 - val_loss: 1.0122 - val_y1_output_loss: 0.2190 - val_y2_output_loss: 0.7683 - val_y1_output_root_mean_squared_error: 0.4727 - val_y2_output_root_mean_squared_error: 0.8881</span><br><span class="line">Epoch 427&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 0.4868 - y1_output_loss: 0.1542 - y2_output_loss: 0.3326 - y1_output_root_mean_squared_error: 0.3925 - y2_output_root_mean_squared_error: 0.5768 - val_loss: 0.7240 - val_y1_output_loss: 0.1335 - val_y2_output_loss: 0.5763 - val_y1_output_root_mean_squared_error: 0.3611 - val_y2_output_root_mean_squared_error: 0.7705</span><br><span class="line">Epoch 428&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.4246 - y1_output_loss: 0.1385 - y2_output_loss: 0.2865 - y1_output_root_mean_squared_error: 0.3733 - y2_output_root_mean_squared_error: 0.5341 - val_loss: 1.4104 - val_y1_output_loss: 0.1582 - val_y2_output_loss: 1.2221 - val_y1_output_root_mean_squared_error: 0.3966 - val_y2_output_root_mean_squared_error: 1.1194</span><br><span class="line">Epoch 429&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 0.6447 - y1_output_loss: 0.1711 - y2_output_loss: 0.4694 - y1_output_root_mean_squared_error: 0.4142 - y2_output_root_mean_squared_error: 0.6879 - val_loss: 0.7301 - val_y1_output_loss: 0.1583 - val_y2_output_loss: 0.5561 - val_y1_output_root_mean_squared_error: 0.3942 - val_y2_output_root_mean_squared_error: 0.7581</span><br><span class="line">Epoch 430&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 130us&#x2F;sample - loss: 0.4201 - y1_output_loss: 0.1200 - y2_output_loss: 0.2986 - y1_output_root_mean_squared_error: 0.3472 - y2_output_root_mean_squared_error: 0.5473 - val_loss: 0.7134 - val_y1_output_loss: 0.1226 - val_y2_output_loss: 0.5729 - val_y1_output_root_mean_squared_error: 0.3505 - val_y2_output_root_mean_squared_error: 0.7684</span><br><span class="line">Epoch 431&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 0.6589 - y1_output_loss: 0.1605 - y2_output_loss: 0.4949 - y1_output_root_mean_squared_error: 0.4020 - y2_output_root_mean_squared_error: 0.7052 - val_loss: 0.7113 - val_y1_output_loss: 0.1407 - val_y2_output_loss: 0.5594 - val_y1_output_root_mean_squared_error: 0.3655 - val_y2_output_root_mean_squared_error: 0.7601</span><br><span class="line">Epoch 432&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 0.3832 - y1_output_loss: 0.1235 - y2_output_loss: 0.2590 - y1_output_root_mean_squared_error: 0.3518 - y2_output_root_mean_squared_error: 0.5094 - val_loss: 0.7094 - val_y1_output_loss: 0.1387 - val_y2_output_loss: 0.5559 - val_y1_output_root_mean_squared_error: 0.3664 - val_y2_output_root_mean_squared_error: 0.7584</span><br><span class="line">Epoch 433&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 0.4755 - y1_output_loss: 0.1328 - y2_output_loss: 0.3430 - y1_output_root_mean_squared_error: 0.3652 - y2_output_root_mean_squared_error: 0.5849 - val_loss: 0.8041 - val_y1_output_loss: 0.1818 - val_y2_output_loss: 0.6109 - val_y1_output_root_mean_squared_error: 0.4176 - val_y2_output_root_mean_squared_error: 0.7936</span><br><span class="line">Epoch 434&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 0.4894 - y1_output_loss: 0.1357 - y2_output_loss: 0.3512 - y1_output_root_mean_squared_error: 0.3694 - y2_output_root_mean_squared_error: 0.5941 - val_loss: 0.9145 - val_y1_output_loss: 0.1376 - val_y2_output_loss: 0.7606 - val_y1_output_root_mean_squared_error: 0.3677 - val_y2_output_root_mean_squared_error: 0.8828</span><br><span class="line">Epoch 435&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 0.5388 - y1_output_loss: 0.1292 - y2_output_loss: 0.4066 - y1_output_root_mean_squared_error: 0.3610 - y2_output_root_mean_squared_error: 0.6392 - val_loss: 0.8077 - val_y1_output_loss: 0.1882 - val_y2_output_loss: 0.5964 - val_y1_output_root_mean_squared_error: 0.4383 - val_y2_output_root_mean_squared_error: 0.7846</span><br><span class="line">Epoch 436&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.5523 - y1_output_loss: 0.1482 - y2_output_loss: 0.4029 - y1_output_root_mean_squared_error: 0.3865 - y2_output_root_mean_squared_error: 0.6348 - val_loss: 0.8952 - val_y1_output_loss: 0.1900 - val_y2_output_loss: 0.6820 - val_y1_output_root_mean_squared_error: 0.4376 - val_y2_output_root_mean_squared_error: 0.8388</span><br><span class="line">Epoch 437&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 0.4843 - y1_output_loss: 0.1273 - y2_output_loss: 0.3554 - y1_output_root_mean_squared_error: 0.3562 - y2_output_root_mean_squared_error: 0.5978 - val_loss: 0.8075 - val_y1_output_loss: 0.1700 - val_y2_output_loss: 0.6215 - val_y1_output_root_mean_squared_error: 0.4088 - val_y2_output_root_mean_squared_error: 0.8002</span><br><span class="line">Epoch 438&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 123us&#x2F;sample - loss: 0.4612 - y1_output_loss: 0.1334 - y2_output_loss: 0.3302 - y1_output_root_mean_squared_error: 0.3645 - y2_output_root_mean_squared_error: 0.5729 - val_loss: 0.7298 - val_y1_output_loss: 0.1405 - val_y2_output_loss: 0.5783 - val_y1_output_root_mean_squared_error: 0.3696 - val_y2_output_root_mean_squared_error: 0.7702</span><br><span class="line">Epoch 439&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 0.4577 - y1_output_loss: 0.1331 - y2_output_loss: 0.3207 - y1_output_root_mean_squared_error: 0.3661 - y2_output_root_mean_squared_error: 0.5689 - val_loss: 0.8726 - val_y1_output_loss: 0.1316 - val_y2_output_loss: 0.7211 - val_y1_output_root_mean_squared_error: 0.3578 - val_y2_output_root_mean_squared_error: 0.8629</span><br><span class="line">Epoch 440&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 130us&#x2F;sample - loss: 0.4609 - y1_output_loss: 0.1285 - y2_output_loss: 0.3301 - y1_output_root_mean_squared_error: 0.3586 - y2_output_root_mean_squared_error: 0.5765 - val_loss: 0.8126 - val_y1_output_loss: 0.1553 - val_y2_output_loss: 0.6395 - val_y1_output_root_mean_squared_error: 0.3907 - val_y2_output_root_mean_squared_error: 0.8123</span><br><span class="line">Epoch 441&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 0.6993 - y1_output_loss: 0.1719 - y2_output_loss: 0.5232 - y1_output_root_mean_squared_error: 0.4161 - y2_output_root_mean_squared_error: 0.7254 - val_loss: 0.9245 - val_y1_output_loss: 0.1782 - val_y2_output_loss: 0.7404 - val_y1_output_root_mean_squared_error: 0.4112 - val_y2_output_root_mean_squared_error: 0.8691</span><br><span class="line">Epoch 442&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 130us&#x2F;sample - loss: 0.3883 - y1_output_loss: 0.1165 - y2_output_loss: 0.2720 - y1_output_root_mean_squared_error: 0.3419 - y2_output_root_mean_squared_error: 0.5210 - val_loss: 0.7698 - val_y1_output_loss: 0.1330 - val_y2_output_loss: 0.6231 - val_y1_output_root_mean_squared_error: 0.3584 - val_y2_output_root_mean_squared_error: 0.8009</span><br><span class="line">Epoch 443&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 129us&#x2F;sample - loss: 0.4333 - y1_output_loss: 0.1282 - y2_output_loss: 0.3034 - y1_output_root_mean_squared_error: 0.3583 - y2_output_root_mean_squared_error: 0.5522 - val_loss: 0.7151 - val_y1_output_loss: 0.1389 - val_y2_output_loss: 0.5598 - val_y1_output_root_mean_squared_error: 0.3719 - val_y2_output_root_mean_squared_error: 0.7595</span><br><span class="line">Epoch 444&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 129us&#x2F;sample - loss: 0.4226 - y1_output_loss: 0.1315 - y2_output_loss: 0.2893 - y1_output_root_mean_squared_error: 0.3631 - y2_output_root_mean_squared_error: 0.5392 - val_loss: 0.7593 - val_y1_output_loss: 0.1462 - val_y2_output_loss: 0.5955 - val_y1_output_root_mean_squared_error: 0.3820 - val_y2_output_root_mean_squared_error: 0.7832</span><br><span class="line">Epoch 445&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 0.4120 - y1_output_loss: 0.1298 - y2_output_loss: 0.2800 - y1_output_root_mean_squared_error: 0.3609 - y2_output_root_mean_squared_error: 0.5308 - val_loss: 0.6737 - val_y1_output_loss: 0.1218 - val_y2_output_loss: 0.5384 - val_y1_output_root_mean_squared_error: 0.3433 - val_y2_output_root_mean_squared_error: 0.7455</span><br><span class="line">Epoch 446&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 0.3966 - y1_output_loss: 0.1209 - y2_output_loss: 0.2734 - y1_output_root_mean_squared_error: 0.3486 - y2_output_root_mean_squared_error: 0.5245 - val_loss: 0.7382 - val_y1_output_loss: 0.1507 - val_y2_output_loss: 0.5747 - val_y1_output_root_mean_squared_error: 0.3821 - val_y2_output_root_mean_squared_error: 0.7695</span><br><span class="line">Epoch 447&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 0.4231 - y1_output_loss: 0.1344 - y2_output_loss: 0.2898 - y1_output_root_mean_squared_error: 0.3668 - y2_output_root_mean_squared_error: 0.5372 - val_loss: 1.4776 - val_y1_output_loss: 0.1876 - val_y2_output_loss: 1.2595 - val_y1_output_root_mean_squared_error: 0.4254 - val_y2_output_root_mean_squared_error: 1.1387</span><br><span class="line">Epoch 448&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 1.0688 - y1_output_loss: 0.2392 - y2_output_loss: 0.8196 - y1_output_root_mean_squared_error: 0.4912 - y2_output_root_mean_squared_error: 0.9096 - val_loss: 0.7727 - val_y1_output_loss: 0.1548 - val_y2_output_loss: 0.5999 - val_y1_output_root_mean_squared_error: 0.3983 - val_y2_output_root_mean_squared_error: 0.7836</span><br><span class="line">Epoch 449&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 0.5737 - y1_output_loss: 0.1645 - y2_output_loss: 0.4230 - y1_output_root_mean_squared_error: 0.4012 - y2_output_root_mean_squared_error: 0.6424 - val_loss: 1.2312 - val_y1_output_loss: 0.1695 - val_y2_output_loss: 1.0340 - val_y1_output_root_mean_squared_error: 0.4094 - val_y2_output_root_mean_squared_error: 1.0313</span><br><span class="line">Epoch 450&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 0.3967 - y1_output_loss: 0.1293 - y2_output_loss: 0.2704 - y1_output_root_mean_squared_error: 0.3566 - y2_output_root_mean_squared_error: 0.5192 - val_loss: 0.6607 - val_y1_output_loss: 0.1508 - val_y2_output_loss: 0.5006 - val_y1_output_root_mean_squared_error: 0.3812 - val_y2_output_root_mean_squared_error: 0.7179</span><br><span class="line">Epoch 451&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 129us&#x2F;sample - loss: 0.4125 - y1_output_loss: 0.1301 - y2_output_loss: 0.2839 - y1_output_root_mean_squared_error: 0.3596 - y2_output_root_mean_squared_error: 0.5322 - val_loss: 1.3602 - val_y1_output_loss: 0.3087 - val_y2_output_loss: 1.0589 - val_y1_output_root_mean_squared_error: 0.5417 - val_y2_output_root_mean_squared_error: 1.0328</span><br><span class="line">Epoch 452&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 0.4214 - y1_output_loss: 0.1239 - y2_output_loss: 0.3005 - y1_output_root_mean_squared_error: 0.3498 - y2_output_root_mean_squared_error: 0.5468 - val_loss: 1.2418 - val_y1_output_loss: 0.3861 - val_y2_output_loss: 0.8220 - val_y1_output_root_mean_squared_error: 0.6298 - val_y2_output_root_mean_squared_error: 0.9194</span><br><span class="line">Epoch 453&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 0.5597 - y1_output_loss: 0.1422 - y2_output_loss: 0.4176 - y1_output_root_mean_squared_error: 0.3788 - y2_output_root_mean_squared_error: 0.6452 - val_loss: 0.8471 - val_y1_output_loss: 0.1513 - val_y2_output_loss: 0.6766 - val_y1_output_root_mean_squared_error: 0.3874 - val_y2_output_root_mean_squared_error: 0.8349</span><br><span class="line">Epoch 454&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 0.4325 - y1_output_loss: 0.1239 - y2_output_loss: 0.3064 - y1_output_root_mean_squared_error: 0.3520 - y2_output_root_mean_squared_error: 0.5555 - val_loss: 1.2956 - val_y1_output_loss: 0.2128 - val_y2_output_loss: 1.0579 - val_y1_output_root_mean_squared_error: 0.4595 - val_y2_output_root_mean_squared_error: 1.0414</span><br><span class="line">Epoch 455&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 0.3706 - y1_output_loss: 0.1154 - y2_output_loss: 0.2537 - y1_output_root_mean_squared_error: 0.3397 - y2_output_root_mean_squared_error: 0.5052 - val_loss: 0.7289 - val_y1_output_loss: 0.1354 - val_y2_output_loss: 0.5812 - val_y1_output_root_mean_squared_error: 0.3638 - val_y2_output_root_mean_squared_error: 0.7723</span><br><span class="line">Epoch 456&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 130us&#x2F;sample - loss: 0.5872 - y1_output_loss: 0.1377 - y2_output_loss: 0.4458 - y1_output_root_mean_squared_error: 0.3722 - y2_output_root_mean_squared_error: 0.6698 - val_loss: 0.6886 - val_y1_output_loss: 0.1324 - val_y2_output_loss: 0.5421 - val_y1_output_root_mean_squared_error: 0.3634 - val_y2_output_root_mean_squared_error: 0.7460</span><br><span class="line">Epoch 457&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 0.4206 - y1_output_loss: 0.1216 - y2_output_loss: 0.3249 - y1_output_root_mean_squared_error: 0.3474 - y2_output_root_mean_squared_error: 0.5477 - val_loss: 1.7120 - val_y1_output_loss: 0.3016 - val_y2_output_loss: 1.3958 - val_y1_output_root_mean_squared_error: 0.5559 - val_y2_output_root_mean_squared_error: 1.1845</span><br><span class="line">Epoch 458&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 129us&#x2F;sample - loss: 0.4260 - y1_output_loss: 0.1297 - y2_output_loss: 0.2950 - y1_output_root_mean_squared_error: 0.3604 - y2_output_root_mean_squared_error: 0.5442 - val_loss: 0.7153 - val_y1_output_loss: 0.1435 - val_y2_output_loss: 0.5530 - val_y1_output_root_mean_squared_error: 0.3835 - val_y2_output_root_mean_squared_error: 0.7538</span><br><span class="line">Epoch 459&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 132us&#x2F;sample - loss: 0.4519 - y1_output_loss: 0.1310 - y2_output_loss: 0.3175 - y1_output_root_mean_squared_error: 0.3631 - y2_output_root_mean_squared_error: 0.5657 - val_loss: 0.7492 - val_y1_output_loss: 0.1576 - val_y2_output_loss: 0.5836 - val_y1_output_root_mean_squared_error: 0.3894 - val_y2_output_root_mean_squared_error: 0.7730</span><br><span class="line">Epoch 460&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 130us&#x2F;sample - loss: 0.4156 - y1_output_loss: 0.1268 - y2_output_loss: 0.2872 - y1_output_root_mean_squared_error: 0.3561 - y2_output_root_mean_squared_error: 0.5374 - val_loss: 0.7846 - val_y1_output_loss: 0.1464 - val_y2_output_loss: 0.6242 - val_y1_output_root_mean_squared_error: 0.3763 - val_y2_output_root_mean_squared_error: 0.8018</span><br><span class="line">Epoch 461&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 132us&#x2F;sample - loss: 0.4354 - y1_output_loss: 0.1374 - y2_output_loss: 0.2946 - y1_output_root_mean_squared_error: 0.3719 - y2_output_root_mean_squared_error: 0.5451 - val_loss: 0.7774 - val_y1_output_loss: 0.1693 - val_y2_output_loss: 0.5905 - val_y1_output_root_mean_squared_error: 0.4132 - val_y2_output_root_mean_squared_error: 0.7789</span><br><span class="line">Epoch 462&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 133us&#x2F;sample - loss: 0.4857 - y1_output_loss: 0.1296 - y2_output_loss: 0.3553 - y1_output_root_mean_squared_error: 0.3585 - y2_output_root_mean_squared_error: 0.5976 - val_loss: 0.7345 - val_y1_output_loss: 0.1535 - val_y2_output_loss: 0.5718 - val_y1_output_root_mean_squared_error: 0.3830 - val_y2_output_root_mean_squared_error: 0.7666</span><br><span class="line">Epoch 463&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 131us&#x2F;sample - loss: 0.4012 - y1_output_loss: 0.1289 - y2_output_loss: 0.2706 - y1_output_root_mean_squared_error: 0.3585 - y2_output_root_mean_squared_error: 0.5222 - val_loss: 0.6227 - val_y1_output_loss: 0.1167 - val_y2_output_loss: 0.4936 - val_y1_output_root_mean_squared_error: 0.3407 - val_y2_output_root_mean_squared_error: 0.7118</span><br><span class="line">Epoch 464&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 132us&#x2F;sample - loss: 0.3780 - y1_output_loss: 0.1191 - y2_output_loss: 0.2560 - y1_output_root_mean_squared_error: 0.3462 - y2_output_root_mean_squared_error: 0.5081 - val_loss: 0.6870 - val_y1_output_loss: 0.1374 - val_y2_output_loss: 0.5357 - val_y1_output_root_mean_squared_error: 0.3651 - val_y2_output_root_mean_squared_error: 0.7441</span><br><span class="line">Epoch 465&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 131us&#x2F;sample - loss: 0.4189 - y1_output_loss: 0.1261 - y2_output_loss: 0.2897 - y1_output_root_mean_squared_error: 0.3560 - y2_output_root_mean_squared_error: 0.5406 - val_loss: 0.6801 - val_y1_output_loss: 0.1367 - val_y2_output_loss: 0.5314 - val_y1_output_root_mean_squared_error: 0.3655 - val_y2_output_root_mean_squared_error: 0.7393</span><br><span class="line">Epoch 466&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 131us&#x2F;sample - loss: 0.4058 - y1_output_loss: 0.1312 - y2_output_loss: 0.2735 - y1_output_root_mean_squared_error: 0.3630 - y2_output_root_mean_squared_error: 0.5234 - val_loss: 0.8318 - val_y1_output_loss: 0.1470 - val_y2_output_loss: 0.6625 - val_y1_output_root_mean_squared_error: 0.3861 - val_y2_output_root_mean_squared_error: 0.8263</span><br><span class="line">Epoch 467&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 131us&#x2F;sample - loss: 0.3782 - y1_output_loss: 0.1173 - y2_output_loss: 0.2627 - y1_output_root_mean_squared_error: 0.3421 - y2_output_root_mean_squared_error: 0.5110 - val_loss: 0.8905 - val_y1_output_loss: 0.1895 - val_y2_output_loss: 0.6846 - val_y1_output_root_mean_squared_error: 0.4288 - val_y2_output_root_mean_squared_error: 0.8406</span><br><span class="line">Epoch 468&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 129us&#x2F;sample - loss: 0.4453 - y1_output_loss: 0.1240 - y2_output_loss: 0.3204 - y1_output_root_mean_squared_error: 0.3513 - y2_output_root_mean_squared_error: 0.5674 - val_loss: 0.7484 - val_y1_output_loss: 0.1862 - val_y2_output_loss: 0.5505 - val_y1_output_root_mean_squared_error: 0.4230 - val_y2_output_root_mean_squared_error: 0.7546</span><br><span class="line">Epoch 469&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 0.4125 - y1_output_loss: 0.1155 - y2_output_loss: 0.2953 - y1_output_root_mean_squared_error: 0.3404 - y2_output_root_mean_squared_error: 0.5446 - val_loss: 0.8586 - val_y1_output_loss: 0.1931 - val_y2_output_loss: 0.6466 - val_y1_output_root_mean_squared_error: 0.4398 - val_y2_output_root_mean_squared_error: 0.8156</span><br><span class="line">Epoch 470&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 130us&#x2F;sample - loss: 0.4080 - y1_output_loss: 0.1290 - y2_output_loss: 0.2794 - y1_output_root_mean_squared_error: 0.3602 - y2_output_root_mean_squared_error: 0.5275 - val_loss: 1.1035 - val_y1_output_loss: 0.2296 - val_y2_output_loss: 0.8476 - val_y1_output_root_mean_squared_error: 0.4805 - val_y2_output_root_mean_squared_error: 0.9342</span><br><span class="line">Epoch 471&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 129us&#x2F;sample - loss: 0.4936 - y1_output_loss: 0.1445 - y2_output_loss: 0.3474 - y1_output_root_mean_squared_error: 0.3812 - y2_output_root_mean_squared_error: 0.5902 - val_loss: 0.7336 - val_y1_output_loss: 0.1324 - val_y2_output_loss: 0.5874 - val_y1_output_root_mean_squared_error: 0.3593 - val_y2_output_root_mean_squared_error: 0.7775</span><br><span class="line">Epoch 472&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.3553 - y1_output_loss: 0.1138 - y2_output_loss: 0.2393 - y1_output_root_mean_squared_error: 0.3389 - y2_output_root_mean_squared_error: 0.4904 - val_loss: 0.6704 - val_y1_output_loss: 0.1219 - val_y2_output_loss: 0.5375 - val_y1_output_root_mean_squared_error: 0.3449 - val_y2_output_root_mean_squared_error: 0.7426</span><br><span class="line">Epoch 473&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 130us&#x2F;sample - loss: 0.5550 - y1_output_loss: 0.1510 - y2_output_loss: 0.4008 - y1_output_root_mean_squared_error: 0.3890 - y2_output_root_mean_squared_error: 0.6353 - val_loss: 0.7624 - val_y1_output_loss: 0.1836 - val_y2_output_loss: 0.5597 - val_y1_output_root_mean_squared_error: 0.4301 - val_y2_output_root_mean_squared_error: 0.7598</span><br><span class="line">Epoch 474&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 131us&#x2F;sample - loss: 0.4520 - y1_output_loss: 0.1375 - y2_output_loss: 0.3136 - y1_output_root_mean_squared_error: 0.3704 - y2_output_root_mean_squared_error: 0.5610 - val_loss: 0.6788 - val_y1_output_loss: 0.1513 - val_y2_output_loss: 0.5090 - val_y1_output_root_mean_squared_error: 0.3933 - val_y2_output_root_mean_squared_error: 0.7239</span><br><span class="line">Epoch 475&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 130us&#x2F;sample - loss: 0.4684 - y1_output_loss: 0.1349 - y2_output_loss: 0.3308 - y1_output_root_mean_squared_error: 0.3677 - y2_output_root_mean_squared_error: 0.5772 - val_loss: 0.7866 - val_y1_output_loss: 0.1411 - val_y2_output_loss: 0.6228 - val_y1_output_root_mean_squared_error: 0.3774 - val_y2_output_root_mean_squared_error: 0.8026</span><br><span class="line">Epoch 476&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 130us&#x2F;sample - loss: 0.5981 - y1_output_loss: 0.1699 - y2_output_loss: 0.4296 - y1_output_root_mean_squared_error: 0.4127 - y2_output_root_mean_squared_error: 0.6541 - val_loss: 1.4772 - val_y1_output_loss: 0.2560 - val_y2_output_loss: 1.1821 - val_y1_output_root_mean_squared_error: 0.5077 - val_y2_output_root_mean_squared_error: 1.1043</span><br><span class="line">Epoch 477&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 131us&#x2F;sample - loss: 0.3753 - y1_output_loss: 0.1279 - y2_output_loss: 0.2483 - y1_output_root_mean_squared_error: 0.3583 - y2_output_root_mean_squared_error: 0.4969 - val_loss: 0.7555 - val_y1_output_loss: 0.1556 - val_y2_output_loss: 0.5813 - val_y1_output_root_mean_squared_error: 0.3934 - val_y2_output_root_mean_squared_error: 0.7751</span><br><span class="line">Epoch 478&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 130us&#x2F;sample - loss: 0.3783 - y1_output_loss: 0.1253 - y2_output_loss: 0.2531 - y1_output_root_mean_squared_error: 0.3536 - y2_output_root_mean_squared_error: 0.5033 - val_loss: 0.7498 - val_y1_output_loss: 0.1550 - val_y2_output_loss: 0.5836 - val_y1_output_root_mean_squared_error: 0.3983 - val_y2_output_root_mean_squared_error: 0.7689</span><br><span class="line">Epoch 479&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 135us&#x2F;sample - loss: 0.6073 - y1_output_loss: 0.1599 - y2_output_loss: 0.4441 - y1_output_root_mean_squared_error: 0.4010 - y2_output_root_mean_squared_error: 0.6682 - val_loss: 0.9721 - val_y1_output_loss: 0.1966 - val_y2_output_loss: 0.7571 - val_y1_output_root_mean_squared_error: 0.4407 - val_y2_output_root_mean_squared_error: 0.8820</span><br><span class="line">Epoch 480&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 123us&#x2F;sample - loss: 0.4673 - y1_output_loss: 0.1369 - y2_output_loss: 0.3261 - y1_output_root_mean_squared_error: 0.3717 - y2_output_root_mean_squared_error: 0.5738 - val_loss: 0.6453 - val_y1_output_loss: 0.1159 - val_y2_output_loss: 0.5138 - val_y1_output_root_mean_squared_error: 0.3400 - val_y2_output_root_mean_squared_error: 0.7278</span><br><span class="line">Epoch 481&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 0.3406 - y1_output_loss: 0.1114 - y2_output_loss: 0.2262 - y1_output_root_mean_squared_error: 0.3352 - y2_output_root_mean_squared_error: 0.4778 - val_loss: 0.6969 - val_y1_output_loss: 0.1323 - val_y2_output_loss: 0.5520 - val_y1_output_root_mean_squared_error: 0.3600 - val_y2_output_root_mean_squared_error: 0.7532</span><br><span class="line">Epoch 482&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 0.3937 - y1_output_loss: 0.1145 - y2_output_loss: 0.2760 - y1_output_root_mean_squared_error: 0.3395 - y2_output_root_mean_squared_error: 0.5277 - val_loss: 0.6339 - val_y1_output_loss: 0.1300 - val_y2_output_loss: 0.4866 - val_y1_output_root_mean_squared_error: 0.3631 - val_y2_output_root_mean_squared_error: 0.7086</span><br><span class="line">Epoch 483&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.3415 - y1_output_loss: 0.1082 - y2_output_loss: 0.2313 - y1_output_root_mean_squared_error: 0.3299 - y2_output_root_mean_squared_error: 0.4823 - val_loss: 0.6348 - val_y1_output_loss: 0.1314 - val_y2_output_loss: 0.4870 - val_y1_output_root_mean_squared_error: 0.3626 - val_y2_output_root_mean_squared_error: 0.7095</span><br><span class="line">Epoch 484&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.3824 - y1_output_loss: 0.1189 - y2_output_loss: 0.2605 - y1_output_root_mean_squared_error: 0.3455 - y2_output_root_mean_squared_error: 0.5128 - val_loss: 0.6755 - val_y1_output_loss: 0.1370 - val_y2_output_loss: 0.5243 - val_y1_output_root_mean_squared_error: 0.3667 - val_y2_output_root_mean_squared_error: 0.7356</span><br><span class="line">Epoch 485&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.3870 - y1_output_loss: 0.1221 - y2_output_loss: 0.2812 - y1_output_root_mean_squared_error: 0.3480 - y2_output_root_mean_squared_error: 0.5157 - val_loss: 3.5514 - val_y1_output_loss: 0.3875 - val_y2_output_loss: 3.0951 - val_y1_output_root_mean_squared_error: 0.6268 - val_y2_output_root_mean_squared_error: 1.7772</span><br><span class="line">Epoch 486&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.4717 - y1_output_loss: 0.1295 - y2_output_loss: 0.3388 - y1_output_root_mean_squared_error: 0.3608 - y2_output_root_mean_squared_error: 0.5844 - val_loss: 0.6812 - val_y1_output_loss: 0.1187 - val_y2_output_loss: 0.5511 - val_y1_output_root_mean_squared_error: 0.3421 - val_y2_output_root_mean_squared_error: 0.7511</span><br><span class="line">Epoch 487&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 0.8186 - y1_output_loss: 0.1734 - y2_output_loss: 0.6387 - y1_output_root_mean_squared_error: 0.4182 - y2_output_root_mean_squared_error: 0.8023 - val_loss: 0.6971 - val_y1_output_loss: 0.1497 - val_y2_output_loss: 0.5304 - val_y1_output_root_mean_squared_error: 0.3865 - val_y2_output_root_mean_squared_error: 0.7401</span><br><span class="line">Epoch 488&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 0.3707 - y1_output_loss: 0.1223 - y2_output_loss: 0.2515 - y1_output_root_mean_squared_error: 0.3498 - y2_output_root_mean_squared_error: 0.4984 - val_loss: 1.4166 - val_y1_output_loss: 0.1750 - val_y2_output_loss: 1.2150 - val_y1_output_root_mean_squared_error: 0.4161 - val_y2_output_root_mean_squared_error: 1.1151</span><br><span class="line">Epoch 489&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 0.3658 - y1_output_loss: 0.1160 - y2_output_loss: 0.2484 - y1_output_root_mean_squared_error: 0.3417 - y2_output_root_mean_squared_error: 0.4991 - val_loss: 0.7811 - val_y1_output_loss: 0.1818 - val_y2_output_loss: 0.5897 - val_y1_output_root_mean_squared_error: 0.4214 - val_y2_output_root_mean_squared_error: 0.7769</span><br><span class="line">Epoch 490&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.3513 - y1_output_loss: 0.1167 - y2_output_loss: 0.2519 - y1_output_root_mean_squared_error: 0.3354 - y2_output_root_mean_squared_error: 0.4887 - val_loss: 2.4837 - val_y1_output_loss: 0.4147 - val_y2_output_loss: 1.9983 - val_y1_output_root_mean_squared_error: 0.6474 - val_y2_output_root_mean_squared_error: 1.4369</span><br><span class="line">Epoch 491&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.3942 - y1_output_loss: 0.1338 - y2_output_loss: 0.2603 - y1_output_root_mean_squared_error: 0.3664 - y2_output_root_mean_squared_error: 0.5098 - val_loss: 0.8068 - val_y1_output_loss: 0.1678 - val_y2_output_loss: 0.6403 - val_y1_output_root_mean_squared_error: 0.4035 - val_y2_output_root_mean_squared_error: 0.8025</span><br><span class="line">Epoch 492&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 127us&#x2F;sample - loss: 0.4053 - y1_output_loss: 0.1271 - y2_output_loss: 0.2763 - y1_output_root_mean_squared_error: 0.3571 - y2_output_root_mean_squared_error: 0.5270 - val_loss: 0.6522 - val_y1_output_loss: 0.1381 - val_y2_output_loss: 0.4981 - val_y1_output_root_mean_squared_error: 0.3730 - val_y2_output_root_mean_squared_error: 0.7163</span><br><span class="line">Epoch 493&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 129us&#x2F;sample - loss: 0.6439 - y1_output_loss: 0.1725 - y2_output_loss: 0.4701 - y1_output_root_mean_squared_error: 0.4170 - y2_output_root_mean_squared_error: 0.6855 - val_loss: 0.6956 - val_y1_output_loss: 0.1367 - val_y2_output_loss: 0.5431 - val_y1_output_root_mean_squared_error: 0.3684 - val_y2_output_root_mean_squared_error: 0.7482</span><br><span class="line">Epoch 494&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.3668 - y1_output_loss: 0.1136 - y2_output_loss: 0.2507 - y1_output_root_mean_squared_error: 0.3385 - y2_output_root_mean_squared_error: 0.5022 - val_loss: 0.6966 - val_y1_output_loss: 0.1242 - val_y2_output_loss: 0.5623 - val_y1_output_root_mean_squared_error: 0.3463 - val_y2_output_root_mean_squared_error: 0.7594</span><br><span class="line">Epoch 495&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 129us&#x2F;sample - loss: 0.3649 - y1_output_loss: 0.1123 - y2_output_loss: 0.2514 - y1_output_root_mean_squared_error: 0.3354 - y2_output_root_mean_squared_error: 0.5025 - val_loss: 0.6636 - val_y1_output_loss: 0.1563 - val_y2_output_loss: 0.4974 - val_y1_output_root_mean_squared_error: 0.3930 - val_y2_output_root_mean_squared_error: 0.7135</span><br><span class="line">Epoch 496&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 0.3620 - y1_output_loss: 0.1171 - y2_output_loss: 0.2456 - y1_output_root_mean_squared_error: 0.3432 - y2_output_root_mean_squared_error: 0.4942 - val_loss: 0.8923 - val_y1_output_loss: 0.1470 - val_y2_output_loss: 0.7327 - val_y1_output_root_mean_squared_error: 0.3771 - val_y2_output_root_mean_squared_error: 0.8661</span><br><span class="line">Epoch 497&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 128us&#x2F;sample - loss: 0.3379 - y1_output_loss: 0.1138 - y2_output_loss: 0.2216 - y1_output_root_mean_squared_error: 0.3387 - y2_output_root_mean_squared_error: 0.4724 - val_loss: 0.6409 - val_y1_output_loss: 0.1159 - val_y2_output_loss: 0.5103 - val_y1_output_root_mean_squared_error: 0.3380 - val_y2_output_root_mean_squared_error: 0.7257</span><br><span class="line">Epoch 498&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 125us&#x2F;sample - loss: 0.3811 - y1_output_loss: 0.1227 - y2_output_loss: 0.2566 - y1_output_root_mean_squared_error: 0.3495 - y2_output_root_mean_squared_error: 0.5088 - val_loss: 0.7152 - val_y1_output_loss: 0.1229 - val_y2_output_loss: 0.5831 - val_y1_output_root_mean_squared_error: 0.3470 - val_y2_output_root_mean_squared_error: 0.7712</span><br><span class="line">Epoch 499&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 126us&#x2F;sample - loss: 0.3892 - y1_output_loss: 0.1247 - y2_output_loss: 0.2618 - y1_output_root_mean_squared_error: 0.3539 - y2_output_root_mean_squared_error: 0.5138 - val_loss: 0.7226 - val_y1_output_loss: 0.1470 - val_y2_output_loss: 0.5654 - val_y1_output_root_mean_squared_error: 0.3839 - val_y2_output_root_mean_squared_error: 0.7584</span><br><span class="line">Epoch 500&#x2F;500</span><br><span class="line">614&#x2F;614 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 124us&#x2F;sample - loss: 0.3434 - y1_output_loss: 0.1136 - y2_output_loss: 0.2285 - y1_output_root_mean_squared_error: 0.3387 - y2_output_root_mean_squared_error: 0.4782 - val_loss: 1.0780 - val_y1_output_loss: 0.1587 - val_y2_output_loss: 0.9029 - val_y1_output_root_mean_squared_error: 0.3929 - val_y2_output_root_mean_squared_error: 0.9611</span><br></pre></td></tr></table></figure>

<h2 id="Evaluate-the-Model-and-Plot-Metrics"><a href="#Evaluate-the-Model-and-Plot-Metrics" class="headerlink" title="Evaluate the Model and Plot Metrics"></a>Evaluate the Model and Plot Metrics</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Test the model and print loss and mse for both outputs</span></span><br><span class="line">loss, Y1_loss, Y2_loss, Y1_rmse, Y2_rmse = model.evaluate(x=norm_test_X, y=test_Y)</span><br><span class="line">print(<span class="string">&quot;Loss = &#123;&#125;, Y1_loss = &#123;&#125;, Y1_mse = &#123;&#125;, Y2_loss = &#123;&#125;, Y2_mse = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(loss, Y1_loss, Y1_rmse, Y2_loss, Y2_rmse))</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">154&#x2F;154 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] - 0s 31us&#x2F;sample - loss: 1.0780 - y1_output_loss: 0.1530 - y2_output_loss: 0.9228 - y1_output_root_mean_squared_error: 0.3929 - y2_output_root_mean_squared_error: 0.9611</span><br><span class="line">Loss &#x3D; 1.0780117248559926, Y1_loss &#x3D; 0.15296421945095062, Y1_mse &#x3D; 0.39290860295295715, Y2_loss &#x3D; 0.9227539300918579, Y2_mse &#x3D; 0.9610590934753418</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Plot the loss and mse</span></span><br><span class="line">Y_pred = model.predict(norm_test_X)</span><br><span class="line">plot_diff(test_Y[<span class="number">0</span>], Y_pred[<span class="number">0</span>], title=<span class="string">&#x27;Y1&#x27;</span>)</span><br><span class="line">plot_diff(test_Y[<span class="number">1</span>], Y_pred[<span class="number">1</span>], title=<span class="string">&#x27;Y2&#x27;</span>)</span><br><span class="line">plot_metrics(metric_name=<span class="string">&#x27;y1_output_root_mean_squared_error&#x27;</span>, title=<span class="string">&#x27;Y1 RMSE&#x27;</span>, ylim=<span class="number">6</span>)</span><br><span class="line">plot_metrics(metric_name=<span class="string">&#x27;y2_output_root_mean_squared_error&#x27;</span>, title=<span class="string">&#x27;Y2 RMSE&#x27;</span>, ylim=<span class="number">7</span>)</span><br></pre></td></tr></table></figure>


<p><img src="/2021/04/05/tensorflow-Sequential-API-vs-Functional-API/Y1.png"></p>
<p><img src="/2021/04/05/tensorflow-Sequential-API-vs-Functional-API/Y2.png"></p>
<p><img src="/2021/04/05/tensorflow-Sequential-API-vs-Functional-API/Y1_mse.png"></p>
<p><img src="/2021/04/05/tensorflow-Sequential-API-vs-Functional-API/Y2_mse.png"></p>
]]></content>
      <categories>
        <category>DeepLearning</category>
      </categories>
      <tags>
        <tag>Tensorflow</tag>
        <tag>Keras</tag>
      </tags>
  </entry>
</search>
